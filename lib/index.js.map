{
  "version": 3,
  "sources": ["../src/Atoms.ts", "../src/NoiseKit.ts", "../src/RTKit.ts", "../src/renderTargetUtils.ts", "../src/RTDoubleBufferKit.ts", "../src/MotionKit.ts", "../src/VelocityFieldKit.ts", "../src/index.ts"],
  "sourcesContent": ["import {\n  AdditiveBlending,\n  BufferAttribute,\n  BufferGeometry,\n  Points,\n  ShaderMaterial,\n  Sphere,\n  WebGLRenderer\n} from 'three'\n\nimport fragmentShader from './point.frag.glsl'\nimport vertexShader from './point.vert.glsl'\nimport MotionKit from './MotionKit'\nimport VelocityFieldKit from './VelocityFieldKit'\n\nexport default class Atoms {\n  visuals: Points\n  motionKit: MotionKit\n  velocityKit: VelocityFieldKit\n  constructor(edgeSize = 256) {\n    const geo = new BufferGeometry()\n    const total = edgeSize * edgeSize\n    const bufferArr = new Float32Array(total * 3)\n    for (let iy = 0; iy < edgeSize; iy++) {\n      for (let ix = 0; ix < edgeSize; ix++) {\n        const i3 = (ix + iy * edgeSize) * 3\n        bufferArr[i3] = (ix + 0.5) / edgeSize\n        bufferArr[i3 + 1] = (iy + 0.5) / edgeSize\n        bufferArr[i3 + 2] = (i3 * 0.001) % 1\n      }\n    }\n    geo.setAttribute('position', new BufferAttribute(bufferArr, 3))\n    geo.boundingSphere = new Sphere(undefined, 1)\n\n    const motionKit = new MotionKit(edgeSize, geo)\n    const velocityKit = new VelocityFieldKit(\n      64,\n      geo,\n      motionKit.outputTextureUniform\n    )\n    motionKit.linkInput('uVelocitiesTexture', velocityKit.outputTextureUniform)\n\n    const pointsMat = new ShaderMaterial({\n      fragmentShader,\n      vertexShader,\n      uniforms: {\n        uMap: motionKit.outputTextureUniform\n      },\n      blending: AdditiveBlending,\n      depthTest: false\n    })\n    const visuals = new Points(geo, pointsMat)\n\n    // visuals.add(velocityKit.getTestPlane())\n\n    this.motionKit = motionKit\n    this.velocityKit = velocityKit\n    this.visuals = visuals\n  }\n  update(renderer: WebGLRenderer, dt: number) {\n    this.motionKit.render(renderer, dt)\n    this.velocityKit.render(renderer, dt)\n    this.visuals.rotation.y += dt * 0.2\n    //\n  }\n}\n", "import { Uniform, WebGLRenderer } from 'three'\n\nimport fragmentShader from './noise.frag.glsl'\nimport vertexShader from './fullclip.vert.glsl'\nimport RTKit from './RTKit'\nexport default class NoiseKit extends RTKit {\n  dirty = true\n  _phaseUniform: Uniform\n  constructor(edgeSize: number) {\n    const phaseUniform = new Uniform(0)\n    const uniforms = { uPhase: phaseUniform }\n    super(edgeSize, vertexShader, fragmentShader, uniforms)\n\n    this._phaseUniform = phaseUniform\n  }\n  public get phase() {\n    return this._phaseUniform.value\n  }\n  public set phase(value: number) {\n    this._phaseUniform.value = value\n    this.dirty = true\n  }\n  render(renderer: WebGLRenderer, dt: number) {\n    this.phase += dt * 0.1\n    if (this.dirty) {\n      this.dirty = false\n      renderer.setRenderTarget(this.rt)\n      renderer.render(this.scene, this.camera)\n      renderer.setRenderTarget(null)\n    }\n  }\n}\n", "import {\n  AdditiveBlending,\n  IUniform,\n  Mesh,\n  OrthographicCamera,\n  PlaneGeometry,\n  Scene,\n  ShaderMaterial,\n  Uniform,\n  WebGLRenderTarget\n} from 'three'\n\nimport basicFragmentShader from './map.frag.glsl'\nimport basicVertexShader from './fullclip.vert.glsl'\nimport { getBasicRenderTarget } from './renderTargetUtils'\n\nexport default class RTKit {\n  outputTextureUniform: Uniform\n  plane: Mesh<PlaneGeometry, ShaderMaterial>\n  rt: WebGLRenderTarget\n  outputRt: WebGLRenderTarget\n  getTestPlane() {\n    return new Mesh(\n      new PlaneGeometry(2, 2),\n      new ShaderMaterial({\n        vertexShader: basicVertexShader,\n        fragmentShader: basicFragmentShader,\n        blending: AdditiveBlending,\n        depthTest: false,\n        depthWrite: false,\n        uniforms: { uMap: this.outputTextureUniform }\n      })\n    )\n  }\n\n  scene: Scene\n  camera: OrthographicCamera\n  constructor(\n    public edgeSize: number,\n    vertexShader: string,\n    fragmentShader: string,\n    protected _uniforms: {\n      [uniform: string]: IUniform<any>\n    }\n  ) {\n    const rt = getBasicRenderTarget(edgeSize)\n    this.outputTextureUniform = new Uniform(rt.texture)\n\n    const scene = new Scene()\n\n    const plane = new Mesh(\n      new PlaneGeometry(2, 2),\n      new ShaderMaterial({\n        vertexShader,\n        fragmentShader,\n        uniforms: this._uniforms,\n        depthTest: false,\n        depthWrite: false\n      })\n    )\n    scene.add(plane)\n    const camera = new OrthographicCamera(-1, 1, 1, -1, -1, 1)\n    scene.add(camera)\n\n    this.plane = plane\n    this.scene = scene\n    this.camera = camera\n    this.rt = rt\n    this.outputRt = rt\n  }\n}\n", "import {\n  FloatType,\n  LinearEncoding,\n  NearestFilter,\n  RGBAFormat,\n  WebGLRenderTarget\n} from 'three'\n\nexport function getBasicRenderTarget(edgeSize: number) {\n  return new WebGLRenderTarget(edgeSize, edgeSize, {\n    format: RGBAFormat,\n    type: FloatType,\n    magFilter: NearestFilter,\n    minFilter: NearestFilter,\n    depthBuffer: false,\n    encoding: LinearEncoding\n  })\n}\n", "import { IUniform, Uniform, WebGLRenderTarget } from 'three'\n\nimport RTKit from './RTKit'\n\nexport default class RTDoubleBufferKit extends RTKit {\n  inputTextureUniform: Uniform\n  rt2: WebGLRenderTarget\n\n  constructor(\n    rtKit: RTKit,\n    vertexShader: string,\n    fragmentShader: string,\n    uniforms: {\n      [uniform: string]: IUniform<any>\n    }\n  ) {\n    super(rtKit.edgeSize, vertexShader, fragmentShader, uniforms)\n    this.inputTextureUniform = new Uniform(rtKit.outputTextureUniform.value)\n    this.rt2 = rtKit.rt\n  }\n\n  linkInput(name: string, uniform: Uniform) {\n    this.plane.material.uniforms[name] = uniform\n  }\n  swap() {\n    this.outputRt = this.outputRt === this.rt ? this.rt2 : this.rt\n    this.inputTextureUniform.value = (\n      this.outputRt === this.rt ? this.rt2 : this.rt\n    ).texture\n    this.outputTextureUniform.value = this.outputRt.texture\n  }\n}\n", "import {\n  BufferGeometry,\n  Uniform,\n  WebGLRenderer,\n  WebGLRenderTarget\n} from 'three'\n\nimport fragmentShader from './motion.frag.glsl'\nimport vertexShader from './fullclip.vert.glsl'\nimport NoiseKit from './NoiseKit'\nimport RTDoubleBufferKit from './RTDoubleBufferKit'\nexport default class MotionKit extends RTDoubleBufferKit {\n  private _initPositionsNoiseKit: NoiseKit\n  initd = false\n  constructor(edgeSize: number, pointGeo: BufferGeometry) {\n    const initPositionNoiseKit = new NoiseKit(edgeSize)\n    super(initPositionNoiseKit, vertexShader, fragmentShader, {})\n    this.linkInput('uPositionsTexture', this.inputTextureUniform)\n    this._initPositionsNoiseKit = initPositionNoiseKit\n  }\n  render(renderer: WebGLRenderer, dt: number) {\n    if (!this.initd) {\n      this.initd = true\n      this.swap()\n      this._initPositionsNoiseKit.render(renderer, dt)\n    }\n    this.swap()\n    renderer.setRenderTarget(this.outputRt)\n    renderer.render(this.scene, this.camera)\n    renderer.setRenderTarget(null)\n  }\n}\n", "import {\n  BufferGeometry,\n  Points,\n  ShaderMaterial,\n  Uniform,\n  WebGLRenderer,\n  WebGLRenderTarget\n} from 'three'\n\nimport fragmentShader2 from './velocityField.frag.glsl'\nimport vertexShader2 from './velocityField.vert.glsl'\nimport fadeFragmentShader from './fade.frag.glsl'\nimport fadeVertexShader from './fullclip.vert.glsl'\nimport NoiseKit from './NoiseKit'\nimport RTDoubleBufferKit from './RTDoubleBufferKit'\nexport default class VelocityFieldKit extends RTDoubleBufferKit {\n  private _initVelocitiesNoiseKit: NoiseKit\n  initd = false\n  constructor(\n    edgeSize3d: number,\n    pointGeo: BufferGeometry,\n    positionsTextureUniform: Uniform\n  ) {\n    const edgeSize2d = Math.sqrt(Math.pow(edgeSize3d, 3))\n    const initPositionNoiseKit = new NoiseKit(edgeSize2d)\n    super(initPositionNoiseKit, fadeVertexShader, fadeFragmentShader, {})\n    this.linkInput('uFieldVelocitiesTexture', this.inputTextureUniform)\n    this._initVelocitiesNoiseKit = initPositionNoiseKit\n\n    const points = new Points(\n      pointGeo,\n      new ShaderMaterial({\n        vertexShader: vertexShader2,\n        fragmentShader: fragmentShader2,\n        uniforms: {\n          uPositionsTexture: positionsTextureUniform,\n          uVelocitiesTexture: this.inputTextureUniform\n        },\n        depthTest: false,\n        depthWrite: false\n      })\n    )\n    this.scene.add(points)\n    // this.plane.material.visible = false\n    this.plane.renderOrder = -1\n  }\n  render(renderer: WebGLRenderer, dt: number) {\n    if (!this.initd) {\n      this.initd = true\n      this.swap()\n      this._initVelocitiesNoiseKit.render(renderer, dt)\n    }\n    this.swap()\n    renderer.setRenderTarget(this.outputRt)\n    renderer.render(this.scene, this.camera)\n    renderer.setRenderTarget(null)\n  }\n}\n", "import Atoms from './Atoms'\n\nexport default {\n  Atoms\n}\n"],
  "mappings": "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",
  "names": []
}
