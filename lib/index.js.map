{
  "version": 3,
  "sources": ["../src/utils/location.ts", "../src/utils/colors.ts", "../src/utils/math.ts", "../src/device.ts", "../src/constants.ts", "../src/helpers/utils/NamedBitsInBytes.ts", "../src/helpers/utils/NamedBitsInNumber.ts", "../src/helpers/utils/NoiseHelper2D.ts", "../src/utils/random.ts", "../src/helpers/utils/ThreshNoiseHelper2D.ts", "../src/rendering/tileMaker/mapTileMaker/JITTileSampler.ts", "../src/rendering/tileMaker/mapTileMaker/MapTileMaker.ts", "../src/geometries/FibonacciSphereGeometry.ts", "../src/geometries/GrassGeometry.ts", "../src/geometries/PyramidGeometry.ts", "../src/helpers/materials/materialLib.ts", "../src/materials/BasicVec4MeshMaterial/index.ts", "../src/utils/jsUtils.ts", "../src/materials/HeightMeshMaterial/index.ts", "../src/materials/WorldNormalMeshMaterial/index.ts", "../src/helpers/typeHelpers.ts", "../src/utils/geometry.ts", "../src/meshes/factoryRocks.ts", "../src/meshes/factoryRockCrumbs.ts", "../src/meshes/factoryTreePine.ts", "../src/meshes/factoryTreeMaple.ts", "../src/meshes/factoryGoldPile.ts", "../src/meshes/factoryLampPost.ts", "../src/meshes/factoryBush.ts", "../src/utils/memoizer.ts", "../src/meshes/factoryBrickWall.ts", "../src/rendering/tileMaker/TileMaker.ts", "../src/rendering/tileMaker/DoubleCachedTileMaker.ts", "../src/helpers/utils/MapScrollingView.ts", "../src/materials/BasicTextureMaterial/index.ts", "../src/utils/threeUtils.ts", "../src/materials/FauxelMaterial/index.ts", "../src/helpers/NoiseTextureMaker.ts", "../src/materials/SimplexNoiseMaterial/index.ts", "../src/rendering/tileMaker/spriteMaker/SpriteMaker.ts", "../src/rendering/tileMaker/spriteMaker/JITSpriteSampler.ts", "../src/mapCache/MapCacheRenderer.ts", "../src/materials/TileCacheWriterPointMaterial/index.ts", "../src/mapCache/MapWithSpritesCacheRenderer.ts", "../src/mapCache/PointLightRenderer.ts", "../src/materials/PointLightPointMaterial/index.ts", "../src/utils/colorLibrary.ts", "../test/utils/geometry.ts", "../test/utils/math.ts", "../src/rendering/TextureCachingScroller.ts", "../src/materials/BasicFullScreenMaterial/index.ts", "../src/uniforms.ts", "../src/index.ts"],
  "sourcesContent": ["import { Color } from 'three'\n\nimport { hexColor } from './colors'\nimport { clamp } from './math'\n\nexport function getUrlParam(param: string) {\n  __setReminder(param)\n  return new URL(window.location.href).searchParams.get(param)\n}\n\nexport function getUrlFlag(param: string) {\n  const result = getUrlParam(param)\n  return !!(result === '' || (result && result !== 'false'))\n}\n\nfunction __getUrlNumber(\n  param: string,\n  defaultVal: number,\n  parser: (val: string) => number,\n  min = -Infinity,\n  max = Infinity\n) {\n  return clamp(parser(getUrlParam(param) || defaultVal.toString()), min, max)\n}\n\nexport function getUrlFloat(\n  param: string,\n  defaultVal: number,\n  min = -Infinity,\n  max = Infinity\n) {\n  return __getUrlNumber(param, defaultVal, parseFloat, min, max)\n}\n\nexport function getUrlInt(\n  param: string,\n  defaultVal: number,\n  min = -Infinity,\n  max = Infinity\n) {\n  return __getUrlNumber(param, defaultVal, parseInt, min, max)\n}\n\nexport function getUrlColor(param: string, defaultColor: string | Color) {\n  let str = getUrlParam(param)\n  if (!str) {\n    if (defaultColor instanceof Color) {\n      return defaultColor\n    } else {\n      str = defaultColor\n    }\n  }\n  return hexColor('#' + str)\n}\n\nconst __keysToRemember: string[] = []\nlet __reminderQueued = false\nfunction __setReminder(name: string) {\n  if (!__keysToRemember.includes(name)) {\n    __keysToRemember.push(name)\n    if (!__reminderQueued) {\n      __reminderQueued = true\n      setTimeout(() => {\n        console.log('Nice Parameters to try: ' + __keysToRemember.join(', '))\n        __reminderQueued = false\n      }, 2000)\n    }\n  }\n}\n", "import { Color, MeshBasicMaterial } from 'three'\nimport { rand } from '~/utils/math'\n\nconst __whiteColor = new Color(1, 1, 1)\nconst __tempColor = new Color()\n\nexport function addColor(dst: Color, src: Color, amt: number) {\n  if (amt === 0) {\n    return\n  }\n  __tempColor.copy(src).multiplyScalar(amt)\n  dst.add(__tempColor)\n}\n\nexport function screenColor(dst: Color, src: Color) {\n  __tempColor.copy(__whiteColor).sub(dst)\n  dst.add(__tempColor.multiply(src))\n}\n\nexport function createMaterial(col: Color | string | number) {\n  const color = new Color(col)\n  const hsl = { h: 0, s: 0, l: 0 }\n  color.getHSL(hsl)\n  hsl.h += rand(-0.025, 0.025)\n  hsl.s += rand(-0.05, 0.05)\n  hsl.l += rand(-0.05, 0.05)\n  color.setHSL(hsl.h, hsl.s, hsl.l)\n  const mat = new MeshBasicMaterial({\n    color,\n    transparent: true,\n    opacity: 0.2,\n    depthWrite: false\n  })\n  mat.color = color\n  return mat\n}\n\nexport function makeHSL(h: number, s = 0.75, l = 0.5) {\n  return new Color().setHSL(h, s, l)\n}\n\n//color style algorithm extracted from three.js\nexport function hexColor(style: string) {\n  const m = /^#([A-Fa-f0-9]+)$/.exec(style)\n  if (m) {\n    // hex color\n\n    const hex = m[1]\n    const size = hex.length\n\n    if (size === 3) {\n      const color = new Color()\n      // #ff0\n      color.r = parseInt(hex.charAt(0) + hex.charAt(0), 16) / 255\n      color.g = parseInt(hex.charAt(1) + hex.charAt(1), 16) / 255\n      color.b = parseInt(hex.charAt(2) + hex.charAt(2), 16) / 255\n\n      return color\n    } else if (size === 6) {\n      const color = new Color()\n      // #ff0000\n      color.r = parseInt(hex.charAt(0) + hex.charAt(1), 16) / 255\n      color.g = parseInt(hex.charAt(2) + hex.charAt(3), 16) / 255\n      color.b = parseInt(hex.charAt(4) + hex.charAt(5), 16) / 255\n\n      return color\n    }\n  }\n  return new Color(1, 0, 1)\n}\n", "import {\n  Camera,\n  Intersection,\n  Object3D,\n  Plane,\n  Ray,\n  Raycaster,\n  Vector2,\n  Vector3\n} from 'three'\nimport device from '~/device'\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.min(max, Math.max(min, val))\n}\n\nexport function mod(val: number, freq: number) {\n  return ((val % freq) + freq) % freq\n}\n\nexport function wrap(val: number, min: number, max: number) {\n  const range = max - min\n  return ((((val - min) % range) + range) % range) + min\n}\n\nexport function absFloor(val: number) {\n  return Math.floor(Math.abs(val)) * (val < 0 ? -1 : 1)\n}\n\nconst tiny = 0.00001\nexport function closeEnough(val: number, val2: number) {\n  return Math.abs(val - val2) < tiny\n}\n\nexport const TWO_PI = 2 * Math.PI\n\nexport const RADIANS_TO_DEGREES = 180 / Math.PI\n\nexport const DEGREES_TO_RADIANS = Math.PI / 180\n\nexport function radiansToDegrees(radians: number) {\n  return radians * RADIANS_TO_DEGREES\n}\n\nexport function degreesToRadians(degrees: number) {\n  return degrees * DEGREES_TO_RADIANS\n}\n\nconst ray: Ray = new Ray()\nconst flatPlane: Plane = new Plane(new Vector3(0, -1, 0), 1)\nconst anyPlane: Plane = new Plane(new Vector3(0, -1, 0), 1)\nconst intersection: Vector3 = new Vector3()\n\n// const __cameraPosition = new Vector3()\n\nexport function get2DPositionOnPlane(\n  camera: Camera,\n  cameraWorldPos: Vector3,\n  x: number,\n  y: number,\n  plane: Plane\n) {\n  // __cameraPosition.set(0, 0, 0)\n  // camera.localToWorld(__cameraPosition)\n  ray.origin.copy(cameraWorldPos)\n  ray.direction.set(x, y, 0.5).unproject(camera).sub(cameraWorldPos).normalize()\n\n  ray.intersectPlane(plane, intersection)\n  return intersection\n}\nexport function get2DPositionAtDepth(\n  camera: Camera,\n  cameraWorldPos: Vector3,\n  x: number,\n  y: number,\n  atDepth = 0\n) {\n  flatPlane.constant = atDepth\n  return get2DPositionOnPlane(camera, cameraWorldPos, x, y, flatPlane)\n}\nexport function get2DPositionOnPlaneHelper(\n  camera: Camera,\n  cameraWorldPos: Vector3,\n  x: number,\n  y: number,\n  coPlanarPoint: Vector3,\n  normal: Vector3\n) {\n  anyPlane.setFromNormalAndCoplanarPoint(normal, coPlanarPoint)\n  return get2DPositionOnPlane(camera, cameraWorldPos, x, y, anyPlane)\n}\nexport function getPixelOnGroundPlane(\n  camera: Camera,\n  cameraWorldPos: Vector3,\n  x: number,\n  y: number,\n  depth = 0\n) {\n  return get2DPositionAtDepth(\n    camera,\n    cameraWorldPos,\n    (x / device.width) * 2 - 1,\n    -(y / device.height) * 2 + 1,\n    depth\n  )\n}\n\nconst __v2 = new Vector2()\nconst __intersections: Intersection[] = []\nconst __raycaster = new Raycaster()\nlet __hitTesting = false\nexport function hitTestAtPixel(\n  x: number,\n  y: number,\n  items: Object3D[],\n  reaction: (item: Object3D, position: Vector3) => boolean,\n  camera: Camera\n) {\n  if (__hitTesting) {\n    throw new Error('recursive hit testing not allowed')\n  }\n  __hitTesting = true\n  //work in clipspace coordinates (-1 to 1)\n  __v2.set((x / device.width) * 2 - 1, -(y / device.height) * 2 + 1)\n\n  __raycaster.setFromCamera(__v2, camera)\n  __raycaster.intersectObjects(items, false, __intersections)\n\n  for (const intersection of __intersections) {\n    if (reaction(intersection.object, intersection.point)) {\n      break\n    }\n  }\n  __intersections.length = 0\n  __hitTesting = false\n}\n\nexport function lerp(a: number, b: number, dt: number) {\n  const out = a + dt * (b - a)\n  return Math.abs(b - out) > 0.00001 ? out : b\n}\n\nexport function unlerp(min: number, max: number, value: number) {\n  return (value - min) / (max - min)\n}\n\nexport function unlerpClamped(min: number, max: number, value: number) {\n  return clamp(unlerp(min, max, value), 0, 1)\n}\n\nexport function degreesDifference(A: number, B: number) {\n  return ((((A - B) % 360) + 540) % 360) - 180\n}\n\nconst tau = Math.PI * 2\nconst tauAndHalf = Math.PI * 3\nexport function radiansDifference(a: number, b: number) {\n  return ((((a - b) % tau) + tauAndHalf) % tau) - Math.PI\n}\n\nexport function rand(min = 0, max = 1) {\n  return Math.random() * (max - min) + min\n}\n\nexport function rand2(scale = 1, offset = 0) {\n  return (Math.random() * 2 - 1) * scale + offset\n}\n\nexport function nextHighestPowerOfTwo(val: number) {\n  return Math.pow(Math.ceil(Math.sqrt(val)), 2)\n}\n\nexport function inferDirection(val: number, tolerance = 0.00001) {\n  if (val < -tolerance) {\n    return -1\n  } else if (val > tolerance) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nexport function sqr(v: number) {\n  return v * v\n}\n\nexport function pixelLengthOnScreen(a: Vector3, b: Vector3, camera: Camera) {\n  a.project(camera)\n  b.project(camera)\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2))\n}\n\nconst phi = (Math.sqrt(5) + 1) * 0.5 - 1\nconst ga = phi * Math.PI * 2\nexport function pointOnSphereFibonacci(\n  index: number,\n  total: number\n): [number, number] {\n  //[long, lat];\n  return [ga * index, Math.asin(-1 + (2 * index) / total)]\n}\n\nexport function longLatToXYZ(\n  longLat: [number, number],\n  radius: number\n): [number, number, number] {\n  const long = longLat[0]\n  const lat = longLat[1]\n  return [\n    Math.cos(lat) * Math.cos(long) * radius,\n    Math.sin(lat) * radius,\n    Math.cos(lat) * Math.sin(long) * radius\n  ]\n}\n\nexport function powerOfTwo(x: number) {\n  return Math.log2(x) % 1 === 0\n}\n\nexport function assertPowerOfTwo(x: number) {\n  if (!powerOfTwo(x)) {\n    throw new Error(`${x} is not a power of two`)\n  }\n}\n", "type DeviceType = 'mobile' | 'tablet' | 'desktop'\ntype DeviceOrientation = 'landscape' | 'portrait'\n\ntype Listener = () => void\n\nclass Device {\n  width: number\n  height: number\n  aspect: number\n  deviceWidth: number // landscape orientation\n  deviceHeight: number // landscape orientation\n  deviceAspect: number // landscape orientation\n  orientation: DeviceOrientation\n  pixelRatio: number\n  targetFPS = 60\n  useTouch: boolean\n  type: DeviceType\n  listeners: Set<Listener> = new Set()\n  private cachedPPCm = -1\n\n  constructor() {\n    window.addEventListener('resize', () => {\n      this.handleChange()\n\n      // XXX Fix for IOS homescreen: Need to wait a little bit for the screen to settle\n      setTimeout(this.handleChange, 50)\n    })\n    this.handleChange()\n  }\n\n  handleChange = () => {\n    this.useTouch =\n      /Mobi|Android|iPhone|iPad|BlackBerry|Windows Phone|webOS/i.test(\n        navigator.userAgent\n      )\n\n    if (\n      this.width === window.innerWidth &&\n      this.height === window.innerHeight\n    ) {\n      return\n    }\n\n    this.width = window.innerWidth\n    this.height = window.innerHeight\n    this.aspect = this.width / this.height\n    this.deviceHeight = Math.min(this.width, this.height)\n    this.deviceWidth = Math.max(this.width, this.height)\n    this.deviceAspect = this.deviceWidth / this.deviceHeight\n    this.pixelRatio = window.devicePixelRatio\n    this.orientation = this.aspect < 1 ? 'portrait' : 'landscape'\n    this.type = this.useTouch\n      ? this.deviceWidth < 1024 && this.deviceAspect > 1.6\n        ? 'mobile'\n        : 'tablet'\n      : 'desktop'\n\n    this.listeners.forEach((listener) => listener())\n  }\n\n  onChange(listener: Listener, firstOneForFree = false) {\n    this.listeners.add(listener)\n    if (firstOneForFree) {\n      listener()\n    }\n\n    return () => this.listeners.delete(listener)\n  }\n\n  get isMobile() {\n    return this.type === 'mobile'\n  }\n\n  get isTablet() {\n    return this.type === 'tablet'\n  }\n\n  get isDesktop() {\n    return this.type === 'desktop'\n  }\n\n  get pixelsPerCm() {\n    if (this.cachedPPCm === -1) {\n      // create an empty element\n      const div = document.createElement('div')\n      // give it an absolute size of one inch\n      div.style.height = '1in'\n      // append it to the body\n      const body = document.getElementsByTagName('body')[0]\n      body.appendChild(div)\n      // read the computed width\n      const ppi = getComputedStyle(div, null).getPropertyValue('height')\n      // remove it again\n      body.removeChild(div)\n      // and return the value\n      this.cachedPPCm = parseFloat(ppi) * 2.54\n    }\n    return this.cachedPPCm\n  }\n\n  get screenHeightCms() {\n    return this.height / this.pixelsPerCm\n  }\n\n  get screenWidthCms() {\n    return this.width / this.pixelsPerCm\n  }\n\n  get screenShorterCms() {\n    return Math.min(this.width, this.height) / this.pixelsPerCm\n  }\n\n  setFPS(fps = 60) {\n    this.targetFPS = fps\n  }\n}\n\nconst device = new Device()\n;(window as any).device = device\n\nexport default device\n", "import { getUrlFlag, getUrlFloat, getUrlInt } from './utils/location'\n\nexport const RESET_USER_SETTINGS_TO_DEFAULTS = getUrlFlag('resetSettings')\n\nexport const initOffset = {\n  x: getUrlInt('x', 0),\n  y: getUrlInt('y', 0)\n}\n\nexport const sunSpeed = getUrlFloat('sunSpeed', -0.001)\nexport const sunOffset = getUrlFloat('sunOffset', 0.5)\n\n//export const verticalScale = 1\nexport const verticalScale = Math.SQRT2 / 2\n", "function i2hex(i) {\n  return ('0' + i.toString(16)).slice(-2)\n}\n\nconst __masks8: number[] = []\nfor (let i = 0; i < 8; i++) {\n  __masks8[i] = 1 << i\n}\n\nexport default class NamedBitsInBytes<T extends readonly string[]> {\n  constructor(public bytes: Uint8Array, private _names: T) {}\n  enableBit(name: T[number]) {\n    const i = this._names.indexOf(name)\n    const ib = ~~(i / 8)\n    const i8 = i % 8\n    this.bytes[ib] |= __masks8[i8]\n  }\n  disableBit(name: T[number]) {\n    const i = this._names.indexOf(name)\n    const ib = ~~(i / 8)\n    const i8 = i % 8\n    this.bytes[ib] &= ~__masks8[i8]\n  }\n  flipBit(name: T[number]) {\n    const i = this._names.indexOf(name)\n    const ib = ~~(i / 8)\n    const i8 = i % 8\n    this.bytes[ib] ^= __masks8[i8]\n  }\n  has(name: T[number]) {\n    const i = this._names.indexOf(name)\n    const ib = ~~(i / 8)\n    const i8 = i % 8\n    return (this.bytes[ib] & __masks8[i8]) !== 0\n  }\n  toString() {\n    return this.bytes.reduce((memo, i) => memo + i2hex(i), '')\n  }\n}\n", "const __masks32: number[] = []\nfor (let i = 0; i < 32; i++) {\n  __masks32[i] = 1 << i\n}\n\nexport default class NamedBitsInNumber<T extends readonly string[]> {\n  constructor(public value: number, private _names: T) {}\n  enableBit(name: T[number]) {\n    this.value |= __masks32[this._names.indexOf(name)]\n  }\n  disableBit(name: T[number]) {\n    this.value &= ~__masks32[this._names.indexOf(name)]\n  }\n  flipBit(name: T[number]) {\n    this.value ^= __masks32[this._names.indexOf(name)]\n  }\n  has(name: T[number]) {\n    return (this.value & __masks32[this._names.indexOf(name)]) !== 0\n  }\n  hasFast(mask: number) {\n    return (this.value & mask) !== 0\n  }\n  makeFastMask(name: T[number]) {\n    return __masks32[this._names.indexOf(name)]\n  }\n  toString() {\n    return this.value.toString(16)\n  }\n}\n", "import { makeNoise2D } from 'fast-simplex-noise'\nimport { sfc32 } from '~/utils/random'\n\nexport default class NoiseHelper2D {\n  private _noise: (x: number, y: number) => number\n  constructor(\n    private _scale: number,\n    private _offsetX = 0,\n    private _offsetY = 0,\n    seed = 0,\n    private _strength = 1\n  ) {\n    const randGenerator = sfc32(100 + seed, 200 + seed, 300 + seed, 444 + seed)\n    this._noise = makeNoise2D(randGenerator)\n  }\n  getValue(x: number, y: number) {\n    return (\n      this._noise(\n        x * this._scale + this._offsetX,\n        y * this._scale + this._offsetY\n      ) * this._strength\n    )\n  }\n}\n", "export function sfc32(a: number, b: number, c: number, d: number) {\n  return function deterministicRandom() {\n    a >>>= 0\n    b >>>= 0\n    c >>>= 0\n    d >>>= 0\n    let t = (a + b) | 0\n    a = b ^ (b >>> 9)\n    b = (c + (c << 3)) | 0\n    c = (c << 21) | (c >>> 11)\n    d = (d + 1) | 0\n    t = (t + d) | 0\n    c = (c + t) | 0\n    return (t >>> 0) / 4294967296\n  }\n}\n\nconst genPhysics = sfc32(100, 200, 300, 444)\nexport function detRandPhysics(min = 0, max = 1) {\n  return genPhysics() * (max - min) + min\n}\n\nconst genGraphics = sfc32(100, 200, 300, 444)\nexport function detRandGraphics(min = 0, max = 1) {\n  return genGraphics() * (max - min) + min\n}\n\nconst genGrass = sfc32(100, 200, 300, 444)\nexport function detRandGrass(min = 0, max = 1) {\n  return genGrass() * (max - min) + min\n}\n\nconst genLights = sfc32(100, 200, 300, 444)\nexport function detRandLights(min = 0, max = 1) {\n  return genLights() * (max - min) + min\n}\n\nconst genRocks = sfc32(100, 200, 300, 444)\nexport function detRandRocks(min = 0, max = 1) {\n  return genRocks() * (max - min) + min\n}\n\nconst genTrees = sfc32(100, 200, 300, 444)\nexport function detRandTrees(min = 0, max = 1) {\n  return genTrees() * (max - min) + min\n}\n\nconst genTreesMaple = sfc32(100, 200, 300, 444)\nexport function detRandTreesMaple(min = 0, max = 1) {\n  return genTreesMaple() * (max - min) + min\n}\n\nconst genWoodPlanks = sfc32(100, 152, 353, 504)\nexport function detRandWoodPlanks(min = 0, max = 1) {\n  return genWoodPlanks() * (max - min) + min\n}\n", "import NoiseHelper2D from './NoiseHelper2D'\n\nexport default class ThreshNoiseHelper2D {\n  static simple(\n    scale: number,\n    offsetX: number,\n    offsetY: number,\n    thresh: number,\n    seed?: number,\n    strength?: number\n  ) {\n    return new ThreshNoiseHelper2D(\n      new NoiseHelper2D(scale, offsetX, offsetY, seed, strength),\n      thresh\n    )\n  }\n  private _noiseLayers: NoiseHelper2D[]\n  constructor(\n    noiseLayers: NoiseHelper2D[] | NoiseHelper2D,\n    private _defaultThresh = 0\n  ) {\n    this._noiseLayers =\n      noiseLayers instanceof NoiseHelper2D ? [noiseLayers] : noiseLayers\n  }\n  getValue(x: number, y: number) {\n    let val = 0\n    for (const noise of this._noiseLayers) {\n      val += noise.getValue(x, y)\n    }\n    return val\n  }\n  getTreshold(x: number, y: number, thresh: number = this._defaultThresh) {\n    return this.getValue(x, y) > thresh ? 1 : 0\n  }\n}\n", "import { BufferGeometry } from 'three'\nimport { initOffset } from '../../../constants'\nimport NamedBitsInBytes from '../../../helpers/utils/NamedBitsInBytes'\nimport NamedBitsInNumber from '../../../helpers/utils/NamedBitsInNumber'\nimport NoiseHelper2D from '../../../helpers/utils/NoiseHelper2D'\nimport ThreshNoiseHelper2D from '../../../helpers/utils/ThreshNoiseHelper2D'\nimport { getUrlFlag } from '../../../utils/location'\nimport { wrap } from '../../../utils/math'\n\nimport MapTileMaker from './MapTileMaker'\n\nconst metaTileStrings = [\n  'floor',\n  'beam',\n  'bricks',\n  'drywall',\n  'grass',\n  'bush',\n  'goldPile',\n  'lampPost',\n  'testObject',\n  'pyramid',\n  'rockyGround',\n  'rocks',\n  'goldOreForRocks',\n  'harvested',\n  'treePine',\n  'maturePlant',\n  'treeMaple'\n] as const\n\ntype MetaTile = typeof metaTileStrings[number]\n\ntype BottomAndTopIds = {\n  idTop: number\n  idBottom: number\n}\n\ntype NamedMetaBits = NamedBitsInNumber<typeof metaTileStrings>\n\nexport default class JITTileSampler {\n  onTileMade = (index: number) => {\n    this.indicesOfNewlyMadeTiles.add(index)\n    this.dirty = true\n  }\n  dirty: boolean\n  indicesOfMadeTiles: Set<number> = new Set()\n  indicesOfNewlyMadeTiles: Set<number> = new Set()\n  get offsetX(): number {\n    return this._offsetX\n  }\n  set offsetX(value: number) {\n    this._offsetsDirty = true\n    this.dirty = true\n    this._offsetX = value\n  }\n  get offsetY(): number {\n    return this._offsetY\n  }\n  set offsetY(value: number) {\n    this._offsetsDirty = true\n    this.dirty = true\n    this._offsetY = value\n  }\n  get tileMaker(): MapTileMaker {\n    return this._tileMaker\n  }\n  set tileMaker(value: MapTileMaker) {\n    throw new Error('Cannot change tileMaker during runtime')\n  }\n  metaNoiseGenerators: ThreshNoiseHelper2D[]\n  bytesPerTile: number\n  // localMetaProps: number\n  // visProps: Uint8Array\n  metaCache: Map<string, NamedMetaBits> = new Map() //maybe change this caching mechanism for something more memory friendly. e.i. Map<number, <Map<number, number>> ?\n  dirtyMeta: Set<string> = new Set()\n  dirtyVis: Set<string> = new Set()\n  private _offsetX = initOffset.x\n  private _offsetY = initOffset.y\n  private _offsetsDirty: boolean\n  get offsetsDirty(): boolean {\n    return this._offsetsDirty\n  }\n  set offsetsDirty(value: boolean) {\n    this._offsetsDirty = value\n  }\n  private _offsetXOld = initOffset.x\n  private _offsetYOld = initOffset.y\n  constructor(\n    private _tileMaker: MapTileMaker,\n    private _viewWidthInTiles: number,\n    private _viewHeightInTiles: number\n  ) {\n    this.bytesPerTile = Math.ceil(\n      _tileMaker.visualPropertyLookupStrings.length / 8\n    )\n\n    const seed = 1\n    const floorNoise = ThreshNoiseHelper2D.simple(0.1, 0, 0, 0.5, seed)\n    const beamNoise = ThreshNoiseHelper2D.simple(0.08, -100, -100, 0.4, seed)\n    const bricksNoise = ThreshNoiseHelper2D.simple(0.06, -50, -50, 0.5, seed)\n    const drywallNoise = ThreshNoiseHelper2D.simple(0.05, 20, 20, 0.5, seed)\n    const grassNoise = ThreshNoiseHelper2D.simple(0.15, 100, 200, -0.2, seed)\n    const bushNoise = ThreshNoiseHelper2D.simple(0.3, 300, 200, 0.25, seed)\n    const goldNoise = ThreshNoiseHelper2D.simple(3, -300, 200, 0.75, seed)\n    const lampPostNoise = ThreshNoiseHelper2D.simple(3, -1300, 200, 0.75, seed)\n    const testObjectNoise = ThreshNoiseHelper2D.simple(\n      3,\n      -100,\n      -300,\n      0.75,\n      seed\n    )\n    const pyramidNoise = ThreshNoiseHelper2D.simple(3, -204, -121, 0.85, seed)\n    const rockyGroundNoise = ThreshNoiseHelper2D.simple(\n      3,\n      204,\n      -121,\n      0.25,\n      seed\n    )\n    const rocksNoise = ThreshNoiseHelper2D.simple(0.05, 604, -121, 0.7, seed)\n    const goldOreForRocksNoise = new ThreshNoiseHelper2D(\n      [\n        new NoiseHelper2D(0.05, 604, -121, seed),\n        new NoiseHelper2D(0.8, 604, -121, seed, 0.2)\n      ],\n      0.97\n    )\n    const harvestedNoise = ThreshNoiseHelper2D.simple(\n      0.08,\n      -500,\n      -100,\n      0.35,\n      seed\n    )\n    const treePineNoise = ThreshNoiseHelper2D.simple(0.3, -200, -400, 0.5, seed)\n    const plantMatureNoise = ThreshNoiseHelper2D.simple(\n      3,\n      -340,\n      -460,\n      0.25,\n      seed\n    )\n    const treeMapleNoise = ThreshNoiseHelper2D.simple(0.3, 200, 400, 0.6, seed)\n    this.metaNoiseGenerators = [\n      floorNoise,\n      beamNoise,\n      bricksNoise,\n      drywallNoise,\n      grassNoise,\n      bushNoise,\n      goldNoise,\n      lampPostNoise,\n      testObjectNoise,\n      pyramidNoise,\n      rockyGroundNoise,\n      rocksNoise,\n      goldOreForRocksNoise,\n      harvestedNoise,\n      treePineNoise,\n      plantMatureNoise,\n      treeMapleNoise\n    ]\n  }\n  // flipMeta(x: number, y: number, meta: MetaTile, validate = true) {\n  //   this.writeMeta(x, y, this.metaBitsFlip(this.sampleMeta(x, y), meta))\n  //   if (validate) {\n  //     this.validateLocalMeta(x, y)\n  //   }\n  // }\n  // metaBitsHas(val: number, maskName: MetaTile) {\n  //   return val & masks32[metaTileStrings.indexOf(maskName)]\n  // }\n\n  // metaBitsFlip(val: number, maskName: MetaTile) {\n  //   return val ^ masks32[metaTileStrings.indexOf(maskName)]\n  // }\n\n  // localMetaBitsFlip(maskName: MetaTile) {\n  //   this.localMetaProps = this.metaBitsFlip(this.localMetaProps, maskName)\n  // }\n  // localMetaBitsHas(maskName: MetaTile) {\n  //   return this.metaBitsHas(this.localMetaProps, maskName)\n  // }\n  writeMeta(x: number, y: number, meta: NamedMetaBits) {\n    const key = x + ':' + y\n    if (this.metaCache.has(key) && this.metaCache.get(key)) {\n      this.metaCache.set(key, meta)\n    }\n    this.dirtyMeta.add(key)\n  }\n  sampleMeta(x: number, y: number) {\n    const key = x + ':' + y\n    if (this.metaCache.has(key)) {\n      return this.metaCache.get(key)!\n    }\n    const metaProps = new NamedBitsInNumber(\n      this.metaNoiseGenerators.reduce((accum, noise, j) => {\n        return accum + (noise.getTreshold(x, y) << j)\n      }, 0),\n      metaTileStrings\n    )\n    this.validateLocalMeta(metaProps, x, y)\n    return metaProps\n  }\n  validateLocalMeta(val: NamedMetaBits, x: number, y: number) {\n    const key = x + ':' + y\n\n    // this.localMetaProps = this.metaNoiseGenerators[2].getTreshold(x, y, 0.5) << 4\n\n    if (!val.has('floor') && val.has('beam')) {\n      val.flipBit('beam')\n    }\n    if (val.has('beam') && val.has('grass')) {\n      val.flipBit('grass')\n    }\n    if (!val.has('beam') && val.has('bricks')) {\n      val.flipBit('bricks')\n    }\n    if (val.has('floor') && val.has('grass')) {\n      val.flipBit('grass')\n    }\n    if (val.has('floor') && val.has('bush')) {\n      val.flipBit('bush')\n    }\n    if (!val.has('grass') && val.has('bush')) {\n      val.flipBit('bush')\n    }\n    if (val.has('testObject') && (val.has('bush') || val.has('pyramid'))) {\n      val.flipBit('testObject')\n    }\n    if (\n      val.has('lampPost') &&\n      (val.has('beam') ||\n        val.has('bush') ||\n        val.has('bricks') ||\n        val.has('goldPile') ||\n        val.has('testObject'))\n    ) {\n      val.flipBit('lampPost')\n    }\n\n    if (\n      val.has('pyramid') &&\n      (val.has('bush') ||\n        val.has('beam') ||\n        val.has('lampPost') ||\n        val.has('lampPost') ||\n        val.has('grass') ||\n        !val.has('floor') ||\n        val.has('goldPile'))\n    ) {\n      val.flipBit('pyramid')\n    }\n\n    if (\n      val.has('rockyGround') &&\n      (val.has('beam') ||\n        val.has('bush') ||\n        val.has('floor') ||\n        val.has('grass') ||\n        val.has('bricks') ||\n        val.has('goldPile') ||\n        val.has('testObject'))\n    ) {\n      val.flipBit('rockyGround')\n    }\n\n    if (val.has('rocks')) {\n      const wasHarvested = val.has('harvested')\n      const hasGold = val.has('goldOreForRocks')\n      val.value = 0\n      val.flipBit('rocks')\n      if (hasGold) {\n        val.flipBit('goldOreForRocks')\n      }\n      if (wasHarvested) {\n        val.flipBit('harvested')\n      }\n    }\n\n    const hasAnyTree = val.has('treePine') || val.has('treeMaple')\n\n    if (hasAnyTree && val.has('bush')) {\n      val.flipBit('bush')\n    }\n    if (hasAnyTree && val.has('goldPile')) {\n      val.flipBit('goldPile')\n    }\n    if (hasAnyTree && val.has('testObject')) {\n      val.flipBit('testObject')\n    }\n    if (val.has('lampPost') || !val.has('grass')) {\n      if (val.has('treePine')) {\n        val.flipBit('treePine')\n      }\n      if (val.has('treeMaple')) {\n        val.flipBit('treeMaple')\n      }\n    }\n\n    if (val.has('treePine') && val.has('treeMaple')) {\n      val.flipBit('treeMaple')\n    }\n\n    //TEST SIMPLER MAP\n    if (getUrlFlag('simple')) {\n      // const item = val.has('testObject')\n      // const keepGrass = val.has('grass')\n      // this.localMetaProps = 0\n      // if (keepGrass) {\n      //   val.flipBit('grass')\n      // }\n      // if (keepGrass && item) {\n      //   val.flipBit('testObject')\n      // }\n\n      // const item = val.has('floor')\n      // const item2 = val.has('beam')\n      // const item3 = val.has('bricks')\n      // val.value = 0\n      // if (item) {\n      //   val.flipBit('floor')\n      // }\n      // if (item2) {\n      //   val.flipBit('beam')\n      // }\n      // if (item3) {\n      //   val.flipBit('bricks')\n      // }\n\n      const item = val.has('treeMaple')\n      const item2 = val.has('treePine')\n      const item3 = val.has('bush')\n      // val.value = 0\n      if (item) {\n        val.flipBit('treeMaple')\n      }\n      if (item2) {\n        val.flipBit('treePine')\n      }\n      if (item3) {\n        val.flipBit('bush')\n      }\n    }\n\n    this.metaCache.set(key, val)\n    return val\n  }\n\n  private _visPropsCache: Map<\n    string,\n    NamedBitsInBytes<typeof this.tileMaker.visualPropertyLookupStrings>\n  > = new Map()\n\n  private _bottomAndTopIdsCache: Map<string, BottomAndTopIds> = new Map()\n\n  sampleVisProps(x: number, y: number) {\n    const key = `${x}:${y}`\n    if (this._visPropsCache.has(key)) {\n      return this._visPropsCache.get(key)!\n    } else {\n      const metaPropsN = this.sampleMeta(x, y - 1)\n      const metaPropsNE = this.sampleMeta(x + 1, y - 1)\n      const metaPropsE = this.sampleMeta(x + 1, y)\n      const metaPropsSE = this.sampleMeta(x + 1, y + 1)\n      const metaPropsS = this.sampleMeta(x, y + 1)\n      const metaPropsSW = this.sampleMeta(x - 1, y + 1)\n      const metaPropsW = this.sampleMeta(x - 1, y)\n      const metaPropsNW = this.sampleMeta(x - 1, y - 1)\n\n      const metaProps = this.sampleMeta(x, y)\n\n      const visProps = new NamedBitsInBytes(\n        new Uint8Array(this.bytesPerTile),\n        this.tileMaker.visualPropertyLookupStrings\n      )\n\n      this._visPropsCache.set(key, visProps)\n\n      visProps.enableBit(metaProps.has('floor') ? 'floor' : 'ground')\n\n      const propMaskGrass = metaProps.makeFastMask('grass')\n      if (metaProps.hasFast(propMaskGrass)) {\n        visProps.enableBit('grassC')\n        if (metaPropsN.has('grass')) {\n          visProps.enableBit('grassN')\n        }\n        if (metaPropsE.hasFast(propMaskGrass)) {\n          visProps.enableBit('grassE')\n        }\n        if (metaPropsS.hasFast(propMaskGrass)) {\n          visProps.enableBit('grassS')\n        }\n        if (metaPropsW.hasFast(propMaskGrass)) {\n          visProps.enableBit('grassW')\n        }\n        if (\n          metaPropsNE.hasFast(propMaskGrass) &&\n          metaPropsN.hasFast(propMaskGrass) &&\n          metaPropsE.hasFast(propMaskGrass)\n        ) {\n          visProps.enableBit('grassNE')\n        }\n        if (\n          metaPropsNW.hasFast(propMaskGrass) &&\n          metaPropsN.hasFast(propMaskGrass) &&\n          metaPropsW.hasFast(propMaskGrass)\n        ) {\n          visProps.enableBit('grassNW')\n        }\n        if (\n          metaPropsSE.hasFast(propMaskGrass) &&\n          metaPropsS.hasFast(propMaskGrass) &&\n          metaPropsE.hasFast(propMaskGrass)\n        ) {\n          visProps.enableBit('grassSE')\n        }\n        if (\n          metaPropsSW.hasFast(propMaskGrass) &&\n          metaPropsS.hasFast(propMaskGrass) &&\n          metaPropsW.hasFast(propMaskGrass)\n        ) {\n          visProps.enableBit('grassSW')\n        }\n      }\n      const propMaskBush = metaProps.makeFastMask('bush')\n      if (metaProps.hasFast(propMaskBush)) {\n        visProps.enableBit('bushC')\n        if (metaPropsN.hasFast(propMaskBush)) {\n          visProps.enableBit('bushN')\n        }\n        if (metaPropsE.hasFast(propMaskBush)) {\n          visProps.enableBit('bushE')\n        }\n        if (metaPropsS.hasFast(propMaskBush)) {\n          visProps.enableBit('bushS')\n        }\n        if (metaPropsW.hasFast(propMaskBush)) {\n          visProps.enableBit('bushW')\n        }\n        if (\n          metaPropsNE.hasFast(propMaskBush) &&\n          metaPropsN.hasFast(propMaskBush) &&\n          metaPropsE.hasFast(propMaskBush)\n        ) {\n          visProps.enableBit('bushNE')\n        }\n        if (\n          metaPropsNW.hasFast(propMaskBush) &&\n          metaPropsN.hasFast(propMaskBush) &&\n          metaPropsW.hasFast(propMaskBush)\n        ) {\n          visProps.enableBit('bushNW')\n        }\n        if (\n          metaPropsSE.hasFast(propMaskBush) &&\n          metaPropsS.hasFast(propMaskBush) &&\n          metaPropsE.hasFast(propMaskBush)\n        ) {\n          visProps.enableBit('bushSE')\n        }\n        if (\n          metaPropsSW.hasFast(propMaskBush) &&\n          metaPropsS.hasFast(propMaskBush) &&\n          metaPropsW.hasFast(propMaskBush)\n        ) {\n          visProps.enableBit('bushSW')\n        }\n      }\n      const propMaskBeam = metaProps.makeFastMask('beam')\n      const beamC = metaProps.hasFast(propMaskBeam)\n      const beamN = metaPropsN.hasFast(propMaskBeam)\n      const beamE = metaPropsE.hasFast(propMaskBeam)\n      const beamS = metaPropsS.hasFast(propMaskBeam)\n      const beamW = metaPropsW.hasFast(propMaskBeam)\n      if (beamC) {\n        if (beamE && beamW && !beamS && !beamN) {\n          visProps.enableBit('beamEW')\n        } else if (!beamE && !beamW && beamS && beamN) {\n          visProps.enableBit('beamNS')\n        } else {\n          visProps.enableBit('beamCenter')\n          if (beamE) {\n            visProps.enableBit('beamE')\n          }\n          if (beamW) {\n            visProps.enableBit('beamW')\n          }\n          if (beamN) {\n            visProps.enableBit('beamN')\n          }\n          if (beamS) {\n            visProps.enableBit('beamS')\n          }\n        }\n      }\n      const propMaskBricks = metaProps.makeFastMask('bricks')\n      if (metaProps.hasFast(propMaskBricks)) {\n        const bricksS = metaPropsN.hasFast(propMaskBricks)\n        const bricksE = metaPropsE.hasFast(propMaskBricks)\n        const bricksN = metaPropsS.hasFast(propMaskBricks)\n        const bricksW = metaPropsW.hasFast(propMaskBricks)\n        if (bricksN) {\n          visProps.enableBit('bricks0')\n          visProps.enableBit('bricks1')\n        } else if (!(beamC && beamS)) {\n          visProps.enableBit('bricks8')\n        }\n        if (bricksE) {\n          visProps.enableBit('bricks2')\n          visProps.enableBit('bricks3')\n        } else if (!(beamC && beamE)) {\n          visProps.enableBit('bricks9')\n        }\n        if (bricksW) {\n          visProps.enableBit('bricks7')\n          visProps.enableBit('bricks6')\n        } else if (!(beamC && beamW)) {\n          visProps.enableBit('bricks11')\n        }\n        if (bricksS) {\n          visProps.enableBit('bricks4')\n          visProps.enableBit('bricks5')\n        } else if (!(beamC && beamN)) {\n          visProps.enableBit('bricks10')\n        }\n      }\n      const propMaskGold = metaProps.makeFastMask('goldPile')\n      if (metaProps.hasFast(propMaskGold)) {\n        visProps.enableBit('goldPile')\n      }\n      const propMaskLampPost = metaProps.makeFastMask('lampPost')\n      if (metaProps.hasFast(propMaskLampPost)) {\n        visProps.enableBit('lampPost')\n      }\n      const propMaskTestObject = metaProps.makeFastMask('testObject')\n      if (metaProps.hasFast(propMaskTestObject)) {\n        visProps.enableBit('testObject')\n      }\n      const propMaskPyramid = metaProps.makeFastMask('pyramid')\n      if (metaProps.hasFast(propMaskPyramid)) {\n        visProps.enableBit('pyramid')\n      }\n      const propMaskRockyGround = metaProps.makeFastMask('rockyGround')\n      if (metaProps.hasFast(propMaskRockyGround)) {\n        visProps.enableBit('rockyGround')\n      }\n\n      const propMaskRocks = metaProps.makeFastMask('rocks')\n      const propMaskHarvested = metaProps.makeFastMask('harvested')\n\n      const isRocksC = metaProps.hasFast(propMaskRocks)\n      const isHarvestedC = metaProps.hasFast(propMaskHarvested)\n      const isGoldOre = metaProps.has('goldOreForRocks')\n      if (isRocksC) {\n        const isRocksN = metaPropsN.hasFast(propMaskRocks)\n        const isHarvestedN = metaPropsN.hasFast(propMaskHarvested)\n        const isRocksE = metaPropsE.hasFast(propMaskRocks)\n        const isHarvestedE = metaPropsE.hasFast(propMaskHarvested)\n        const isRocksS = metaPropsS.hasFast(propMaskRocks)\n        const isHarvestedS = metaPropsS.hasFast(propMaskHarvested)\n        const isRocksW = metaPropsW.hasFast(propMaskRocks)\n        const isHarvestedW = metaPropsW.hasFast(propMaskHarvested)\n        const isRocksNE = metaPropsNE.hasFast(propMaskRocks)\n        const isHarvestedNE = metaPropsNE.hasFast(propMaskHarvested)\n        const isRocksSE = metaPropsSE.hasFast(propMaskRocks)\n        const isHarvestedSE = metaPropsSE.hasFast(propMaskHarvested)\n        const isRocksSW = metaPropsSW.hasFast(propMaskRocks)\n        const isHarvestedSW = metaPropsSW.hasFast(propMaskHarvested)\n        const isRocksNW = metaPropsNW.hasFast(propMaskRocks)\n        const isHarvestedNW = metaPropsNW.hasFast(propMaskHarvested)\n\n        visProps.enableBit(isHarvestedC ? 'rockCrumbsC' : 'rocksC')\n        if (isRocksN) {\n          visProps.enableBit(\n            isHarvestedN || isHarvestedC ? 'rockCrumbsN' : 'rocksN'\n          )\n        }\n        if (isRocksS) {\n          visProps.enableBit(\n            isHarvestedS || isHarvestedC ? 'rockCrumbsS' : 'rocksS'\n          )\n        }\n        if (isRocksE) {\n          visProps.enableBit(\n            isHarvestedE || isHarvestedC ? 'rockCrumbsE' : 'rocksE'\n          )\n        }\n        if (isRocksW) {\n          visProps.enableBit(\n            isHarvestedW || isHarvestedC ? 'rockCrumbsW' : 'rocksW'\n          )\n        }\n\n        if (isRocksW && isRocksN && isRocksNW) {\n          visProps.enableBit(\n            isHarvestedW || isHarvestedN || isHarvestedNW || isHarvestedC\n              ? 'rockCrumbsNW'\n              : 'rocksNW'\n          )\n        }\n        if (isRocksE && isRocksN && isRocksNE) {\n          visProps.enableBit(\n            isHarvestedE || isHarvestedN || isHarvestedNE || isHarvestedC\n              ? 'rockCrumbsNE'\n              : 'rocksNE'\n          )\n        }\n        if (isRocksW && isRocksS && isRocksSW) {\n          visProps.enableBit(\n            isHarvestedW || isHarvestedS || isHarvestedSW || isHarvestedC\n              ? 'rockCrumbsSW'\n              : 'rocksSW'\n          )\n        }\n        if (isRocksE && isRocksS && isRocksSE) {\n          visProps.enableBit(\n            isHarvestedE || isHarvestedS || isHarvestedSE || isHarvestedC\n              ? 'rockCrumbsSE'\n              : 'rocksSE'\n          )\n        }\n\n        if (!isHarvestedC) {\n          if (\n            isRocksN &&\n            isRocksE &&\n            isRocksS &&\n            isRocksW &&\n            !isHarvestedN &&\n            !isHarvestedE &&\n            !isHarvestedS &&\n            !isHarvestedW\n          ) {\n            visProps.enableBit('rocksCBig')\n            if (isGoldOre) {\n              visProps.enableBit('goldOreForBigRocks')\n            }\n          } else {\n            if (isGoldOre) {\n              visProps.enableBit('goldOreForRocks')\n            }\n          }\n        }\n      }\n\n      const propMaskMaturePlant = metaProps.makeFastMask('maturePlant')\n\n      const propMaskTreePine = metaProps.makeFastMask('treePine')\n      if (\n        metaProps.hasFast(propMaskTreePine) &&\n        !metaProps.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${metaProps.hasFast(propMaskMaturePlant) ? 'Mature' : ''}C`\n        )\n      }\n      if (\n        metaPropsE.hasFast(propMaskTreePine) &&\n        !metaPropsE.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${metaPropsE.hasFast(propMaskMaturePlant) ? 'Mature' : ''}E`\n        )\n      }\n      if (\n        metaPropsW.hasFast(propMaskTreePine) &&\n        !metaPropsW.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${metaPropsW.hasFast(propMaskMaturePlant) ? 'Mature' : ''}W`\n        )\n      }\n      if (\n        metaPropsN.hasFast(propMaskTreePine) &&\n        !metaPropsN.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${metaPropsN.hasFast(propMaskMaturePlant) ? 'Mature' : ''}N`\n        )\n      }\n      if (\n        metaPropsS.hasFast(propMaskTreePine) &&\n        !metaPropsS.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${metaPropsS.hasFast(propMaskMaturePlant) ? 'Mature' : ''}S`\n        )\n      }\n      if (\n        metaPropsNE.hasFast(propMaskTreePine) &&\n        !metaPropsNE.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${\n            metaPropsNE.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }NE`\n        )\n      }\n      if (\n        metaPropsSW.hasFast(propMaskTreePine) &&\n        !metaPropsSW.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${\n            metaPropsSW.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }SW`\n        )\n      }\n      if (\n        metaPropsNW.hasFast(propMaskTreePine) &&\n        !metaPropsNW.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${\n            metaPropsNW.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }NW`\n        )\n      }\n      if (\n        metaPropsSE.hasFast(propMaskTreePine) &&\n        !metaPropsSE.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePine${\n            metaPropsSE.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }SE`\n        )\n      }\n\n      if (\n        metaProps.hasFast(propMaskTreePine) &&\n        metaProps.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treePineStump${\n            metaProps.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }`\n        )\n      }\n\n      const propMaskTreeMaple = metaProps.makeFastMask('treeMaple')\n      if (\n        metaProps.hasFast(propMaskTreeMaple) &&\n        !metaProps.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${metaProps.hasFast(propMaskMaturePlant) ? 'Mature' : ''}C`\n        )\n      }\n      if (\n        metaPropsE.hasFast(propMaskTreeMaple) &&\n        !metaPropsE.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${metaPropsE.hasFast(propMaskMaturePlant) ? 'Mature' : ''}E`\n        )\n      }\n      if (\n        metaPropsW.hasFast(propMaskTreeMaple) &&\n        !metaPropsW.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${metaPropsW.hasFast(propMaskMaturePlant) ? 'Mature' : ''}W`\n        )\n      }\n      if (\n        metaPropsN.hasFast(propMaskTreeMaple) &&\n        !metaPropsN.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${metaPropsN.hasFast(propMaskMaturePlant) ? 'Mature' : ''}N`\n        )\n      }\n      if (\n        metaPropsS.hasFast(propMaskTreeMaple) &&\n        !metaPropsS.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${metaPropsS.hasFast(propMaskMaturePlant) ? 'Mature' : ''}S`\n        )\n      }\n      if (\n        metaPropsNE.hasFast(propMaskTreeMaple) &&\n        !metaPropsNE.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${\n            metaPropsNE.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }NE`\n        )\n      }\n      if (\n        metaPropsSW.hasFast(propMaskTreeMaple) &&\n        !metaPropsSW.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${\n            metaPropsSW.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }SW`\n        )\n      }\n      if (\n        metaPropsNW.hasFast(propMaskTreeMaple) &&\n        !metaPropsNW.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${\n            metaPropsNW.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }NW`\n        )\n      }\n      if (\n        metaPropsSE.hasFast(propMaskTreeMaple) &&\n        !metaPropsSE.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMaple${\n            metaPropsSE.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }SE`\n        )\n      }\n\n      if (\n        metaProps.hasFast(propMaskTreeMaple) &&\n        metaProps.hasFast(propMaskHarvested)\n      ) {\n        visProps.enableBit(\n          `treeMapleStump${\n            metaProps.hasFast(propMaskMaturePlant) ? 'Mature' : ''\n          }`\n        )\n      }\n      return visProps\n    }\n  }\n  sampleVisIds(x: number, y: number) {\n    const key = `${x}:${y}`\n    if (!this._bottomAndTopIdsCache.has(key)) {\n      const visProps = this.sampleVisProps(x, y)\n      const bottomAndTopIds: BottomAndTopIds =\n        this.sampleVisIdsByVisProps(visProps)\n      this._bottomAndTopIdsCache.set(key, bottomAndTopIds)\n      return bottomAndTopIds\n    } else {\n      return this._bottomAndTopIdsCache.get(key)!\n    }\n  }\n  sampleVisIdsByVisProps(\n    visProps: NamedBitsInBytes<\n      typeof this.tileMaker.visualPropertyLookupStrings\n    >\n  ) {\n    const idBottom = this._tileMaker.getTileId(visProps.bytes)\n    const visProps2 = visProps.bytes.slice()\n    visProps2[0] |= 1\n    const idTop = this._tileMaker.getTileId(visProps2)\n\n    const bottomAndTopIds: BottomAndTopIds = {\n      idBottom,\n      idTop\n    }\n    return bottomAndTopIds\n  }\n  updateMeta() {\n    // if (this._offsetsDirty) {\n    // this._offsetsDirty = false\n    // if (this._offsetX !== this._offsetXOld) {\n    //   let xMin =\n    //     this._offsetX < this._offsetXOld ? this._offsetX : this._offsetXOld\n    //   let xMax =\n    //     this._offsetX > this._offsetXOld ? this._offsetX : this._offsetXOld\n    //   if (this._offsetX === xMax) {\n    //     xMin += this._viewWidthInTiles\n    //     xMax += this._viewWidthInTiles\n    //   }\n    //   for (let iCol = xMin; iCol < xMax; iCol++) {\n    //     for (let iRow = 0; iRow < this._viewHeightInTiles; iRow++) {\n    //       const x = this._offsetXOld + iCol\n    //       const y = this._offsetYOld + iRow\n    //       const key = `${x}:${y}`\n    //       this.dirtyMeta.add(key)\n    //     }\n    //   }\n    // }\n    // if (this._offsetY !== this._offsetYOld) {\n    //   let yMin =\n    //     this._offsetY < this._offsetYOld ? this._offsetY : this._offsetYOld\n    //   let yMax =\n    //     this._offsetY > this._offsetYOld ? this._offsetY : this._offsetYOld\n    //   if (this._offsetY === yMin) {\n    //     yMin -= this._viewHeightInTiles\n    //     yMax -= this._viewHeightInTiles\n    //   }\n    //   for (let iRow = yMin; iRow < yMax; iRow++) {\n    //     for (let iCol = 0; iCol < this._viewWidthInTiles; iCol++) {\n    //       const x = this._offsetXOld + iCol\n    //       const y = this._offsetYOld + iRow\n    //       const key = `${x}:${y}`\n    //       this.dirtyMeta.add(key)\n    //     }\n    //   }\n    // }\n    // this._offsetXOld = this._offsetX\n    // this._offsetYOld = this._offsetY\n    // console.log(this._offsetXOld, this._offsetX)\n    // }\n    if (this.dirtyMeta.size > 0) {\n      this.dirtyMeta.forEach((v) => {\n        const coords = v.split(':').map((v) => parseInt(v))\n        const x = coords[0]\n        const y = coords[1]\n        for (let cY = -1; cY <= 1; cY++) {\n          for (let cX = -1; cX <= 1; cX++) {\n            const visKey = `${x + cX}:${y + cY}`\n            this.dirtyVis.add(visKey)\n          }\n        }\n      })\n      this.dirtyMeta.clear()\n      return true\n    } else {\n      return false\n    }\n  }\n  updateVis(bottomPointsGeo: BufferGeometry, topPointsGeo: BufferGeometry) {\n    if (this._offsetsDirty) {\n      this._offsetsDirty = false\n      if (this._offsetX !== this._offsetXOld) {\n        let xMin =\n          this._offsetX < this._offsetXOld ? this._offsetX : this._offsetXOld\n        let xMax =\n          this._offsetX > this._offsetXOld ? this._offsetX : this._offsetXOld\n        if (this._offsetX === xMax) {\n          xMin += this._viewWidthInTiles\n          xMax += this._viewWidthInTiles\n        }\n        for (let iCol = xMin; iCol < xMax; iCol++) {\n          for (let iRow = 0; iRow < this._viewHeightInTiles; iRow++) {\n            const x = iCol\n            const y = this._offsetY + iRow\n            const key = `${x}:${y}`\n            this.dirtyVis.add(key)\n          }\n        }\n      }\n\n      if (this._offsetY !== this._offsetYOld) {\n        let yMin =\n          this._offsetY < this._offsetYOld ? this._offsetY : this._offsetYOld\n        let yMax =\n          this._offsetY > this._offsetYOld ? this._offsetY : this._offsetYOld\n        if (this._offsetY === yMax) {\n          yMin += this._viewHeightInTiles\n          yMax += this._viewHeightInTiles\n        }\n        for (let iRow = yMin; iRow < yMax; iRow++) {\n          for (let iCol = 0; iCol < this._viewWidthInTiles; iCol++) {\n            const x = this._offsetX + iCol\n            const y = iRow\n            const key = `${x}:${y}`\n            this.dirtyVis.add(key)\n          }\n        }\n      }\n      this._offsetXOld = this._offsetX\n      this._offsetYOld = this._offsetY\n    }\n\n    if (this.indicesOfNewlyMadeTiles.size > 0) {\n      for (let iCol = 0; iCol < this._viewWidthInTiles; iCol++) {\n        for (let iRow = 0; iRow < this._viewHeightInTiles; iRow++) {\n          const x = this._offsetX + iCol\n          const y = this._offsetY + iRow\n          const sampledVis = this.sampleVisIds(x, y)\n          if (this.indicesOfNewlyMadeTiles.has(sampledVis.idBottom)) {\n            // this.dirtyVis.add(`${x}:${y-1}`)\n            this.indicesOfMadeTiles.add(sampledVis.idBottom)\n            this.dirtyVis.add(`${x}:${y}`)\n            // this.dirtyVis.add(`${x}:${y+1}`)\n          }\n          if (this.indicesOfNewlyMadeTiles.has(sampledVis.idTop)) {\n            // this.dirtyVis.add(`${x}:${y-1}`)\n            this.dirtyVis.add(`${x}:${y}`)\n            // this.dirtyVis.add(`${x}:${y-1}`)\n          }\n        }\n      }\n      this.indicesOfNewlyMadeTiles.forEach((index) =>\n        this.indicesOfMadeTiles.add(index)\n      )\n      this.indicesOfNewlyMadeTiles.clear()\n    }\n\n    this.dirty = false\n\n    if (this.dirtyVis.size > 0) {\n      const xyBottomAttr = bottomPointsGeo.getAttribute('xy')\n      const xyBottomArr = xyBottomAttr.array as number[]\n      const idBottomAttr = bottomPointsGeo.getAttribute('id')\n      const idBottomArr = idBottomAttr.array as number[]\n      const xyTopAttr = topPointsGeo.getAttribute('xy')\n      const xyTopArr = xyTopAttr.array as number[]\n      const idTopAttr = topPointsGeo.getAttribute('id')\n      const idTopArr = idTopAttr.array as number[]\n      this.dirtyVis.forEach((v) => {\n        console.log(v)\n        const coords = v.split(':').map((v) => parseInt(v))\n        const i = bottomPointsGeo.drawRange.count\n        const i2 = i * 2\n        const x = coords[0]\n        const y = coords[1]\n        const xWrapped = wrap(x, 0, this._viewWidthInTiles)\n        const yWrapped = wrap(y, 0, this._viewHeightInTiles)\n        // const xWrapped = x\n        // const yWrapped = y\n        xyBottomArr[i2] = xWrapped\n        xyBottomArr[i2 + 1] = yWrapped\n        xyBottomArr[i2 + 2] = xWrapped\n        xyBottomArr[i2 + 3] = yWrapped + 1\n        xyTopArr[i2] = xWrapped\n        xyTopArr[i2 + 1] = yWrapped\n        xyTopArr[i2 + 2] = xWrapped\n        xyTopArr[i2 + 3] = yWrapped + 1\n        const sampleDown = this.sampleVisIds(x, y - 1)\n        const sampleCenter = this.sampleVisIds(x, y)\n        const sampleUp = this.sampleVisIds(x, y + 1)\n        // const sampleDown = this.sampleVis(rand(0, 1000), rand(0, 1000))\n        // const sampleCenter = this.sampleVis(rand(0, 1000), rand(0, 1000))\n        // const sampleUp = this.sampleVis(rand(0, 1000), rand(0, 1000))\n        idBottomArr[i] = this.indicesOfMadeTiles.has(sampleCenter.idBottom)\n          ? sampleCenter.idBottom\n          : 0\n        idBottomArr[i + 1] = this.indicesOfMadeTiles.has(sampleUp.idBottom)\n          ? sampleUp.idBottom\n          : 0\n\n        idTopArr[i] = this.indicesOfMadeTiles.has(sampleDown.idTop)\n          ? sampleDown.idTop\n          : 0\n\n        idTopArr[i + 1] = this.indicesOfMadeTiles.has(sampleCenter.idTop)\n          ? sampleCenter.idTop\n          : 0\n\n        if (idBottomArr[i] === 0) {\n          debugger\n        }\n\n        bottomPointsGeo.drawRange.count += 2\n        topPointsGeo.drawRange.count += 2\n      })\n      xyBottomAttr.needsUpdate = true\n      idBottomAttr.needsUpdate = true\n      xyTopAttr.needsUpdate = true\n      idTopAttr.needsUpdate = true\n      this.dirtyVis.clear()\n      return true\n    } else {\n      return false\n    }\n  }\n}\n", "import {\n  BoxBufferGeometry,\n  Mesh,\n  Object3D,\n  SphereGeometry,\n  TorusKnotBufferGeometry,\n  Vector4,\n  WebGLRenderer\n} from 'three'\nimport FibonacciSphereGeometry from '../../../geometries/FibonacciSphereGeometry'\nimport GrassGeometry from '../../../geometries/GrassGeometry'\nimport PyramidGeometry from '../../../geometries/PyramidGeometry'\nimport {\n  changeMeshMaterials,\n  getMeshMaterial,\n  MaterialPassType\n} from '../../../helpers/materials/materialLib'\nimport { getChamferedBoxGeometry } from '../../../utils/geometry'\nimport { detRandRocks, detRandWoodPlanks } from '../../../utils/random'\nimport { makeRocks } from '../../../meshes/factoryRocks'\nimport { makeRockCrumbs } from '../../../meshes/factoryRockCrumbs'\nimport {\n  makeTreePine,\n  makeTreePineMature,\n  makeTreePineStump,\n  makeTreePineStumpMature\n} from '../../../meshes/factoryTreePine'\nimport {\n  makeTreeMaple,\n  makeTreeMapleMature,\n  makeTreeMapleStump,\n  makeTreeMapleStumpMature\n} from '../../../meshes/factoryTreeMaple'\nimport { makeGoldPile } from '../../../meshes/factoryGoldPile'\nimport { makeLampPost } from '../../../meshes/factoryLampPost'\nimport { verticalScale } from '../../../constants'\nimport { BushProps, makeRecursiveBush } from '../../../meshes/factoryBush'\nimport { memoize } from '../../../utils/memoizer'\nimport { makeBrickWall } from '../../../meshes/factoryBrickWall'\nimport TileMaker from '../TileMaker'\nimport DoubleCachedTileMaker from '../DoubleCachedTileMaker'\n\nexport default class MapTileMaker extends DoubleCachedTileMaker {\n  visualPropertyLookupStrings = [\n    'layer2',\n    'nothingness',\n    'floor',\n    'beamCenter',\n    'beamN',\n    'beamE',\n    'beamS',\n    'beamW',\n    'beamNS',\n    'beamEW',\n    'bricks0',\n    'bricks1',\n    'bricks2',\n    'bricks3',\n    'bricks4',\n    'bricks5',\n    'bricks6',\n    'bricks7',\n    'bricks8',\n    'bricks9',\n    'bricks10',\n    'bricks11',\n    'ground',\n    'grassC',\n    'grassN',\n    'grassNE',\n    'grassE',\n    'grassSE',\n    'grassS',\n    'grassSW',\n    'grassW',\n    'grassNW',\n    'bushC',\n    'bushN',\n    'bushNE',\n    'bushE',\n    'bushSE',\n    'bushS',\n    'bushSW',\n    'bushW',\n    'bushNW',\n    'goldPile',\n    'lampPost',\n    'testObject',\n    'pyramid',\n    'rockyGround',\n    'rocksC',\n    'rocksCBig',\n    'rocksN',\n    'rocksNE',\n    'rocksE',\n    'rocksSE',\n    'rocksS',\n    'rocksSW',\n    'rocksW',\n    'rocksNW',\n    'goldOreForRocks',\n    'goldOreForBigRocks',\n    'rockCrumbsC',\n    'rockCrumbsN',\n    'rockCrumbsNE',\n    'rockCrumbsE',\n    'rockCrumbsSE',\n    'rockCrumbsS',\n    'rockCrumbsSW',\n    'rockCrumbsW',\n    'rockCrumbsNW',\n    'treePineC',\n    'treePineN',\n    'treePineNE',\n    'treePineE',\n    'treePineSE',\n    'treePineS',\n    'treePineSW',\n    'treePineW',\n    'treePineNW',\n    'treePineMatureC',\n    'treePineMatureN',\n    'treePineMatureNE',\n    'treePineMatureE',\n    'treePineMatureSE',\n    'treePineMatureS',\n    'treePineMatureSW',\n    'treePineMatureW',\n    'treePineMatureNW',\n    'treePineStump',\n    'treePineStumpMature',\n    'treeMapleC',\n    'treeMapleN',\n    'treeMapleNE',\n    'treeMapleE',\n    'treeMapleSE',\n    'treeMapleS',\n    'treeMapleSW',\n    'treeMapleW',\n    'treeMapleNW',\n    'treeMapleMatureC',\n    'treeMapleMatureN',\n    'treeMapleMatureNE',\n    'treeMapleMatureE',\n    'treeMapleMatureSE',\n    'treeMapleMatureS',\n    'treeMapleMatureSW',\n    'treeMapleMatureW',\n    'treeMapleMatureNW',\n    'treeMapleStump',\n    'treeMapleStumpMature'\n  ] as const\n  private _listenersForUpdatedTiles: ((index: number) => void)[] = []\n  public isIndexStillOnScreen: ((index: number) => boolean) | undefined\n  constructor(\n    pixelsPerTile = 32,\n    pixelsPerCacheEdge = 2048,\n    passes: MaterialPassType[] = ['beauty']\n  ) {\n    const dummy = memoize(() => new Object3D())\n\n    const cyberGlowMat = getMeshMaterial('cyberGlow')\n    const cyberPanelMat = getMeshMaterial('cyberPanel')\n    const nothingness = () => {\n      const obj = new Mesh(new BoxBufferGeometry(32, 2, 32), cyberGlowMat)\n      obj.position.y = -1\n\n      const protoPanel = new Mesh(\n        getChamferedBoxGeometry(15, 4, 15, 1),\n        cyberPanelMat\n      )\n      for (let ix = -1; ix <= 1; ix += 2) {\n        for (let iy = -1; iy <= 1; iy += 2) {\n          const panel = protoPanel.clone()\n          obj.add(panel)\n          panel.position.x = 8 * ix + 0.5\n          panel.position.z = 8 * iy + 0.5\n        }\n      }\n\n      return obj\n    }\n\n    const brickMat = getMeshMaterial('brick')\n    const mortarMat = getMeshMaterial('mortar')\n    const drywallMat = getMeshMaterial('drywall')\n    const floorMat = getMeshMaterial('floor')\n    const groundMat = getMeshMaterial('ground')\n    const ballMat = getMeshMaterial('plastic')\n    const grassMat = getMeshMaterial('grass')\n    const rocksMat = getMeshMaterial('rock')\n    const bushMat = getMeshMaterial('bush')\n    const berryMat = getMeshMaterial('berry')\n    const woodMat = getMeshMaterial('wood')\n    const ball = new Mesh(new SphereGeometry(16, 32, 16), ballMat)\n    ball.scale.y = Math.SQRT1_2\n    // ball.position.y = Math.SQRT1_2 * 14\n\n    const floor = () => {\n      const floorBoard = new Mesh(\n        getChamferedBoxGeometry(8, 4, 32, 1),\n        floorMat\n      )\n      const floorBoardPair = new Object3D()\n      floorBoardPair.add(floorBoard)\n      const floorBoard2 = floorBoard.clone()\n      floorBoardPair.add(floorBoard2)\n      floorBoard.position.z = -16\n      floorBoard2.position.z = 16\n      const floor = new Mesh(new BoxBufferGeometry(32, 2, 32), floorMat)\n      detRandWoodPlanks()\n      for (let i = 0; i < 4; i++) {\n        const c = floorBoardPair.clone()\n        c.position.x = i * 8 - 12\n        c.position.z = ~~detRandWoodPlanks(-14, 14)\n        floor.add(c)\n      }\n      floor.position.y = -1\n      return floor\n    }\n\n    const ground = () => {\n      const obj = new Mesh(new BoxBufferGeometry(32, 2, 32), groundMat)\n      obj.position.y = -1\n      return obj\n    }\n\n    //brick walls\n\n    const drywall = new Mesh(new BoxBufferGeometry(32, 32, 2), drywallMat)\n    const getBrickWall = memoize(() =>\n      makeBrickWall(brickMat, mortarMat, -1, 1)\n    )\n    const brickWallSectionSC = memoize(() => {\n      const obj = getBrickWall().clone()\n      obj.position.z = 8\n      obj.position.x = 0\n      return obj\n    })\n    const brickWallSectionEC = memoize(() => {\n      const obj = getBrickWall().clone()\n      obj.position.x = 8\n      obj.rotation.y = Math.PI * 0.5\n      return obj\n    })\n    const brickWallSectionNC = memoize(() => {\n      const obj = getBrickWall().clone()\n      obj.position.z = -8\n      obj.rotation.y = Math.PI\n      return obj\n    })\n    const brickWallSectionWC = memoize(() => {\n      const obj = getBrickWall().clone()\n      obj.position.x = -8\n      obj.rotation.y = Math.PI * -0.5\n      return obj\n    })\n    const moveRelX = (brickWall: Object3D, amt: number) => {\n      brickWall.position.x += Math.cos(brickWall.rotation.y) * amt\n      brickWall.position.z += Math.sin(brickWall.rotation.y) * amt\n    }\n    // const makeBrickWallSectionsLR = (brickWallC: Object3D) => {\n    //   const brickWallL = brickWallC.clone(true)\n    //   const brickWallR = brickWallC.clone(true)\n\n    //   moveRelX(brickWallL, -16)\n    //   moveRelX(brickWallR, 16)\n    //   return { brickWallL, brickWallR }\n    // }\n    const makeBrickWallSectionsL = (brickWallC: Object3D) => {\n      brickWallC.updateMatrixWorld()\n      const brickWallL = brickWallC.clone(true)\n      moveRelX(brickWallL, -16)\n      return brickWallL\n    }\n    const makeBrickWallSectionsR = (brickWallC: Object3D) => {\n      const brickWallR = brickWallC.clone(true)\n      moveRelX(brickWallR, 16)\n      return brickWallR\n    }\n    const brickWallSectionSL = () =>\n      makeBrickWallSectionsL(brickWallSectionSC())\n    const brickWallSectionSR = () =>\n      makeBrickWallSectionsR(brickWallSectionSC())\n    const brickWallSectionWL = () =>\n      makeBrickWallSectionsL(brickWallSectionWC())\n    const brickWallSectionWR = () =>\n      makeBrickWallSectionsR(brickWallSectionWC())\n    const brickWallSectionNL = () =>\n      makeBrickWallSectionsL(brickWallSectionNC())\n    const brickWallSectionNR = () =>\n      makeBrickWallSectionsR(brickWallSectionNC())\n    const brickWallSectionEL = () =>\n      makeBrickWallSectionsL(brickWallSectionEC())\n    const brickWallSectionER = () =>\n      makeBrickWallSectionsR(brickWallSectionEC())\n\n    //wooden beams, struts and studs\n\n    const woodBeamGeo = getChamferedBoxGeometry(6, 32, 6, 1)\n    const beamCenter = () => {\n      const beamCenter = new Mesh(woodBeamGeo, woodMat)\n      beamCenter.position.y = 16\n      return beamCenter\n    }\n\n    const makeStud = memoize(() => {\n      const woodStudGeo = getChamferedBoxGeometry(4, 32 - 6, 6, 1)\n      const stud = new Mesh(woodStudGeo, woodMat)\n      stud.position.y = 16\n      return stud\n    })\n    const makeBeamFullSectionEW = () => {\n      const woodPlateGeo = getChamferedBoxGeometry(36, 3, 6, 1)\n      const bottomPlate = new Mesh(woodPlateGeo, woodMat)\n      bottomPlate.position.y = 1.5\n      const topPlate = new Mesh(woodPlateGeo, woodMat)\n      topPlate.position.y = 32 - 1.5\n      const beamFullSectionEW = new Object3D()\n      beamFullSectionEW.add(bottomPlate)\n      beamFullSectionEW.add(topPlate)\n      const stud = makeStud().clone()\n      beamFullSectionEW.add(stud)\n      const stud2 = stud.clone()\n      stud2.position.x -= 16\n      beamFullSectionEW.add(stud2)\n      const stud3 = stud.clone()\n      stud3.position.x += 16\n      beamFullSectionEW.add(stud3)\n      return beamFullSectionEW\n    }\n    const beamFullSectionEW = makeBeamFullSectionEW\n\n    const beamFullSectionNS = () => {\n      const obj = beamFullSectionEW().clone(true)\n      obj.rotation.y = Math.PI * 0.5\n      return obj\n    }\n\n    const makeShortBeam = memoize(() => {\n      const woodPlateShortGeo = getChamferedBoxGeometry(15, 3, 6, 1)\n      const bottomShortPlate = new Mesh(woodPlateShortGeo, woodMat)\n      bottomShortPlate.position.x = 1\n      bottomShortPlate.position.y = 1.5\n      const topShortPlate = new Mesh(woodPlateShortGeo, woodMat)\n      topShortPlate.position.x = 1\n      topShortPlate.position.y = 32 - 1.5\n      const shortBeam = new Object3D()\n      shortBeam.add(topShortPlate)\n      shortBeam.add(bottomShortPlate)\n      const stud4 = makeStud().clone()\n      stud4.position.x = -4.5\n      const stud5 = makeStud().clone()\n      stud5.position.x = 6.5\n      shortBeam.add(stud4)\n      shortBeam.add(stud5)\n      shortBeam.position.x = 16 - 13 * 0.5\n      return shortBeam\n    })\n    const beamE = () => {\n      const obj = new Object3D()\n      obj.add(makeShortBeam().clone())\n      return obj\n    }\n    const beamS = () => {\n      const obj = new Object3D()\n      obj.add(makeShortBeam().clone())\n      obj.rotation.y = Math.PI * 0.5\n      return obj\n    }\n    const beamW = () => {\n      const obj = new Object3D()\n      obj.add(makeShortBeam().clone())\n      obj.rotation.y = Math.PI\n      return obj\n    }\n    const beamN = () => {\n      const obj = new Object3D()\n      obj.add(makeShortBeam().clone())\n      obj.rotation.y = Math.PI * -0.5\n      return obj\n    }\n\n    // brick.rotation.y = Math.PI * 0.25\n    drywall.position.y = 16\n    drywall.position.z = -4\n    // ball.position.y = 14\n    // this._camera.position.y = 16\n    // this._camera.rotateY(Math.PI * -0.25)\n    // pivot.add(drywall)\n    // scene.add(ball)\n\n    const grassGeoA = memoize(() => new GrassGeometry())\n    const grassGeoH = memoize(() => new GrassGeometry())\n    const grassGeoV = memoize(() => new GrassGeometry())\n    const grassGeoCorner = memoize(() => new GrassGeometry())\n    //grass\n    const grassC = () => new Mesh(grassGeoA(), grassMat)\n    const grassN = () => {\n      const obj = new Mesh(grassGeoV(), grassMat)\n      obj.position.set(0, 0, 16)\n      return obj\n    }\n    const grassNE = () => {\n      const obj = new Mesh(grassGeoCorner(), grassMat)\n      obj.position.set(16, 0, 16)\n      return obj\n    }\n    const grassE = () => {\n      const obj = new Mesh(grassGeoH(), grassMat)\n      obj.position.set(16, 0, 0)\n      return obj\n    }\n    const grassSE = () => {\n      const obj = new Mesh(grassGeoCorner(), grassMat)\n      obj.position.set(16, 0, -16)\n      return obj\n    }\n    const grassS = () => {\n      const obj = new Mesh(grassGeoV(), grassMat)\n      obj.position.set(0, 0, -16)\n      return obj\n    }\n    const grassSW = () => {\n      const obj = new Mesh(grassGeoCorner(), grassMat)\n      obj.position.set(-16, 0, -16)\n      return obj\n    }\n    const grassW = () => {\n      const obj = new Mesh(grassGeoH(), grassMat)\n      obj.position.set(-16, 0, 0)\n      return obj\n    }\n    const grassNW = () => {\n      const obj = new Mesh(grassGeoCorner(), grassMat)\n      obj.position.set(-16, 0, 16)\n      return obj\n    }\n\n    const bushC = () => makeRecursiveBush(bushMat, berryMat)\n    const bushVProto = memoize(() => makeRecursiveBush(bushMat, berryMat))\n    const bushHProto = memoize(() => makeRecursiveBush(bushMat, berryMat))\n    const bushCornerProto = memoize(() =>\n      makeRecursiveBush(bushMat, berryMat, new BushProps(16, 8, 24, 60, 22))\n    )\n    const bushN = () => {\n      const obj = bushVProto().clone(true)\n      obj.position.set(0, 0, 16)\n      return obj\n    }\n    const bushNE = () => {\n      const obj = bushCornerProto().clone(true)\n      obj.position.set(16, 0, 16)\n      return obj\n    }\n    const bushE = () => {\n      const obj = bushHProto().clone(true)\n      obj.position.set(16, 0, 0)\n      return obj\n    }\n    const bushSE = () => {\n      const obj = bushNE().clone(true)\n      obj.position.set(16, 0, -16)\n      return obj\n    }\n    const bushS = () => {\n      const obj = bushN().clone(true)\n      obj.position.set(0, 0, -16)\n      return obj\n    }\n    const bushSW = () => {\n      const obj = bushNE().clone(true)\n      obj.position.set(-16, 0, -16)\n      return obj\n    }\n    const bushW = () => {\n      const obj = bushHProto().clone(true)\n      obj.position.set(-16, 0, 0)\n      return obj\n    }\n    const bushNW = () => {\n      const obj = bushNE().clone(true)\n      obj.position.set(-16, 0, 16)\n      return obj\n    }\n\n    const goldMat = getMeshMaterial('gold')\n    const goldChunkGeo = new FibonacciSphereGeometry(4, 17)\n    const goldPile = () => makeGoldPile(goldChunkGeo, goldMat)\n\n    const ironBlackMat = getMeshMaterial('ironBlack')\n\n    const lampPost = () => makeLampPost(ironBlackMat)\n\n    const testObject = () => {\n      const obj = new Mesh(\n        new TorusKnotBufferGeometry(10, 2, 48, 8),\n        getMeshMaterial('plastic')\n      )\n      obj.position.y = 12\n      obj.rotation.x = Math.PI * 0.5\n      obj.scale.y *= verticalScale\n      return obj\n    }\n\n    const pyramid = () => {\n      const pyramidGeo = new PyramidGeometry()\n      const obj = new Mesh(pyramidGeo, getMeshMaterial('floor'))\n      const pyramidTop = new Mesh(pyramidGeo, getMeshMaterial('gold'))\n      obj.add(pyramidTop)\n      pyramidTop.scale.setScalar(0.2)\n      pyramidTop.position.y = 0.82\n      obj.scale.set(30, 16, 30)\n      return obj\n    }\n\n    const rockyGround = () => {\n      const pyramidGeo = new PyramidGeometry()\n      const rockyGroundProto = new Mesh(pyramidGeo, getMeshMaterial('ground'))\n      const obj = new Object3D()\n      for (let i = 0; i < 12; i++) {\n        const rocky = rockyGroundProto.clone()\n        obj.add(rocky)\n        rocky.scale.set(\n          detRandRocks(3, 10),\n          detRandRocks(0.25, 0.5),\n          detRandRocks(3, 10)\n        )\n        rocky.rotation.y = detRandRocks(0, Math.PI * 2)\n        rocky.position.set(detRandRocks(-12, 12), 0, detRandRocks(-12, 12))\n      }\n      return obj\n    }\n\n    const rocksA = memoize(() => makeRocks(rocksMat, 0))\n    const rocksABig = memoize(() => makeRocks(rocksMat, 0))\n    const rocksH = memoize(() => makeRocks(rocksMat, 4))\n    const rocksV = memoize(() => makeRocks(rocksMat, 4))\n    const rocksCorner = memoize(() => makeRocks(rocksMat, 8))\n    //rocks\n\n    const rocksC = () => rocksA()\n    const rocksN = () => {\n      const obj = rocksV().clone()\n      obj.position.set(0, 0, 16)\n      return obj\n    }\n    const rocksNE = () => {\n      const obj = rocksCorner().clone()\n      obj.position.set(16, 0, 16)\n      return obj\n    }\n    const rocksE = () => {\n      const obj = rocksH().clone()\n      obj.position.set(16, 0, 0)\n      return obj\n    }\n    const rocksSE = () => {\n      const obj = rocksCorner().clone()\n      obj.position.set(16, 0, -16)\n      return obj\n    }\n    const rocksS = () => {\n      const obj = rocksV().clone()\n      obj.position.set(0, 0, -16)\n      return obj\n    }\n    const rocksSW = () => {\n      const obj = rocksCorner().clone()\n      obj.position.set(-16, 0, -16)\n      return obj\n    }\n    const rocksW = () => {\n      const obj = rocksH().clone()\n      obj.position.set(-16, 0, 0)\n      return obj\n    }\n    const rocksNW = () => {\n      const obj = rocksCorner().clone()\n      obj.position.set(-16, 0, 16)\n      return obj\n    }\n    const rocksCBig = () => {\n      const obj = rocksABig().clone()\n      obj.position.y += 12\n      return obj\n    }\n\n    const goldOreForRocks = () => makeRocks(goldMat, 0, 2)\n    const goldOreForBigRocks = () => makeRocks(goldMat, 10, 2)\n\n    const rockCrumbsA = memoize(() => makeRockCrumbs(rocksMat))\n    const rockCrumbsH = memoize(() => makeRockCrumbs(rocksMat))\n    const rockCrumbsV = memoize(() => makeRockCrumbs(rocksMat))\n    const rockCrumbsCorner = memoize(() => makeRockCrumbs(rocksMat))\n    //rockCrumbs\n\n    const rockCrumbsC = () => {\n      const obj = rockCrumbsA().clone()\n      return obj\n    }\n    const rockCrumbsN = () => {\n      const obj = rockCrumbsV().clone()\n      obj.position.set(0, 0, 16)\n      return obj\n    }\n    const rockCrumbsNE = () => {\n      const obj = rockCrumbsCorner().clone()\n      obj.position.set(16, 0, 16)\n      return obj\n    }\n    const rockCrumbsE = () => {\n      const obj = rockCrumbsH().clone()\n      obj.position.set(16, 0, 0)\n      return obj\n    }\n    const rockCrumbsSE = () => {\n      const obj = rockCrumbsCorner().clone()\n      obj.position.set(16, 0, -16)\n      return obj\n    }\n    const rockCrumbsS = () => {\n      const obj = rockCrumbsV().clone()\n      obj.position.set(0, 0, -16)\n      return obj\n    }\n    const rockCrumbsSW = () => {\n      const obj = rockCrumbsCorner().clone()\n      obj.position.set(-16, 0, -16)\n      return obj\n    }\n    const rockCrumbsW = () => {\n      const obj = rockCrumbsH().clone()\n      obj.position.set(-16, 0, 0)\n      return obj\n    }\n    const rockCrumbsNW = () => {\n      const obj = rockCrumbsCorner().clone()\n      obj.position.set(-16, 0, 16)\n      return obj\n    }\n\n    const treePine = memoize(() =>\n      makeTreePine(getMeshMaterial('bark'), getMeshMaterial('pineNeedle'))\n    )\n\n    const treePineC = () => {\n      const obj = treePine().clone()\n      return obj\n    }\n    const treePineN = () => {\n      const obj = treePine().clone()\n      obj.position.set(0, 0, 32)\n      return obj\n    }\n    const treePineS = () => {\n      const obj = treePine().clone()\n      obj.position.set(0, 0, -32)\n      return obj\n    }\n    const treePineE = () => {\n      const obj = treePine().clone()\n      obj.position.set(32, 0, 0)\n      return obj\n    }\n    const treePineW = () => {\n      const obj = treePine().clone()\n      obj.position.set(-32, 0, 0)\n      return obj\n    }\n    const treePineNE = () => {\n      const obj = treePine().clone()\n      obj.position.set(32, 0, 32)\n      return obj\n    }\n    const treePineSE = () => {\n      const obj = treePine().clone()\n      obj.position.set(32, 0, -32)\n      return obj\n    }\n    const treePineNW = () => {\n      const obj = treePine().clone()\n      obj.position.set(-32, 0, 32)\n      return obj\n    }\n    const treePineSW = () => {\n      const obj = treePine().clone()\n      obj.position.set(-32, 0, -32)\n      return obj\n    }\n\n    const treePineMature = memoize(() =>\n      makeTreePineMature(\n        getMeshMaterial('bark'),\n        getMeshMaterial('pineNeedle'),\n        getMeshMaterial('wood')\n      )\n    )\n    const treePineMatureC = () => {\n      const obj = treePineMature().clone()\n      return obj\n    }\n    const treePineMatureN = () => {\n      const obj = treePineMature().clone()\n      obj.position.set(0, 0, 32)\n      return obj\n    }\n    const treePineMatureS = () => {\n      const obj = treePineMature().clone()\n      obj.position.set(0, 0, -32)\n      return obj\n    }\n    const treePineMatureE = () => {\n      const obj = treePineMature().clone()\n      obj.position.set(32, 0, 0)\n      return obj\n    }\n    const treePineMatureW = () => {\n      const obj = treePineMature().clone()\n      obj.position.set(-32, 0, 0)\n      return obj\n    }\n    const treePineMatureNE = () => {\n      const obj = treePineMature().clone()\n      obj.position.set(32, 0, 32)\n      return obj\n    }\n    const treePineMatureSE = () => {\n      const obj = treePineMature().clone()\n      obj.position.set(32, 0, -32)\n      return obj\n    }\n    const treePineMatureNW = () => {\n      const obj = treePineMature().clone()\n      obj.position.set(-32, 0, 32)\n      return obj\n    }\n    const treePineMatureSW = () => {\n      const obj = treePineMature().clone()\n      obj.position.set(-32, 0, -32)\n      return obj\n    }\n\n    const treePineStump = memoize(() =>\n      makeTreePineStump(getMeshMaterial('bark'), getMeshMaterial('wood'))\n    )\n\n    const treePineStumpMature = memoize(() =>\n      makeTreePineStumpMature(getMeshMaterial('bark'), getMeshMaterial('wood'))\n    )\n\n    const treeMaple = memoize(() =>\n      makeTreeMaple(getMeshMaterial('barkMaple'), getMeshMaterial('leafMaple'))\n    )\n\n    const treeMapleC = () => {\n      const obj = treeMaple().clone()\n      return obj\n    }\n    const treeMapleN = () => {\n      const obj = treeMaple().clone()\n      obj.position.set(0, 0, 32)\n      return obj\n    }\n    const treeMapleS = () => {\n      const obj = treeMaple().clone()\n      obj.position.set(0, 0, -32)\n      return obj\n    }\n    const treeMapleE = () => {\n      const obj = treeMaple().clone()\n      obj.position.set(32, 0, 0)\n      return obj\n    }\n    const treeMapleW = () => {\n      const obj = treeMaple().clone()\n      obj.position.set(-32, 0, 0)\n      return obj\n    }\n    const treeMapleNE = () => {\n      const obj = treeMaple().clone()\n      obj.position.set(32, 0, 32)\n      return obj\n    }\n    const treeMapleSE = () => {\n      const obj = treeMaple().clone()\n      obj.position.set(32, 0, -32)\n      return obj\n    }\n    const treeMapleNW = () => {\n      const obj = treeMaple().clone()\n      obj.position.set(-32, 0, 32)\n      return obj\n    }\n    const treeMapleSW = () => {\n      const obj = treeMaple().clone()\n      obj.position.set(-32, 0, -32)\n      return obj\n    }\n\n    const treeMapleMature = memoize(() =>\n      makeTreeMapleMature(\n        getMeshMaterial('barkMaple'),\n        getMeshMaterial('leafMaple'),\n        getMeshMaterial('woodMaple')\n      )\n    )\n    const treeMapleMatureC = () => {\n      const obj = treeMapleMature().clone()\n      return obj\n    }\n    const treeMapleMatureN = () => {\n      const obj = treeMapleMature().clone()\n      obj.position.set(0, 0, 32)\n      return obj\n    }\n    const treeMapleMatureS = () => {\n      const obj = treeMapleMature().clone()\n      obj.position.set(0, 0, -32)\n      return obj\n    }\n    const treeMapleMatureE = () => {\n      const obj = treeMapleMature().clone()\n      obj.position.set(32, 0, 0)\n      return obj\n    }\n    const treeMapleMatureW = () => {\n      const obj = treeMapleMature().clone()\n      obj.position.set(-32, 0, 0)\n      return obj\n    }\n    const treeMapleMatureNE = () => {\n      const obj = treeMapleMature().clone()\n      obj.position.set(32, 0, 32)\n      return obj\n    }\n    const treeMapleMatureSE = () => {\n      const obj = treeMapleMature().clone()\n      obj.position.set(32, 0, -32)\n      return obj\n    }\n    const treeMapleMatureNW = () => {\n      const obj = treeMapleMature().clone()\n      obj.position.set(-32, 0, 32)\n      return obj\n    }\n    const treeMapleMatureSW = () => {\n      const obj = treeMapleMature().clone()\n      obj.position.set(-32, 0, -32)\n      return obj\n    }\n\n    const treeMapleStump = () =>\n      makeTreeMapleStump(\n        getMeshMaterial('barkMaple'),\n        getMeshMaterial('woodMaple')\n      )\n\n    const treeMapleStumpMature = () =>\n      makeTreeMapleStumpMature(\n        getMeshMaterial('barkMaple'),\n        getMeshMaterial('woodMaple')\n      )\n\n    const indexedMeshes: (() => Object3D)[] = [\n      dummy,\n      nothingness,\n      floor,\n      beamCenter,\n      beamN,\n      beamE,\n      beamS,\n      beamW,\n      beamFullSectionNS,\n      beamFullSectionEW,\n      brickWallSectionWR,\n      brickWallSectionEL,\n      brickWallSectionNR,\n      brickWallSectionSR,\n      brickWallSectionER,\n      brickWallSectionWL,\n      brickWallSectionSL,\n      brickWallSectionNL,\n      brickWallSectionNC,\n      brickWallSectionEC,\n      brickWallSectionSC,\n      brickWallSectionWC,\n      ground,\n      grassC,\n      grassN,\n      grassNE,\n      grassE,\n      grassSE,\n      grassS,\n      grassSW,\n      grassW,\n      grassNW,\n      bushC,\n      bushN,\n      bushNE,\n      bushE,\n      bushSE,\n      bushS,\n      bushSW,\n      bushW,\n      bushNW,\n      goldPile,\n      lampPost,\n      testObject,\n      pyramid,\n      rockyGround,\n      rocksC,\n      rocksCBig,\n      rocksN,\n      rocksNE,\n      rocksE,\n      rocksSE,\n      rocksS,\n      rocksSW,\n      rocksW,\n      rocksNW,\n      goldOreForRocks,\n      goldOreForBigRocks,\n      rockCrumbsC,\n      rockCrumbsN,\n      rockCrumbsNE,\n      rockCrumbsE,\n      rockCrumbsSE,\n      rockCrumbsS,\n      rockCrumbsSW,\n      rockCrumbsW,\n      rockCrumbsNW,\n      treePineC,\n      treePineN,\n      treePineNE,\n      treePineE,\n      treePineSE,\n      treePineS,\n      treePineSW,\n      treePineW,\n      treePineNW,\n      treePineMatureC,\n      treePineMatureN,\n      treePineMatureNE,\n      treePineMatureE,\n      treePineMatureSE,\n      treePineMatureS,\n      treePineMatureSW,\n      treePineMatureW,\n      treePineMatureNW,\n      treePineStump,\n      treePineStumpMature,\n      treeMapleC,\n      treeMapleN,\n      treeMapleNE,\n      treeMapleE,\n      treeMapleSE,\n      treeMapleS,\n      treeMapleSW,\n      treeMapleW,\n      treeMapleNW,\n      treeMapleMatureC,\n      treeMapleMatureN,\n      treeMapleMatureNE,\n      treeMapleMatureE,\n      treeMapleMatureSE,\n      treeMapleMatureS,\n      treeMapleMatureSW,\n      treeMapleMatureW,\n      treeMapleMatureNW,\n      treeMapleStump,\n      treeMapleStumpMature\n    ]\n\n    super(pixelsPerTile, pixelsPerCacheEdge, passes, indexedMeshes)\n  }\n\n  render(renderer: WebGLRenderer) {\n    if (this._renderQueue.length > 0) {\n      const oldViewport = new Vector4()\n      const oldScissor = new Vector4()\n      renderer.getViewport(oldViewport)\n      renderer.getScissor(oldScissor)\n      this._scene.updateMatrixWorld()\n      let duration = 0\n      let count = 0\n      for (const index of this._renderQueue) {\n        count++\n        const startTime = performance.now()\n        const iCol = index % this._tilesPerEdge\n        const iRow = ~~(index / this._tilesPerEdge)\n        const visualProps = this._tileRegistry[index]\n        const layer2 = !!(visualProps[0] & 1)\n        for (const pass of this._passes) {\n          renderer.setRenderTarget(this._renderTargets.get(pass)!)\n          const p = this._pixelsPerTile / renderer.getPixelRatio()\n          const depthPass = pass === 'customTopDownHeight'\n          if (layer2 && depthPass) {\n            continue\n          }\n          for (let j = 0; j < this._indexedMeshes.length; j++) {\n            const jb = ~~(j / 8)\n            const j8 = j % 8\n            const shouldShow = !!(visualProps[jb] & (1 << j8))\n            if (this._indexedMeshesVisibility[j] && !shouldShow) {\n              this._indexedMeshes[j]().visible = false\n            } else if (!this._indexedMeshesVisibility[j] && shouldShow) {\n              this._indexedMeshes[j]().visible = true\n            }\n            this._indexedMeshesVisibility[j] = shouldShow\n          }\n\n          renderer.setViewport(iCol * p, iRow * p, p, p)\n          renderer.setScissor(iCol * p, iRow * p, p, p)\n          changeMeshMaterials(this._scene, pass, true)\n          renderer.render(\n            this._scene,\n            layer2\n              ? this._cameraTiltedTop\n              : depthPass\n              ? this._cameraTopDown\n              : this._cameraTiltedBottom\n          )\n        }\n        duration += performance.now() - startTime\n        this.notifyThatNewTileIsMade(index)\n        if (duration > 100) {\n          break\n        }\n      }\n      console.log(duration)\n      renderer.setViewport(oldViewport)\n      renderer.setScissor(oldScissor)\n      renderer.setRenderTarget(null)\n      this._renderQueue.splice(0, count)\n    }\n  }\n  notifyThatNewTileIsMade(index: number) {\n    for (const l of this._listenersForUpdatedTiles) {\n      l(index)\n    }\n  }\n  listenForMadeTiles(listener: (index: number) => void) {\n    this._listenersForUpdatedTiles.push(listener)\n  }\n  update(dt: number) {\n    //\n  }\n}\n", "import triangulate from 'delaunay-triangulate'\nimport { BufferAttribute, BufferGeometry, Vector3 } from 'three'\nimport { pointOnSphereFibonacci } from '~/utils/math'\n\nexport default class FibonacciSphereGeometry extends BufferGeometry {\n  constructor(radius: number, total: number) {\n    super()\n    radius = radius !== undefined ? radius : 20\n    total = total !== undefined ? total : 20\n    const verticeArrays = []\n    const vertices = []\n    let i: number\n    let hash: string\n    let uniqueIndex: number\n    for (i = 0; i < total; i++) {\n      const longLat = pointOnSphereFibonacci(i, total)\n      const long = longLat[0]\n      const lat = longLat[1]\n      const vertArr = [\n        Math.cos(lat) * Math.cos(long) * radius,\n        Math.sin(lat) * radius,\n        Math.cos(lat) * Math.sin(long) * radius\n      ]\n      verticeArrays.push(vertArr)\n      vertices.push(new Vector3().fromArray(vertArr))\n    }\n    const tetras = triangulate(verticeArrays)\n    const triangles = []\n    for (i = 0; i < tetras.length; i++) {\n      const tetra = tetras[i]\n      triangles.push(tetra[0], tetra[1], tetra[3])\n      triangles.push(tetra[0], tetra[2], tetra[1])\n      triangles.push(tetra[0], tetra[3], tetra[2])\n      triangles.push(tetra[3], tetra[1], tetra[2])\n    }\n    // var temp;\n    const uniques = []\n    const counts = []\n    let tempTri: number[] = []\n    function uniqueTriOrderSort(a: number, b: number) {\n      return a - b\n    }\n    for (i = 0; i < triangles.length; i += 3) {\n      tempTri[0] = triangles[i]\n      tempTri[1] = triangles[i + 1]\n      tempTri[2] = triangles[i + 2]\n      tempTri = tempTri.sort(uniqueTriOrderSort)\n      hash = tempTri[0] + ',' + tempTri[1] + ',' + tempTri[2]\n      uniqueIndex = uniques.indexOf(hash)\n      if (uniqueIndex === -1) {\n        uniqueIndex = uniques.length\n        uniques.push(hash)\n        counts.push(0)\n      }\n      counts[uniqueIndex]++\n    }\n    const indices: number[] = []\n    for (i = 0; i < triangles.length; i += 3) {\n      tempTri[0] = triangles[i]\n      tempTri[1] = triangles[i + 1]\n      tempTri[2] = triangles[i + 2]\n      tempTri = tempTri.sort(uniqueTriOrderSort)\n      hash = tempTri[0] + ',' + tempTri[1] + ',' + tempTri[2]\n      uniqueIndex = uniques.indexOf(hash)\n      if (counts[uniqueIndex] === 1) {\n        indices.push(triangles[i])\n        indices.push(triangles[i + 2])\n        indices.push(triangles[i + 1])\n        // const face = new Face3(triangles[i], triangles[i + 1], triangles[i + 2])\n        // this.faces.push(face)\n      }\n    }\n    const positionArray = new Float32Array(verticeArrays.length * 3)\n    for (let i = 0; i < verticeArrays.length; i++) {\n      const i3 = i * 3\n      const vertArr = verticeArrays[i]\n      positionArray[i3] = vertArr[0]\n      positionArray[i3 + 1] = vertArr[1]\n      positionArray[i3 + 2] = vertArr[2]\n    }\n    this.setAttribute('position', new BufferAttribute(positionArray, 3))\n    this.setIndex(indices)\n    // this.computeFaceNormals()\n    this.computeVertexNormals()\n    // this.computeTangents();\n  }\n}\n", "import {\n  BufferGeometry,\n  Float32BufferAttribute,\n  Uint16BufferAttribute,\n  Vector3\n} from 'three'\nimport { detRandGrass } from '~/utils/random'\n\nexport default class GrassGeometry extends BufferGeometry {\n  constructor(count = 200) {\n    super()\n    const itemSize = 3\n    const posArr = new Float32Array(count * 3 * itemSize)\n\n    const normalArr = new Float32Array(count * 3 * itemSize)\n\n    const pos = new Vector3()\n    const posA = new Vector3()\n    const posB = new Vector3()\n    const offset = new Vector3()\n    const normalUp = new Vector3(0, 1, 0)\n    const normal = new Vector3(0, 1, 0)\n    const ab = new Vector3(0, 1, 0)\n    const grassScale = 1\n    for (let i = 0; i < count; i++) {\n      const angle = detRandGrass(-Math.PI, Math.PI)\n      offset.x = Math.cos(angle) * 2 * grassScale\n      offset.z = Math.sin(angle) * 2 * grassScale\n      const i9 = i * 9\n      const polarAngle = detRandGrass(-Math.PI, Math.PI)\n      const polarDistance = (1 - Math.pow(1 - detRandGrass(0, 1), 2)) * 15\n      // pos.set(detRandGrass(-16, 16), 0, detRandGrass(-16, 16))\n      pos.set(\n        Math.cos(polarAngle) * polarDistance,\n        0,\n        Math.sin(polarAngle) * polarDistance\n      )\n      posA.copy(pos).add(offset)\n      posB.copy(pos).sub(offset)\n      pos.y += detRandGrass(1, 3) * grassScale\n      posA.toArray(posArr, i9)\n      pos.toArray(posArr, i9 + 3)\n      posB.toArray(posArr, i9 + 6)\n\n      normal.subVectors(posA, posB)\n      ab.subVectors(pos, posA)\n      normal.cross(ab)\n      normal.normalize()\n\n      normalUp.set(0, 1, 0)\n      normalUp.lerp(normal, 0)\n      normalUp.normalize()\n\n      normalUp.toArray(normalArr, i9)\n      normalUp.toArray(normalArr, i9 + 6)\n      normalUp.lerp(normal, 0.1)\n      normalUp.normalize()\n      normalUp.toArray(normalArr, i9 + 3)\n    }\n    const indexArr = new Uint16Array(count * 3)\n    const count3 = count * 3\n    for (let i = 0; i < count3; i++) {\n      indexArr[i] = i\n    }\n    const posAttr = new Float32BufferAttribute(posArr, itemSize)\n    this.setAttribute('position', posAttr)\n    const normalAttr = new Float32BufferAttribute(normalArr, itemSize)\n    this.setAttribute('normal', normalAttr)\n    const index = new Uint16BufferAttribute(indexArr, 1)\n    this.setIndex(index)\n  }\n}\n", "import { BufferGeometry, Vector3 } from 'three'\n\nexport default class PyramidGeometry extends BufferGeometry {\n  constructor() {\n    super()\n    const vc = new Vector3(0, 1, 0)\n    const vlt = new Vector3(-0.5, 0, -0.5)\n    const vlb = new Vector3(-0.5, 0, 0.5)\n    const vrb = new Vector3(0.5, 0, 0.5)\n    const vrt = new Vector3(0.5, 0, -0.5)\n\n    const pts = [vc, vlt, vlb, vc, vlb, vrb, vc, vrb, vrt, vc, vrt, vlt]\n\n    this.setFromPoints(pts)\n    this.computeVertexNormals()\n  }\n}\n", "import {\n  BufferGeometry,\n  Camera,\n  Color,\n  DoubleSide,\n  Group,\n  Material,\n  Matrix3,\n  Mesh,\n  MeshDepthMaterial,\n  MeshStandardMaterial,\n  MeshStandardMaterialParameters,\n  Object3D,\n  Scene,\n  Vector4,\n  WebGLRenderer\n} from 'three'\nimport BasicVec4MeshMaterial from '../../materials/BasicVec4MeshMaterial'\nimport { HeightMeshMaterial } from '../../materials/HeightMeshMaterial'\nimport { WorldNormalMeshMaterial } from '../../materials/WorldNormalMeshMaterial'\nimport { defaultNumber, NOOP } from '../../utils/jsUtils'\nimport { makeSafetyCheckFromConstStringArray } from '../typeHelpers'\n\nconst CuratedMaterialTypeStrings = [\n  'ironBlack',\n  'ground',\n  'brick',\n  'gold',\n  'mortar',\n  'drywall',\n  'floor',\n  'wood',\n  'woodMaple',\n  'bark',\n  'barkMaple',\n  'skin',\n  'plastic',\n  'grass',\n  'bush',\n  'leafMaple',\n  'pineNeedle',\n  'berry',\n  'pants',\n  'pantsRed',\n  'rock',\n  'cyberGlow',\n  'cyberPanel'\n] as const\n\nexport type CuratedMaterialType = typeof CuratedMaterialTypeStrings[number]\n\nexport const isCuratedMaterial = makeSafetyCheckFromConstStringArray(\n  CuratedMaterialTypeStrings\n)\n\nconst MaterialPassTypeStrings = [\n  'beauty',\n  'normals',\n  'depth',\n  'customColor',\n  'customEmissive',\n  // 'customNormal',\n  'customRoughnessMetalnessHeight',\n  'customTopDownHeight',\n  'pointLights'\n] as const\n\nexport type MaterialPassType = typeof MaterialPassTypeStrings[number]\n\nexport const isMaterialPass = makeSafetyCheckFromConstStringArray(\n  MaterialPassTypeStrings\n)\n\nexport const standardMaterialParamLib: {\n  [K in CuratedMaterialType]: MeshStandardMaterialParameters\n} = {\n  ground: {\n    roughness: 1,\n    color: new Color(0.16, 0.14, 0.13)\n  },\n  brick: {\n    roughness: 1,\n    color: new Color(0.5, 0.2, 0.15),\n    metalness: 0.3\n  },\n  gold: {\n    roughness: 0.3,\n    color: new Color(0.5, 0.4, 0),\n    metalness: 1,\n    emissive: new Color(0.05, 0, 0)\n  },\n  ironBlack: {\n    roughness: 0.1,\n    color: new Color(0.01, 0.01, 0.015),\n    metalness: 0.9\n  },\n  mortar: {\n    roughness: 1,\n    color: new Color(0.2, 0.2, 0.2)\n  },\n  drywall: {\n    roughness: 1,\n    color: new Color(0.8, 0.8, 0.8)\n  },\n  floor: {\n    roughness: 1,\n    color: new Color(0.4, 0.32, 0.25)\n  },\n  wood: {\n    roughness: 1,\n    color: new Color(0.6, 0.4, 0.3)\n  },\n  woodMaple: {\n    roughness: 1,\n    color: new Color(0.6, 0.4, 0.3).addScalar(0.1)\n  },\n  bark: {\n    roughness: 1,\n    metalness: 0.8,\n    color: new Color(0.6, 0.4, 0.3).addScalar(-0.3)\n  },\n  barkMaple: {\n    roughness: 1,\n    metalness: 0.8,\n    color: new Color(0.6, 0.4, 0.3).addScalar(-0.15)\n  },\n  skin: {\n    roughness: 1,\n    color: new Color(0.8, 0.4, 0.4)\n  },\n  plastic: {\n    roughness: 0.5,\n    color: new Color(0.2, 0.25, 0.4)\n  },\n  rock: {\n    roughness: 0.85,\n    metalness: 0.95,\n    color: new Color(0.2, 0.25, 0.2)\n  },\n  grass: {\n    roughness: 1,\n    metalness: 0.95,\n    color: new Color(0.2, 0.55, 0.2),\n    emissive: new Color(0.2, 0.55, 0.05).multiplyScalar(0.05),\n    wireframe: true,\n    side: DoubleSide,\n    opacity: 0.5\n  },\n  bush: {\n    roughness: 1,\n    metalness: 0.95,\n    color: new Color(0.125, 0.3, 0.125),\n    emissive: new Color(0.2, 0.55, 0.05).multiplyScalar(0.05),\n    // wireframe: true,\n    opacity: 0.5\n  },\n  leafMaple: {\n    roughness: 1,\n    metalness: 0.95,\n    color: new Color(0.75, 0.5, 0.125),\n    emissive: new Color(0.2, 0.55, 0.05).multiplyScalar(0.05),\n    // wireframe: true,\n    opacity: 0.5\n  },\n  pineNeedle: {\n    roughness: 0.8,\n    metalness: 0.95,\n    color: new Color(0.1, 0.3, 0.1),\n    emissive: new Color(0.1, 0.45, 0.05).multiplyScalar(0.05),\n    // wireframe: true,\n    opacity: 0.5\n  },\n  berry: {\n    roughness: 0.25,\n    metalness: 0.6,\n    color: new Color(0.6, 0.05, 0.1325),\n    opacity: 0.25\n    // wireframe: true\n  },\n  pants: {\n    roughness: 0.65,\n    color: new Color(0.2, 0.25, 0.4)\n  },\n  pantsRed: {\n    roughness: 0.65,\n    color: new Color(0.5, 0.1, 0.1)\n  },\n  cyberGlow: {\n    roughness: 0.65,\n    color: new Color(0.2, 0.2, 0.2),\n    emissive: new Color(0.05, 0.55, 0.15)\n  },\n  cyberPanel: {\n    roughness: 0.05,\n    metalness: 0.7,\n    color: new Color(0.1, 0.1, 0.1)\n  }\n}\n\nconst materialCache = new Map<string, Material>()\n\nfunction __makeMeshMaterial(name: CuratedMaterialType, pass: MaterialPassType) {\n  const standardParams = standardMaterialParamLib[name]\n  switch (pass) {\n    case 'beauty':\n      return new MeshStandardMaterial(standardParams)\n    case 'normals':\n      return new WorldNormalMeshMaterial({\n        wireframe: standardParams.wireframe\n      })\n      break\n    case 'depth':\n      return new MeshDepthMaterial({\n        wireframe: standardParams.wireframe\n      })\n      break\n    case 'customColor':\n      const c = new Color(standardParams.color)\n      return new BasicVec4MeshMaterial({\n        data: new Vector4(c.r, c.g, c.b, standardParams.opacity),\n        wireframe: standardParams.wireframe\n      })\n    case 'customEmissive':\n      const e = new Color(standardParams.emissive || 0)\n      return new BasicVec4MeshMaterial({\n        data: new Vector4(e.r, e.g, e.b, 1),\n        wireframe: standardParams.wireframe\n      })\n    case 'customRoughnessMetalnessHeight':\n      return new HeightMeshMaterial({\n        data: new Vector4(\n          defaultNumber(standardParams.roughness, 0.5),\n          defaultNumber(standardParams.metalness, 0.5),\n          1,\n          1\n        ),\n        heightChannel: 'b',\n        wireframe: standardParams.wireframe\n      })\n    case 'customTopDownHeight':\n      return new HeightMeshMaterial({\n        data: new Vector4(0, 0, 0, 1),\n        heightChannel: 'b',\n        wireframe: standardParams.wireframe\n      })\n    default:\n      throw new Error(`Please add implementation for ${pass}`)\n  }\n  throw new Error('Unknown material pass requested')\n}\nexport function getMeshMaterial(\n  name: CuratedMaterialType,\n  pass: MaterialPassType = 'beauty'\n) {\n  const key = `${name}:${pass}`\n  if (!materialCache.has(key)) {\n    const mat = __makeMeshMaterial(name, pass)\n    mat.name = name\n    materialCache.set(key, mat)\n  }\n  return materialCache.get(key)!.clone()\n}\n\nfunction __onBeforeRenderDoUpdateWorldNormals(\n  this: Mesh,\n  renderer: WebGLRenderer,\n  scene: Scene,\n  camera: Camera,\n  geometry: BufferGeometry,\n  material: WorldNormalMeshMaterial,\n  group: Group\n) {\n  const modelNormalMatrix = material.uniforms.uModelNormalMatrix\n    .value as Matrix3\n  modelNormalMatrix.getNormalMatrix(this.matrixWorld)\n}\nexport function changeMeshMaterials(\n  node: Object3D,\n  pass: MaterialPassType,\n  visibleOnly = false\n) {\n  if (!visibleOnly || (visibleOnly && node.visible)) {\n    if (node instanceof Mesh && node.material instanceof Material) {\n      if (isCuratedMaterial(node.material.name)) {\n        if (node.material instanceof WorldNormalMeshMaterial) {\n          node.onBeforeRender = NOOP\n        }\n        const mat = getMeshMaterial(node.material.name, pass)\n        node.material = mat\n        if (node.material instanceof WorldNormalMeshMaterial) {\n          node.onBeforeRender = __onBeforeRenderDoUpdateWorldNormals\n        }\n      }\n    }\n    for (const child of node.children) {\n      changeMeshMaterials(child, pass, visibleOnly)\n    }\n  }\n}\n", "import { DoubleSide, RawShaderMaterial, Uniform, Vector4 } from 'three'\nimport { buildParameters } from '~/utils/jsUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\ninterface Parameters {\n  data: Vector4\n  wireframe?: boolean\n}\n\nconst __defaultParams: Parameters = {\n  data: new Vector4(0.5, 0.5, 0.5, 0.5)\n}\n\nexport default class BasicVec4MeshMaterial extends RawShaderMaterial {\n  constructor(options: Partial<Parameters> = {}) {\n    const params = buildParameters(__defaultParams, options)\n    const uniforms = {\n      color: new Uniform(params.data)\n    }\n\n    super({\n      uniforms,\n      vertexShader,\n      fragmentShader,\n      // alphaTest: 0.5,\n      // transparent: true,\n      depthWrite: true,\n      depthTest: true,\n      side: DoubleSide,\n      wireframe: params.wireframe || false\n    })\n  }\n}\n", "export function boobyTrap<O, T extends keyof O>(\n  obj: O,\n  propName: T,\n  optionalSetCondition?: (value: O[T]) => boolean,\n  onGet = false\n) {\n  let _prop: O[T] = obj[propName]\n  Object.defineProperty(obj, propName, {\n    get: () => {\n      if (onGet) {\n        debugger\n      }\n      return _prop\n    },\n    set: (value: O[T]) => {\n      if (optionalSetCondition) {\n        if (optionalSetCondition(value)) {\n          debugger\n        }\n      } else {\n        debugger\n      }\n      _prop = value\n    }\n  })\n}\n\nexport const decorateMethodBefore = (\n  obj: any,\n  methodName: string,\n  newMethod: () => void\n) => {\n  const oldMethod = obj[methodName] as () => void\n  obj[methodName] = function decoratedMethodBefore(...args: any[]) {\n    newMethod.apply(this, args)\n    const result = oldMethod.apply(this, args)\n    return result\n  }\n  return () => {\n    obj[methodName] = oldMethod\n  }\n}\n\nexport const decorateMethodAfter = (\n  obj: any,\n  methodName: string,\n  newMethod: () => void\n) => {\n  const oldMethod = obj[methodName] as () => void\n  obj[methodName] = function decoratedMethodAfter(...args: any[]) {\n    const result = oldMethod.apply(this, args)\n    newMethod.apply(this, args)\n    return result\n  }\n  return () => {\n    obj[methodName] = oldMethod\n  }\n}\n\nexport function NOOP() {\n  // do nothing!\n}\n\nexport const iife = <T extends (...args: any[]) => any>(fn: T) => {\n  fn()\n  return fn\n}\n\nexport function notEmpty<TValue>(\n  value: TValue | null | undefined\n): value is TValue {\n  return value !== null && value !== undefined\n}\n\nexport function copyDefaults(onto: any, from: any) {\n  for (const key of Object.keys(from)) {\n    if (!onto.hasOwnProperty(key)) {\n      onto[key] = from[key]\n    }\n  }\n}\n\nexport function buildParameters<T>(defaults: T, options: Partial<T>) {\n  if (defaults === options) {\n    return defaults\n  }\n  const final: T = {} as any\n  for (const key in defaults) {\n    if (defaults[key] !== undefined) {\n      final[key] = defaults[key]!\n    }\n  }\n  for (const key in options) {\n    if (options[key] !== undefined) {\n      final[key] = options[key]!\n    }\n  }\n  return final\n}\n\nexport function defaultNumber(val: number | undefined, defVal: number) {\n  return val !== undefined ? val : defVal\n}\n\nexport function lockProp(target: any, propName: string) {\n  const _value = target[propName]\n  Object.defineProperty(target, propName, {\n    get() {\n      return _value\n    },\n    set(val) {\n      //console.warn(propName + ' change prevented.')\n    }\n  })\n}\n\nexport function unlockProp(target: any, propName: string) {\n  let _value = target[propName]\n  Object.defineProperty(target, propName, {\n    get() {\n      return _value\n    },\n    set(val) {\n      _value = val\n    }\n  })\n}\n\nexport function getRandomProperty(obj: any) {\n  const keys = Object.keys(obj)\n  return obj[keys[~~(Math.random() * keys.length) % keys.length]]\n}\n\nexport function reverseLookupInMap<K, V>(map: Map<K, V>, val: V) {\n  for (const [key, v] of map.entries()) {\n    if (v === val) {\n      return key\n    }\n  }\n  return undefined\n}\n\nexport class NamedJob {\n  constructor(public name: string, public job: () => void) {\n    //\n  }\n}\n", "import { DoubleSide, RawShaderMaterial, Uniform, Vector4 } from 'three'\nimport { buildParameters } from '~/utils/jsUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\ninterface Parameters {\n  data: Vector4\n  heightChannel: 'r' | 'g' | 'b'\n  wireframe?: boolean\n}\n\nconst __defaultParams: Parameters = {\n  data: new Vector4(0.5, 0.5, 0.5, 0.5),\n  heightChannel: 'b'\n}\n\nexport class HeightMeshMaterial extends RawShaderMaterial {\n  constructor(options: Partial<Parameters> = {}) {\n    const params = buildParameters(__defaultParams, options)\n    const uniforms = {\n      color: new Uniform(params.data)\n    }\n    const defines = {\n      HEIGHT_CHANNEL: params.heightChannel\n    }\n\n    super({\n      uniforms,\n      defines,\n      vertexShader,\n      fragmentShader,\n      depthWrite: true,\n      depthTest: true,\n      side: DoubleSide,\n      wireframe: params.wireframe || false\n    })\n  }\n}\n", "import { DoubleSide, Matrix3, RawShaderMaterial, Uniform } from 'three'\nimport { buildParameters } from '~/utils/jsUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\ninterface Parameters {\n  wireframe?: boolean\n}\n\nconst __defaultParams: Parameters = {}\n\nexport class WorldNormalMeshMaterial extends RawShaderMaterial {\n  modelNormalMatrix: Matrix3\n  constructor(options: Partial<Parameters> = {}) {\n    const modelNormalMatrix = new Matrix3()\n    modelNormalMatrix.elements[0] = Math.random()\n    modelNormalMatrix.elements[1] = Math.random()\n    modelNormalMatrix.elements[2] = Math.random()\n    modelNormalMatrix.elements[3] = Math.random()\n    modelNormalMatrix.elements[4] = Math.random()\n    const params = buildParameters(__defaultParams, options)\n    const uniforms = {\n      uModelNormalMatrix: new Uniform(modelNormalMatrix)\n    }\n    super({\n      uniforms,\n      vertexShader,\n      fragmentShader,\n      depthWrite: true,\n      depthTest: true,\n      side: DoubleSide,\n      wireframe: params.wireframe || false\n    })\n    this.modelNormalMatrix = this.uniforms.uModelNormalMatrix.value\n  }\n}\n", "export function makeSafetyCheckFromConstStringArray<\n  T extends { [index: number]: string }\n>(arr: Exclude<T, Array<string>>) {\n  type SpecificString = typeof arr[number]\n  return function safe(x: string): x is SpecificString {\n    return Array.prototype.includes.call(arr, x)\n  }\n}\n", "import { SphereBufferGeometry, Vector3 } from 'three'\n\nimport { inferDirection } from './math'\n\nexport function getChamferedBoxGeometry(\n  width: number,\n  height: number,\n  depth: number,\n  chamfer = 0.005\n) {\n  const geo = new SphereBufferGeometry(0.02, 8, 5, Math.PI * 0.125)\n  const posArr = geo.attributes.position.array as number[]\n  const normArr = geo.attributes.normal.array as number[]\n  const tempVec = new Vector3()\n  const tempPos = new Vector3()\n  const halfWidth = width * 0.5 - chamfer\n  const halfHeight = height * 0.5 - chamfer\n  const halfDepth = depth * 0.5 - chamfer\n  for (let i3 = 0; i3 < normArr.length; i3 += 3) {\n    tempVec.fromArray(normArr, i3)\n    tempPos.fromArray(posArr, i3)\n    tempVec.round()\n    if (tempVec.y === 1) {\n      tempVec.set(0, 1, 0)\n    }\n    if (tempVec.y === -1) {\n      tempVec.set(0, -1, 0)\n    }\n    tempVec.toArray(normArr, i3)\n    tempVec.multiplyScalar(chamfer)\n    tempVec.x += halfWidth * inferDirection(tempPos.x)\n    tempVec.y += halfHeight * inferDirection(tempPos.y)\n    tempVec.z += halfDepth * inferDirection(tempPos.z)\n    tempVec.toArray(posArr, i3)\n  }\n  return geo\n}\n\nconst __cachedChamferedBoxGeometry = new Map<string, SphereBufferGeometry>()\nexport function getCachedChamferedBoxGeometry(\n  width: number,\n  height: number,\n  depth: number,\n  chamfer = 0.005\n) {\n  const key = `${width};${height};${depth};${chamfer};`\n  if (!__cachedChamferedBoxGeometry.has(key)) {\n    __cachedChamferedBoxGeometry.set(\n      key,\n      getChamferedBoxGeometry(width, height, depth, chamfer)\n    )\n  }\n  return __cachedChamferedBoxGeometry.get(key)!\n}\n", "import { Material, Mesh, Object3D, Vector3 } from 'three'\nimport { getCachedChamferedBoxGeometry } from '../utils/geometry'\nimport { detRandRocks } from '../utils/random'\n\nconst tiltRange = 0.2\n\nexport function makeRocks(mat: Material, scale = 0, chamfer = 0.5) {\n  const pivot = new Object3D()\n  const pos = new Vector3()\n  for (let i = 0; i < 80; i++) {\n    pos\n      .set(detRandRocks(-1, 1), detRandRocks(0, 1), detRandRocks(-1, 1))\n      .normalize()\n    if (pos.x + pos.z > 1) {\n      continue\n    }\n    const size = ~~detRandRocks(6, 16) + scale * 0.5\n    const rocks = new Mesh(\n      getCachedChamferedBoxGeometry(size, 4, size * 0.5, chamfer),\n      mat\n    )\n    rocks.rotation.z = Math.PI * -0.25\n    rocks.position.copy(pos)\n    rocks.position.multiplyScalar(12)\n    rocks.position.y += scale - 4\n    rocks.rotation.x += detRandRocks(-tiltRange, tiltRange)\n    rocks.rotation.y += detRandRocks(-tiltRange, tiltRange)\n    rocks.rotation.z += detRandRocks(-tiltRange, tiltRange)\n    pivot.add(rocks)\n  }\n  pivot.rotation.y = Math.PI * -0.1\n  return pivot\n}\n", "import { Material, Mesh, Object3D, Vector3 } from 'three'\nimport { getCachedChamferedBoxGeometry } from '../utils/geometry'\nimport { detRandRocks } from '../utils/random'\n\nconst tiltRange = 0.3\n\nexport function makeRockCrumbs(mat: Material, chamfer = 0.5) {\n  const pivot = new Object3D()\n  const pos = new Vector3()\n  for (let i = 0; i < 20; i++) {\n    pos.set(detRandRocks(-1, 1), 0, detRandRocks(-1, 1))\n    if (pos.x + pos.z > 1) {\n      continue\n    }\n    const size = ~~detRandRocks(2, 5)\n    const rocks = new Mesh(\n      getCachedChamferedBoxGeometry(size, 4, size * 0.5, chamfer),\n      mat\n    )\n    rocks.rotation.z = Math.PI * -0.25\n    rocks.position.copy(pos)\n    rocks.position.multiplyScalar(12)\n    rocks.rotation.x += detRandRocks(-tiltRange, tiltRange)\n    rocks.rotation.y += detRandRocks(-tiltRange, tiltRange)\n    rocks.rotation.z += detRandRocks(-tiltRange, tiltRange)\n    pivot.add(rocks)\n  }\n  pivot.rotation.y = Math.PI * -0.1\n  return pivot\n}\n", "import {\n  BufferGeometry,\n  CylinderBufferGeometry,\n  Material,\n  Mesh,\n  Object3D,\n  Vector3\n} from 'three'\nimport {\n  getCachedChamferedBoxGeometry,\n  getChamferedBoxGeometry\n} from '../utils/geometry'\nimport { detRandTrees } from '../utils/random'\n\nexport function makeTreePineStumpMature(matBark: Material, matWood: Material) {\n  const tiltRange = 0.1\n  const height = 10\n  const baseRadius = 5\n  const pivot = new Object3D()\n\n  //trunk\n  const wood = new Mesh(\n    new CylinderBufferGeometry(baseRadius, baseRadius, height, 16),\n    matWood\n  )\n  pivot.add(wood)\n  wood.position.y = height * 0.5\n  for (let i = 0; i < 80; i++) {\n    const size = ~~detRandTrees(6, 8)\n    const bark = new Mesh(getCachedChamferedBoxGeometry(2, size, 4, 1), matBark)\n    bark.rotation.order = 'YXZ'\n    const y = Math.pow(detRandTrees(), 2)\n    const tiltAmt = Math.pow(1 - y, 4)\n    const radius = baseRadius + tiltAmt * 8 + Math.round(detRandTrees(0, 2))\n    const angle = detRandTrees(0, Math.PI * 2)\n    bark.position.set(\n      Math.cos(angle) * radius,\n      y * height,\n      Math.sin(angle) * radius\n    )\n    bark.rotation.y = -angle\n    bark.rotation.z = tiltAmt * 1\n    bark.rotation.x += detRandTrees(-tiltRange, tiltRange)\n    bark.rotation.y += detRandTrees(-tiltRange, tiltRange)\n    bark.rotation.z += detRandTrees(-tiltRange, tiltRange)\n    pivot.add(bark)\n  }\n  return pivot\n}\n\nexport function makeTreePineStump(matBark: Material, matWood: Material) {\n  const tiltRange = 0.1\n  const height = 5\n  const baseRadius = 3\n  const pivot = new Object3D()\n\n  //trunk\n  const wood = new Mesh(\n    new CylinderBufferGeometry(baseRadius, baseRadius, height, 16),\n    matWood\n  )\n  pivot.add(wood)\n  wood.position.y = height * 0.5\n  for (let i = 0; i < 60; i++) {\n    const size = ~~detRandTrees(3, 5)\n    const bark = new Mesh(getCachedChamferedBoxGeometry(2, size, 4, 1), matBark)\n    bark.rotation.order = 'YXZ'\n    const y = Math.pow(detRandTrees(), 2)\n    const tiltAmt = Math.pow(1 - y, 4)\n    const radius = baseRadius + tiltAmt * 8 + Math.round(detRandTrees(0, 2))\n    const angle = detRandTrees(0, Math.PI * 2)\n    bark.position.set(\n      Math.cos(angle) * radius,\n      y * height,\n      Math.sin(angle) * radius\n    )\n    bark.rotation.y = -angle\n    bark.rotation.z = tiltAmt * 1\n    bark.rotation.x += detRandTrees(-tiltRange, tiltRange)\n    bark.rotation.y += detRandTrees(-tiltRange, tiltRange)\n    bark.rotation.z += detRandTrees(-tiltRange, tiltRange)\n    pivot.add(bark)\n  }\n  return pivot\n}\n\nexport function makeTreePineMature(\n  matBark: Material,\n  matLeaf: Material,\n  matWood: Material\n) {\n  const tiltRange = 0.1\n  const height = 32\n  const baseRadius = 5\n  const baseRadiusInner = baseRadius - 1\n  const pivot = new Object3D()\n\n  //trunk\n  const wood = new Mesh(\n    new CylinderBufferGeometry(baseRadius, baseRadius, height, 16),\n    matWood\n  )\n  pivot.add(wood)\n  wood.position.y = height * 0.5\n  for (let i = 0; i < 260; i++) {\n    const size = ~~detRandTrees(6, 8)\n    const bark = new Mesh(getCachedChamferedBoxGeometry(2, size, 4, 1), matBark)\n    bark.rotation.order = 'YXZ'\n    const y = Math.pow(detRandTrees(), 2)\n    const tiltAmt = Math.pow(1 - y, 4)\n    const radius = baseRadius + tiltAmt * 8 + Math.round(detRandTrees(0, 2))\n    const angle = detRandTrees(0, Math.PI * 2)\n    bark.position.set(\n      Math.cos(angle) * radius,\n      y * height,\n      Math.sin(angle) * radius\n    )\n    bark.rotation.y = -angle\n    bark.rotation.z = tiltAmt * 1\n    bark.rotation.x += detRandTrees(-tiltRange, tiltRange)\n    bark.rotation.y += detRandTrees(-tiltRange, tiltRange)\n    bark.rotation.z += detRandTrees(-tiltRange, tiltRange)\n    pivot.add(bark)\n  }\n\n  //branches\n  const pineNeedleProto = new Mesh(__getNeedleGeo(), matLeaf)\n  const twigLength = 4\n  const twigProto = new Mesh(__getTwigGeo(twigLength), matBark)\n  __addPineNeedles(twigProto, pineNeedleProto, twigLength)\n\n  const tLayer = 2\n  for (let iLayer = 0; iLayer < tLayer; iLayer++) {\n    const lRatio = iLayer / tLayer\n    const tB = 7\n    for (let iB = 0; iB < tB; iB++) {\n      const bRatio = (iB + lRatio) / tB\n      const aB = Math.PI * 2 * bRatio\n      const branch = new Object3D()\n\n      let lastTwig = branch\n      const tTwig = 9 - iLayer * 2\n      for (let iTwig = 0; iTwig < tTwig; iTwig++) {\n        const twigTilt = 0.05 * iTwig\n        const newTwig = twigProto.clone()\n        lastTwig.add(newTwig)\n        newTwig.rotation.x = detRandTrees(-twigTilt, twigTilt)\n        newTwig.rotation.z = detRandTrees(-twigTilt, twigTilt)\n        newTwig.rotation.y = Math.PI\n        newTwig.position.y = twigLength\n        lastTwig = newTwig\n      }\n      pivot.add(branch)\n      branch.position.set(\n        Math.cos(aB) * baseRadiusInner,\n        25 + iLayer * 8,\n        Math.sin(aB) * baseRadiusInner\n      )\n      branch.rotation.z = -Math.PI * 0.65\n      branch.rotation.y = aB\n      // branch.rotation.order = 'XZY'\n    }\n  }\n  return pivot\n}\n\nexport function makeTreePine(matBark: Material, matLeaf: Material) {\n  const tiltRange = 0.1\n  const height = 32\n  const baseRadius = 0\n  const baseRadiusInner = baseRadius - 1\n\n  const pivot = new Object3D()\n  for (let i = 0; i < 160; i++) {\n    const size = ~~detRandTrees(6, 8)\n    const bark = new Mesh(getCachedChamferedBoxGeometry(2, size, 4, 1), matBark)\n    bark.rotation.order = 'YXZ'\n    const y = Math.pow(detRandTrees(), 2)\n    const tiltAmt = Math.pow(1 - y, 4)\n    const radius = baseRadius + tiltAmt * 8 + Math.round(detRandTrees(0, 2))\n    const angle = detRandTrees(0, Math.PI * 2)\n    bark.position.set(\n      Math.cos(angle) * radius,\n      y * height,\n      Math.sin(angle) * radius\n    )\n    bark.rotation.y = -angle\n    bark.rotation.z = tiltAmt * 1\n    bark.rotation.x += detRandTrees(-tiltRange, tiltRange)\n    bark.rotation.y += detRandTrees(-tiltRange, tiltRange)\n    bark.rotation.z += detRandTrees(-tiltRange, tiltRange)\n    pivot.add(bark)\n  }\n\n  //branches\n  const twigLength = 5\n  const pineNeedleProto = new Mesh(__getNeedleGeo(), matLeaf)\n  const twigProto = new Mesh(__getTwigGeo(twigLength), matBark)\n  __addPineNeedles(twigProto, pineNeedleProto, twigLength)\n\n  const tLayer = 3\n  for (let iLayer = 0; iLayer < tLayer; iLayer++) {\n    const lRatio = iLayer / tLayer\n    const tB = 9 - iLayer * 2\n    for (let iB = 0; iB < tB; iB++) {\n      const bRatio = (iB + lRatio) / tB\n      const aB = Math.PI * 2 * bRatio\n      const branch = new Object3D()\n\n      branch.scale.multiplyScalar(0.75)\n      let lastTwig = branch\n      const tTwig = 7 - iLayer * 2\n      for (let iTwig = 0; iTwig < tTwig; iTwig++) {\n        const twigTilt = 0.05 * iTwig\n        const newTwig = twigProto.clone()\n        lastTwig.add(newTwig)\n        newTwig.rotation.x = detRandTrees(-twigTilt, twigTilt)\n        newTwig.rotation.z = detRandTrees(-twigTilt, twigTilt)\n        newTwig.rotation.y = Math.PI\n        newTwig.position.y = twigLength\n        lastTwig = newTwig\n      }\n      pivot.add(branch)\n      branch.position.set(\n        Math.cos(aB) * baseRadiusInner,\n        25 + iLayer * 8,\n        Math.sin(aB) * baseRadiusInner\n      )\n      branch.rotation.z = -Math.PI * (0.75 + iLayer * 0.1)\n      branch.rotation.y = aB\n      // branch.rotation.order = 'XZY'\n    }\n  }\n\n  const topperPivot = new Object3D()\n  const topperProto = new Object3D()\n  __addPineNeedles(topperProto, pineNeedleProto, 0)\n  pivot.add(topperPivot)\n  topperPivot.position.y = height + 14\n  topperPivot.rotation.x = Math.PI\n  for (let i = 0; i < 3; i++) {\n    const newTopper = topperProto.clone()\n    newTopper.rotation.y = i * Math.PI\n    newTopper.position.y = i * 3\n    newTopper.scale.setScalar(0.5 + i * 0.3)\n    topperPivot.add(newTopper)\n  }\n  return pivot\n}\n\nlet __needleGeo: BufferGeometry | undefined\nfunction __getNeedleGeo() {\n  if (!__needleGeo) {\n    __needleGeo = getChamferedBoxGeometry(2, 4, 2, 1)\n    const posArr = __needleGeo.attributes.position.array as number[]\n    const vec = new Vector3()\n    for (let i3 = 0; i3 < posArr.length; i3 += 3) {\n      vec.fromArray(posArr, i3)\n      vec.y = (vec.y + 2) * 3\n      vec.toArray(posArr, i3)\n    }\n  }\n  return __needleGeo\n}\n\nfunction __addPineNeedles(\n  target: Object3D,\n  pineNeedleProto: Mesh,\n  offsetY: number\n) {\n  const tNeedles = 5\n  const needleTilt = 0.5\n  for (let i = 0; i < tNeedles; i++) {\n    const a = (Math.PI * 2 * i) / tNeedles\n    const x = Math.cos(a) * needleTilt\n    const y = Math.sin(a) * needleTilt\n    const pineNeedle = pineNeedleProto.clone()\n    pineNeedle.position.y = offsetY\n    pineNeedle.rotation.x = x\n    pineNeedle.rotation.z = y\n    target.add(pineNeedle)\n  }\n}\n\nconst __twigGeos = new Map<number, CylinderBufferGeometry>()\nfunction __getTwigGeo(twigLength) {\n  if (!__twigGeos.has(twigLength)) {\n    const twigGeo = new CylinderBufferGeometry(1, 1, twigLength, 8, 1)\n    const twigPosArr = twigGeo.attributes.position.array as number[]\n    const vec = new Vector3()\n    for (let i3 = 0; i3 < twigPosArr.length; i3 += 3) {\n      vec.fromArray(twigPosArr, i3)\n      vec.y += twigLength * 0.5\n      vec.toArray(twigPosArr, i3)\n    }\n    __twigGeos.set(twigLength, twigGeo)\n  }\n  return __twigGeos.get(twigLength)\n}\n", "import {\n  BufferGeometry,\n  CylinderBufferGeometry,\n  Material,\n  Mesh,\n  Object3D,\n  Quaternion,\n  Vector3\n} from 'three'\nimport {\n  getCachedChamferedBoxGeometry,\n  getChamferedBoxGeometry\n} from '../utils/geometry'\nimport { detRandTreesMaple } from '../utils/random'\n\nexport function makeTreeMapleStumpMature(matBark: Material, matWood: Material) {\n  const tiltRange = 0.1\n  const height = 10\n  const baseRadius = 5\n  const pivot = new Object3D()\n\n  //trunk\n  const wood = new Mesh(\n    new CylinderBufferGeometry(baseRadius, baseRadius, height, 16),\n    matWood\n  )\n  pivot.add(wood)\n  wood.position.y = height * 0.5\n  for (let i = 0; i < 80; i++) {\n    const size = ~~detRandTreesMaple(6, 8)\n    const bark = new Mesh(getCachedChamferedBoxGeometry(2, size, 4, 1), matBark)\n    bark.rotation.order = 'YXZ'\n    const y = Math.pow(detRandTreesMaple(), 2)\n    const tiltAmt = Math.pow(1 - y, 4)\n    const radius =\n      baseRadius + tiltAmt * 8 + Math.round(detRandTreesMaple(0, 2))\n    const angle = detRandTreesMaple(0, Math.PI * 2)\n    bark.position.set(\n      Math.cos(angle) * radius,\n      y * height,\n      Math.sin(angle) * radius\n    )\n    bark.rotation.y = -angle\n    bark.rotation.z = tiltAmt * 1\n    bark.rotation.x += detRandTreesMaple(-tiltRange, tiltRange)\n    bark.rotation.y += detRandTreesMaple(-tiltRange, tiltRange)\n    bark.rotation.z += detRandTreesMaple(-tiltRange, tiltRange)\n    pivot.add(bark)\n  }\n  return pivot\n}\n\nexport function makeTreeMapleStump(matBark: Material, matWood: Material) {\n  const tiltRange = 0.1\n  const height = 5\n  const baseRadius = 3\n  const pivot = new Object3D()\n\n  //trunk\n  const wood = new Mesh(\n    new CylinderBufferGeometry(baseRadius, baseRadius, height, 16),\n    matWood\n  )\n  pivot.add(wood)\n  wood.position.y = height * 0.5\n  for (let i = 0; i < 60; i++) {\n    const size = ~~detRandTreesMaple(3, 5)\n    const bark = new Mesh(getCachedChamferedBoxGeometry(2, size, 4, 1), matBark)\n    bark.rotation.order = 'YXZ'\n    const y = Math.pow(detRandTreesMaple(), 2)\n    const tiltAmt = Math.pow(1 - y, 4)\n    const radius =\n      baseRadius + tiltAmt * 8 + Math.round(detRandTreesMaple(0, 2))\n    const angle = detRandTreesMaple(0, Math.PI * 2)\n    bark.position.set(\n      Math.cos(angle) * radius,\n      y * height,\n      Math.sin(angle) * radius\n    )\n    bark.rotation.y = -angle\n    bark.rotation.z = tiltAmt * 1\n    bark.rotation.x += detRandTreesMaple(-tiltRange, tiltRange)\n    bark.rotation.y += detRandTreesMaple(-tiltRange, tiltRange)\n    bark.rotation.z += detRandTreesMaple(-tiltRange, tiltRange)\n    pivot.add(bark)\n  }\n  return pivot\n}\n\nexport function makeTreeMapleMature(\n  matBark: Material,\n  matLeaf: Material,\n  matWood: Material\n) {\n  const tiltRange = 0.1\n  const height = 32\n  const baseRadius = 5\n  const baseRadiusInner = baseRadius - 1\n  const pivot = new Object3D()\n\n  //trunk\n  const wood = new Mesh(\n    new CylinderBufferGeometry(baseRadius, baseRadius, height, 16),\n    matWood\n  )\n  pivot.add(wood)\n  wood.position.y = height * 0.5\n  for (let i = 0; i < 260; i++) {\n    const size = ~~detRandTreesMaple(6, 8)\n    const bark = new Mesh(getCachedChamferedBoxGeometry(2, size, 4, 1), matBark)\n    bark.rotation.order = 'YXZ'\n    const y = Math.pow(detRandTreesMaple(), 2)\n    const tiltAmt = Math.pow(1 - y, 4)\n    const radius =\n      baseRadius + tiltAmt * 8 + Math.round(detRandTreesMaple(0, 2))\n    const angle = detRandTreesMaple(0, Math.PI * 2)\n    bark.position.set(\n      Math.cos(angle) * radius,\n      y * height,\n      Math.sin(angle) * radius\n    )\n    bark.rotation.y = -angle\n    bark.rotation.z = tiltAmt * 1\n    bark.rotation.x += detRandTreesMaple(-tiltRange, tiltRange)\n    bark.rotation.y += detRandTreesMaple(-tiltRange, tiltRange)\n    bark.rotation.z += detRandTreesMaple(-tiltRange, tiltRange)\n    pivot.add(bark)\n  }\n\n  return pivot\n}\n\nexport function makeTreeMaple(matBark: Material, matLeaf: Material) {\n  const cylinderGeo = __getTwigGeo(0.8, 1, 1, 16)\n\n  function getChunk(radius: number, height: number) {\n    const cylinder = new Mesh(cylinderGeo, matBark)\n    cylinder.scale.set(radius, height, radius)\n    cylinder.rotation.x = Math.PI * 0.5\n    const cylinderPivot = new Object3D()\n    cylinderPivot.add(cylinder)\n    return cylinderPivot\n  }\n  const tiltRange = 0.05\n  const height = 32\n  const baseRadius = 0\n  const baseRadiusInner = baseRadius - 1\n\n  const leafProto = new Mesh(__getLeafGeo(), matLeaf)\n\n  const pivot = new Object3D()\n  const base = new Object3D()\n  const vec1 = new Vector3(0, 100, 0)\n  base.lookAt(vec1)\n  pivot.add(base)\n  //   pivot.rotation.y = 2\n  function grow(\n    lastChunk: Object3D,\n    radius: number,\n    length: number,\n    growthEnergy = 0,\n    isNew = false\n  ) {\n    growthEnergy += 0.05\n    const tiltRangeLocal = tiltRange + growthEnergy\n    if (radius > 1) {\n      radius -= 0.3\n      const newChunk = getChunk(radius, length)\n      lastChunk.add(newChunk)\n      // newChunk.rotation.z = detRandTreesMaple(0, Math.PI * 2)\n      if (!isNew) {\n        newChunk.position.z = length - 1\n      }\n      newChunk.rotation.x = detRandTreesMaple(-tiltRangeLocal, tiltRangeLocal)\n      newChunk.rotation.y = detRandTreesMaple(-tiltRangeLocal, tiltRangeLocal)\n      newChunk.rotation.z = detRandTreesMaple(0, Math.PI * 20)\n      newChunk.updateMatrixWorld()\n      const quat1 = new Quaternion()\n      quat1.setFromEuler(newChunk.rotation)\n      newChunk.lookAt(vec1)\n      newChunk.quaternion.slerp(quat1, 0.85)\n      grow(newChunk, radius, length, growthEnergy)\n      if (detRandTreesMaple(0.05, 1) < growthEnergy - (radius - 4) * 0.2) {\n        growthEnergy = -0.025\n        const newGrowth = new Object3D()\n        newGrowth.rotation.order = 'XYZ'\n        newGrowth.rotation.x = Math.PI * 0.25\n        newChunk.rotation.x = -Math.PI * 0.25\n        lastChunk.add(newGrowth)\n        grow(newGrowth, radius, length, growthEnergy, true)\n      }\n    } else {\n      __addLeaves(lastChunk, leafProto, length - 1)\n    }\n  }\n  grow(base, 6.5, 7, 0.0, true)\n  pivot.rotation.y = Math.PI * -0.4\n  pivot.scale.multiplyScalar(0.75)\n  pivot.scale.y *= 0.7\n  return pivot\n}\n\nconst __twigGeos = new Map<string, CylinderBufferGeometry>()\nfunction __getTwigGeo(\n  radiusTop: number,\n  radiusBottom: number,\n  length: number,\n  radialSegs: number\n) {\n  const key = `${radiusTop}:${radiusBottom}:${length}:${radialSegs}`\n  if (!__twigGeos.has(key)) {\n    const twigGeo = new CylinderBufferGeometry(\n      radiusTop,\n      radiusBottom,\n      length,\n      radialSegs,\n      1\n    )\n    const twigPosArr = twigGeo.attributes.position.array as number[]\n    const vec = new Vector3()\n    for (let i3 = 0; i3 < twigPosArr.length; i3 += 3) {\n      vec.fromArray(twigPosArr, i3)\n      vec.y += length * 0.5\n      vec.toArray(twigPosArr, i3)\n    }\n    __twigGeos.set(key, twigGeo)\n  }\n  return __twigGeos.get(key)\n}\n\nlet __leafGeo: BufferGeometry | undefined\nfunction __getLeafGeo() {\n  if (!__leafGeo) {\n    __leafGeo = getChamferedBoxGeometry(3, 3, 4, 1)\n    const posArr = __leafGeo.attributes.position.array as number[]\n    const vec = new Vector3()\n    for (let i3 = 0; i3 < posArr.length; i3 += 3) {\n      vec.fromArray(posArr, i3)\n      vec.z = (vec.z + 2) * 3\n      vec.toArray(posArr, i3)\n    }\n  }\n  return __leafGeo\n}\n\nfunction __addLeaves(target: Object3D, leafProto: Mesh, offsetY: number) {\n  const tLeaves = 7\n  const leafTilt = 0.8\n  for (let i = 0; i < tLeaves; i++) {\n    const a = (Math.PI * 2 * i) / tLeaves\n    const x = Math.cos(a) * leafTilt\n    const y = Math.sin(a) * leafTilt\n    const leaf = leafProto.clone()\n    leaf.position.z = offsetY\n    leaf.rotation.x = x\n    leaf.rotation.y = y\n    target.add(leaf)\n  }\n}\n", "import { BufferGeometry, Material, Mesh, Object3D, Vector3 } from 'three'\nimport { longLatToXYZ, pointOnSphereFibonacci, rand2 } from '../utils/math'\n\nexport function makeGoldPile(\n  goldChunkGeo: BufferGeometry,\n  goldMat: Material,\n  radius = 16,\n  knobs = 170,\n  y = -12\n) {\n  const goldPile = new Object3D()\n  const goldChunk = new Mesh(goldChunkGeo, goldMat)\n  const pos = new Vector3()\n  for (let i = 0; i < knobs; i++) {\n    pos.fromArray(longLatToXYZ(pointOnSphereFibonacci(i, knobs), radius))\n    if (pos.y > -y) {\n      const goldCoin = goldChunk.clone()\n      goldCoin.scale.y *= 0.2\n      goldCoin.position.copy(pos)\n      goldCoin.rotation.set(rand2(0.2), rand2(0.2), rand2(0.2))\n      goldPile.add(goldCoin)\n    }\n  }\n  goldPile.position.y += y\n  return goldPile\n}\n", "import {\n  CylinderBufferGeometry,\n  Material,\n  Mesh,\n  Object3D,\n  TorusBufferGeometry\n} from 'three'\nimport { getChamferedBoxGeometry } from '../utils/geometry'\n\nexport function makeLampPost(ironBlackMat: Material) {\n  const lampPost = new Object3D()\n  const ironCylinder = new Mesh(\n    new CylinderBufferGeometry(0.5, 0.5, 1, 16, 1),\n    ironBlackMat\n  )\n  const cylPosArr = ironCylinder.geometry.attributes.position.array as number[]\n  for (let i = 1; i < cylPosArr.length; i += 3) {\n    cylPosArr[i] += 0.5\n  }\n  const ring = new Mesh(\n    new TorusBufferGeometry(0.45, 0.1, 32, 16),\n    ironBlackMat\n  )\n  const lampPole = ironCylinder.clone()\n  lampPost.add(lampPole)\n  lampPole.scale.set(6, 12, 6)\n  const lampPole2 = ironCylinder.clone()\n  lampPole2.scale.set(3, 39, 3)\n  lampPost.add(lampPole2)\n  const middleRing = ring.clone()\n  middleRing.scale.set(8, 8, 8)\n  middleRing.position.y = 12\n  middleRing.rotation.x = Math.PI * 0.5\n  lampPost.add(middleRing)\n  const middleRing2 = middleRing.clone()\n  middleRing2.position.y = 2\n  lampPost.add(middleRing2)\n  // const middleRing3 = middleRing.clone()\n  // middleRing3.position.y = 32\n  // lampPost.add(middleRing3)\n  const lampPole3 = lampPole2.clone()\n  lampPole3.scale.set(2, 9, 2)\n  lampPole3.position.y = 38\n  lampPole3.rotation.z = Math.PI * -0.25\n  lampPost.add(lampPole3)\n  const lampPole4 = lampPole2.clone()\n  lampPole4.scale.set(2, 6, 2)\n  lampPole4.position.x = 6\n  lampPole4.position.y = 44\n  lampPole4.rotation.z = Math.PI * -0.5\n  lampPost.add(lampPole4)\n  const lampShade = new Mesh(getChamferedBoxGeometry(8, 4, 8, 2), ironBlackMat)\n  lampShade.position.set(12, 43, 0)\n  lampPost.add(lampShade)\n  // const middleRing4 = middleRing.clone()\n  // middleRing4.position.y = 44\n  // lampPost.add(middleRing4)\n  // const topper = new Mesh(new ConeBufferGeometry(10, 4, 6), ironBlackMat)\n  // topper.position.y = 42\n  // lampPost.add(topper)\n  return lampPost\n}\n", "import { Material, Mesh, Object3D } from 'three'\nimport { verticalScale } from '../constants'\nimport FibonacciSphereGeometry from '../geometries/FibonacciSphereGeometry'\nimport { longLatToXYZ, pointOnSphereFibonacci } from '../utils/math'\nimport { detRandGraphics } from '../utils/random'\n\nlet bushGeoA3: FibonacciSphereGeometry | undefined\nfunction getBushGeoA3() {\n  if (!bushGeoA3) {\n    bushGeoA3 = new FibonacciSphereGeometry(2, 8)\n  }\n  return bushGeoA3\n}\n\nlet berryGeo: FibonacciSphereGeometry | undefined\nfunction getBerryGeo() {\n  if (!berryGeo) {\n    berryGeo = new FibonacciSphereGeometry(3, 15)\n  }\n  return berryGeo\n}\n\nexport class BushProps {\n  constructor(\n    public radius1 = 7,\n    public radius2 = 4,\n    public knobs = 16,\n    public knobs2 = 30,\n    public y = 11\n  ) {\n    //\n  }\n}\n\nconst defaultBushProps = new BushProps()\n\nexport function makeRecursiveBush(\n  bushMat: Material,\n  berryMat: Material,\n  bushProps: BushProps = defaultBushProps\n) {\n  const bushC = new Object3D()\n  const bushC2Proto = new Object3D()\n  const bushC3Proto = new Mesh(getBushGeoA3(), bushMat)\n\n  for (let i = 0; i < bushProps.knobs2; i++) {\n    const bushC3 = bushC3Proto.clone()\n    bushC3.position.fromArray(\n      longLatToXYZ(\n        pointOnSphereFibonacci(i, bushProps.knobs2),\n        bushProps.radius2\n      )\n    )\n    bushC3.rotation.set(\n      detRandGraphics(-Math.PI, Math.PI),\n      detRandGraphics(-Math.PI, Math.PI),\n      detRandGraphics(-Math.PI, Math.PI)\n    )\n    bushC2Proto.add(bushC3)\n  }\n  for (let i = 0; i < bushProps.knobs; i++) {\n    const bushC2 = bushC2Proto.clone(true)\n    bushC2.position.fromArray(\n      longLatToXYZ(\n        pointOnSphereFibonacci(i, bushProps.knobs),\n        bushProps.radius1\n      )\n    )\n    bushC.add(bushC2)\n    // bushC2.scale.multiplyScalar(rand2(0.8, 1.2))\n  }\n  bushC.traverse((obj) => {\n    if (detRandGraphics() > 0.975 && obj instanceof Mesh) {\n      obj.geometry = getBerryGeo()\n      obj.material = berryMat\n      // obj.scale.multiplyScalar(5.75) //do not scale for now, this will mess up (weaken) normals for some reason\n      obj.position.multiplyScalar(1.15)\n    }\n  })\n  bushC.rotation.set(\n    detRandGraphics(-Math.PI, Math.PI),\n    detRandGraphics(-Math.PI, Math.PI),\n    detRandGraphics(-Math.PI, Math.PI)\n  )\n  const bushBase = new Object3D()\n  bushBase.add(bushC)\n  bushBase.scale.y *= verticalScale\n  bushC.position.y += bushProps.y\n  return bushBase\n}\n", "export function memoize<T>(generator: () => T) {\n  let result: T | undefined\n  return function getResult() {\n    if (!result) {\n      result = generator()\n    }\n    return result\n  }\n}\n", "import { BoxBufferGeometry, Material, Mesh, Object3D } from 'three'\nimport { getChamferedBoxGeometry } from '../utils/geometry'\n\nexport function makeBrickWall(\n  brickMat: Material,\n  mortarMat: Material,\n  colStart: number,\n  colEnd: number\n) {\n  const brickWidth = 7\n  const brickHeight = 3\n  const brickGap = 1\n  const brickSpacingX = brickWidth + brickGap\n  const brickSpacingY = brickHeight\n  const brickGeo = getChamferedBoxGeometry(brickWidth, brickHeight, 4.5, 1)\n  const brickWallRoot = new Object3D()\n  for (let iRow = 0; iRow < 11; iRow++) {\n    for (let iCol = -1; iCol < 1; iCol++) {\n      const budge = (iRow % 2) * 0.5 - 0.25\n      const brick = new Mesh(brickGeo, brickMat)\n      brick.position.set(\n        (iCol + budge) * brickSpacingX + brickWidth * 0.5,\n        (iRow + 0.5) * brickSpacingY,\n        0\n      )\n      brickWallRoot.add(brick)\n    }\n  }\n  const mortar = new Mesh(\n    new BoxBufferGeometry((colEnd - colStart) * brickSpacingX - 1, 32, 1),\n    mortarMat\n  )\n  mortar.position.x = -1\n  mortar.position.y = 16\n  mortar.position.z = -0.75\n  brickWallRoot.add(mortar)\n  return brickWallRoot\n}\n", "import {\n  BackSide,\n  BoxGeometry,\n  LinearEncoding,\n  Mesh,\n  MeshDepthMaterial,\n  NearestFilter,\n  Object3D,\n  OrthographicCamera,\n  Scene,\n  WebGLRenderTarget\n} from 'three'\nimport { MaterialPassType } from '../../helpers/materials/materialLib'\nimport { assertPowerOfTwo } from '../../utils/math'\nimport { verticalScale } from '../../constants'\nimport { memoize } from '../../utils/memoizer'\n\nexport default class TileMaker {\n  protected _pivot: Object3D\n  public get passes(): MaterialPassType[] {\n    return this._passes\n  }\n  public set passes(value: MaterialPassType[]) {\n    throw new Error('You cannot change passes during runtime.')\n    // this._passes = value\n  }\n  protected _renderQueue: number[] = []\n  protected _tileRegistry: Uint8Array[] = []\n  protected _tileHashRegistry: string[] = []\n  protected _scene = new Scene()\n  protected _cameraTiltedBottom = new OrthographicCamera(\n    -16,\n    16,\n    (0 * 32 + 16) * verticalScale,\n    (0 * 32 - 16) * verticalScale,\n    0,\n    64\n  )\n  protected _cameraTiltedTop = new OrthographicCamera(\n    -16,\n    16,\n    (1 * 32 + 16) * verticalScale,\n    (1 * 32 - 16) * verticalScale,\n    0,\n    64\n  )\n  protected _cameraTopDown = new OrthographicCamera(-16, 16, 16, -16, -64, 64)\n  protected _renderTargets: Map<MaterialPassType, WebGLRenderTarget> = new Map()\n  protected _indexedMeshesVisibility: boolean[]\n  protected _indexedMeshes: (() => Object3D)[]\n  protected _tilesPerEdge: number\n  protected _maxTiles: number\n  constructor(\n    protected _pixelsPerTile = 32,\n    pixelsPerCacheEdge = 2048,\n    protected _passes: MaterialPassType[] = ['beauty'],\n    indexedMeshMakers: (() => Object3D)[]\n  ) {\n    assertPowerOfTwo(_pixelsPerTile)\n    assertPowerOfTwo(pixelsPerCacheEdge)\n    this._tilesPerEdge = pixelsPerCacheEdge / _pixelsPerTile\n    this._maxTiles = Math.pow(this._tilesPerEdge, 2)\n    for (const pass of _passes) {\n      this._renderTargets.set(\n        pass,\n        new WebGLRenderTarget(pixelsPerCacheEdge, pixelsPerCacheEdge, {\n          minFilter: NearestFilter,\n          magFilter: NearestFilter,\n          encoding: LinearEncoding,\n          generateMipmaps: false\n        })\n      )\n    }\n    console.log('performance.now', performance.now())\n\n    const scene = this._scene\n\n    scene.autoUpdate = false\n    this._cameraTiltedBottom.rotateX(Math.PI * -0.25)\n    this._cameraTiltedBottom.position.set(0, 32, 32)\n    scene.add(this._cameraTiltedBottom)\n    this._cameraTiltedTop.rotateX(Math.PI * -0.25)\n    this._cameraTiltedTop.position.set(0, 32, 32)\n    scene.add(this._cameraTiltedTop)\n    this._cameraTopDown.rotateX(Math.PI * -0.5)\n    this._cameraTopDown.position.set(0, 0, 0)\n    scene.add(this._cameraTopDown)\n\n    const pivot = new Object3D()\n    scene.add(pivot)\n\n    const memoScene = (generator: () => Object3D) => {\n      const memodGenerator = memoize(generator)\n      return function generatorAndAdder() {\n        const obj = memodGenerator()\n        if (!obj.parent) {\n          pivot.add(obj)\n          obj.updateWorldMatrix(false, true)\n        }\n        return obj\n      }\n    }\n\n    this._pivot = pivot\n\n    const zLimiter = new Mesh(\n      new BoxGeometry(32, 32, 32),\n      new MeshDepthMaterial({ side: BackSide, colorWrite: false })\n    )\n    zLimiter.position.y += 16\n    scene.add(zLimiter)\n\n    this._indexedMeshes = indexedMeshMakers.map(memoScene)\n    this._indexedMeshesVisibility = new Array(indexedMeshMakers.length)\n  }\n\n  getTexture(pass: MaterialPassType = 'beauty') {\n    if (this._renderTargets.has(pass)) {\n      return this._renderTargets.get(pass)!.texture\n    } else {\n      debugger\n      throw new Error(`pass \"${pass}\" not supported`)\n    }\n  }\n  getTileId(tileDescription: Uint8Array) {\n    // const hash = Buffer.from(tileDescription).toString('utf-8')\n    const hash = tileDescription.toString()\n    let index = this._tileHashRegistry.indexOf(hash)\n    if (index === -1) {\n      index = this._tileRegistry.length\n      if (index >= this._maxTiles) {\n        console.error(`no more room for tiles! (${index})`)\n      }\n      this._tileRegistry.push(tileDescription)\n      this._tileHashRegistry.push(hash)\n      this._renderQueue.push(index)\n    }\n    return index\n  }\n}\n", "import { Object3D } from 'three'\nimport { MaterialPassType } from '../../helpers/materials/materialLib'\nimport TileMaker from './TileMaker'\nimport { ceilPowerOfTwo } from 'three/src/math/MathUtils'\n\nexport default class DoubleCachedTileMaker extends TileMaker {\n  protected _precacher: TileMaker\n  constructor(\n    pixelsPerTile = 32,\n    pixelsPerCacheEdge = 2048,\n    passes: MaterialPassType[] = ['beauty'],\n    indexedMeshMakers: (() => Object3D)[]\n  ) {\n    super(pixelsPerTile, pixelsPerCacheEdge, passes, indexedMeshMakers)\n    this._precacher = new TileMaker(\n      pixelsPerTile,\n      ceilPowerOfTwo(Math.sqrt(indexedMeshMakers.length)),\n      passes,\n      indexedMeshMakers\n    )\n  }\n  getTileId(tileDescription: Uint8Array) {\n    const uniqueVisuals = new Set()\n    for (let j = 0; j < this._indexedMeshes.length; j++) {\n      const jb = ~~(j / 8)\n      const j8 = j % 8\n      const shouldShow = !!(tileDescription[jb] & (1 << j8))\n      if (shouldShow) {\n        uniqueVisuals.add(j)\n      }\n    }\n    // console.log('unique visual elements:', Array.from(uniqueVisuals).length)\n\n    //prep precacher\n    return super.getTileId(tileDescription)\n  }\n}\n", "import { Mesh, Vector4, WebGLRenderer } from 'three'\nimport { BasicTextureMaterial } from '../../materials/BasicTextureMaterial'\nimport { FauxelMaterial } from '../../materials/FauxelMaterial'\nimport { MaterialPassType } from '../materials/materialLib'\nimport NoiseTextureMaker from '../NoiseTextureMaker'\nimport SpriteMaker from '../../rendering/tileMaker/spriteMaker/SpriteMaker'\n\nimport JITTileSampler from '../../rendering/tileMaker/mapTileMaker/JITTileSampler'\nimport JITSpriteSampler from '../../rendering/tileMaker/spriteMaker/JITSpriteSampler'\nimport MapCacheRenderer from '../../mapCache/MapCacheRenderer'\nimport MapTileMaker from '../../rendering/tileMaker/mapTileMaker/MapTileMaker'\nimport { sunOffset, sunSpeed } from '../../constants'\n\nimport MapWithSpritesCacheRenderer from '../../mapCache/MapWithSpritesCacheRenderer'\nimport PointLightRenderer from '../../mapCache/PointLightRenderer'\nimport { getSharedRectangleGeometry } from '../../../test/utils/geometry'\nexport default class MapScrollingView {\n  tileMaker: MapTileMaker\n  spriteMaker: SpriteMaker\n  jitTileSampler: JITTileSampler\n  jitSpriteSampler: JITSpriteSampler\n  mapCacheRenderer: MapCacheRenderer\n  mapWithSpritesCacheRenderer: MapWithSpritesCacheRenderer\n  pointLightRenderer: PointLightRenderer\n  private _dirty = true\n  mapCachePassViews: Mesh[]\n  private _noiseMaker: NoiseTextureMaker\n  mapCacheFinalView: Mesh\n  private _noiseReady: boolean\n  areLightsVisible: boolean\n  private _mapScrollingViewMaterial: FauxelMaterial\n  public get offsetX(): number {\n    return this.jitTileSampler.offsetX\n  }\n  public set offsetX(value: number) {\n    this.jitTileSampler.offsetX = value\n    this.jitSpriteSampler.offsetX = value\n    this.mapWithSpritesCacheRenderer.offsetX = value\n  }\n  public get offsetY(): number {\n    return this.jitTileSampler.offsetY\n  }\n  public set offsetY(value: number) {\n    this.jitTileSampler.offsetY = value\n    this.jitSpriteSampler.offsetY = value\n    this.mapWithSpritesCacheRenderer.offsetY = value\n  }\n  constructor(\n    viewWidth = 16,\n    viewHeight = 16,\n    pixelsPerTile = 32,\n    pixelsPerCacheEdge = 2048,\n    mapViewUvST?: Vector4,\n    mapViewSubTilePixelOffsetUvST?: Vector4,\n    clipspaceMode = true,\n    passes?: MaterialPassType[]\n  ) {\n    const tileMaker = new MapTileMaker(\n      pixelsPerTile,\n      pixelsPerCacheEdge,\n      passes\n    )\n    const spriteMaker = new SpriteMaker(\n      pixelsPerTile,\n      pixelsPerCacheEdge,\n      passes\n    )\n    const jitTileSampler = new JITTileSampler(tileMaker, viewWidth, viewHeight)\n    const jitSpriteSampler = new JITSpriteSampler(\n      spriteMaker,\n      pixelsPerTile,\n      viewWidth,\n      viewHeight\n    )\n    const mapCacheRenderer = new MapCacheRenderer(\n      viewWidth,\n      viewHeight,\n      jitTileSampler,\n      pixelsPerTile,\n      pixelsPerCacheEdge\n    )\n\n    tileMaker.listenForMadeTiles(jitTileSampler.onTileMade)\n    tileMaker.isIndexStillOnScreen = (index: number) => {\n      for (let iCol = 0; iCol < viewWidth; iCol++) {\n        for (let iRow = 0; iRow < viewHeight; iRow++) {\n          const x = this.offsetX + iCol\n          const y = this.offsetY + iRow\n          const sampledVis = jitTileSampler.sampleVisIds(x, y)\n          if (index === sampledVis.idBottom || index === sampledVis.idTop) {\n            return true\n          }\n        }\n      }\n      return false\n    }\n\n    const mapWithSpritesCacheRenderer = new MapWithSpritesCacheRenderer(\n      mapCacheRenderer,\n      viewWidth,\n      viewHeight,\n      1024,\n      jitSpriteSampler,\n      pixelsPerTile,\n      pixelsPerCacheEdge\n    )\n    const pointLightRenderer = new PointLightRenderer(\n      mapWithSpritesCacheRenderer,\n      viewWidth,\n      viewHeight,\n      1024,\n      pixelsPerTile\n    )\n    const mapCachePassViews: Mesh[] = []\n    for (const pass of tileMaker.passes) {\n      const mapScrollingViewMaterial = new BasicTextureMaterial({\n        texture: mapCacheRenderer.mapCache.get(pass)!.texture,\n        uvST: mapViewUvST,\n        clipspaceMode\n      })\n      const mapCacheView = new Mesh(\n        getSharedRectangleGeometry(),\n        mapScrollingViewMaterial\n      )\n      mapCachePassViews.push(mapCacheView)\n    }\n    this._noiseMaker = new NoiseTextureMaker()\n\n    const mapScrollingViewMaterial = new FauxelMaterial({\n      textureColor:\n        mapWithSpritesCacheRenderer.mapCache.get('customColor')!.texture,\n      textureNormals:\n        mapWithSpritesCacheRenderer.mapCache.get('normals')!.texture,\n      textureEmissive:\n        mapWithSpritesCacheRenderer.mapCache.get('customEmissive')!.texture,\n      textureRoughnessMetalnessHeight: mapWithSpritesCacheRenderer.mapCache.get(\n        'customRoughnessMetalnessHeight'\n      )!.texture,\n      textureTopDownHeight: mapWithSpritesCacheRenderer.mapCache.get(\n        'customTopDownHeight'\n      )!.texture,\n      texturePointLights: pointLightRenderer.texture,\n      uvSTWorldOffset: mapViewUvST,\n      uvST: mapViewSubTilePixelOffsetUvST,\n      clipspaceMode,\n      relativeTileSize: 1 / viewWidth,\n      relativePixelSize: 1 / viewWidth / pixelsPerTile,\n      pixelsPerTile,\n      textureFog: this._noiseMaker.texture\n    })\n    const mapCacheFinalView = new Mesh(\n      getSharedRectangleGeometry(),\n      mapScrollingViewMaterial\n    )\n\n    this.spriteMaker = spriteMaker\n    this.tileMaker = tileMaker\n    this.jitTileSampler = jitTileSampler\n    this.jitSpriteSampler = jitSpriteSampler\n    this.mapCacheRenderer = mapCacheRenderer\n    this.mapWithSpritesCacheRenderer = mapWithSpritesCacheRenderer\n    this.pointLightRenderer = pointLightRenderer\n    this.mapCachePassViews = mapCachePassViews\n    this.mapCacheFinalView = mapCacheFinalView\n    this._mapScrollingViewMaterial = mapScrollingViewMaterial\n  }\n  render(renderer: WebGLRenderer, dt: number) {\n    this._mapScrollingViewMaterial.setSunAngle(\n      0.1 + performance.now() * sunSpeed + sunOffset * Math.PI * 2\n    )\n    if (!this._noiseReady) {\n      this._noiseMaker.render(renderer)\n      this._noiseReady = true\n    }\n    this.tileMaker.render(renderer)\n    if (\n      this.jitTileSampler.updateMeta() ||\n      this._dirty ||\n      this.jitTileSampler.dirty\n    ) {\n      this._dirty = false\n      this.jitTileSampler.updateVis(\n        this.mapCacheRenderer.tileBottomPointsGeo,\n        this.mapCacheRenderer.tileTopPointsGeo\n      )\n      this.mapCacheRenderer.render(renderer)\n      this.mapCacheRenderer.tileBottomPointsGeo.drawRange.count = 0\n      this.mapCacheRenderer.tileTopPointsGeo.drawRange.count = 0\n    }\n    this.jitSpriteSampler.updateVis(\n      this.mapWithSpritesCacheRenderer.spriteBottomPointsGeo,\n      this.mapWithSpritesCacheRenderer.spriteTopPointsGeo\n    )\n    this.spriteMaker.render(renderer)\n    this.mapWithSpritesCacheRenderer.render(renderer)\n    this.areLightsVisible = this.pointLightRenderer.render(renderer)\n  }\n}\n", "import { DoubleSide, RawShaderMaterial, Texture, Uniform, Vector4 } from 'three'\nimport { buildParameters } from '~/utils/jsUtils'\nimport { getTempTexture } from '~/utils/threeUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\ninterface Parameters {\n  uvST: Vector4\n  texture: Texture\n  clipspaceMode: boolean\n}\n\nconst __defaultParams: Parameters = {\n  uvST: new Vector4(1, 1, 0, 0),\n  texture: getTempTexture(),\n  clipspaceMode: false\n}\n\nexport class BasicTextureMaterial extends RawShaderMaterial {\n  public get texture(): Texture {\n    return this._uTexture.value\n  }\n  public set texture(value: Texture) {\n    this._uTexture.value = value\n  }\n  private _uTexture: Uniform\n  constructor(options: Partial<Parameters> = {}) {\n    const params = buildParameters(__defaultParams, options)\n    const uUvST = new Uniform(params.uvST)\n    const uTexture = new Uniform(params.texture)\n    const uniforms = {\n      uUvST,\n      uTexture\n    }\n    const defines: { [key: string]: boolean | string | number } = {\n      CLIPSPACE_MODE: params.clipspaceMode\n    }\n\n    super({\n      uniforms,\n      defines,\n      vertexShader,\n      fragmentShader,\n      // alphaTest: 0.5,\n      // transparent: true,\n      depthWrite: true,\n      depthTest: true,\n      side: DoubleSide\n    })\n    this._uTexture = uTexture\n  }\n}\n", "import {\n  DataTexture,\n  NearestFilter,\n  RGBAFormat,\n  sRGBEncoding,\n  Texture,\n  TextureLoader,\n  UnsignedByteType\n} from 'three'\n\nlet __tempTexture: DataTexture | undefined\nexport function getTempTexture() {\n  if (!__tempTexture) {\n    const s = 4\n    const total = s * s * 4\n    const data = new Uint8Array(total)\n    for (let i = 0; i < total; i++) {\n      data[i] = 0\n    }\n    __tempTexture = new DataTexture(data, s, s, RGBAFormat, UnsignedByteType)\n  }\n  return __tempTexture!\n}\n\nconst __randomTexture = new Map<string, DataTexture>()\nexport function getRandomTexture(width = 64, height = 64) {\n  const resHash = `${width}x${height}`\n  if (!__randomTexture.has(resHash)) {\n    const total = width * height * 4\n    const data = new Uint8Array(total)\n    for (let i = 0; i < total; i++) {\n      data[i] = ~~(Math.random() * 256)\n    }\n    const texture = new DataTexture(\n      data,\n      width,\n      height,\n      RGBAFormat,\n      UnsignedByteType\n    )\n    texture.needsUpdate = true\n    __randomTexture.set(resHash, texture)\n  }\n  return __randomTexture.get(resHash)!\n}\n\nexport async function loadPixelatedTexture(path: string, flipY = true) {\n  return new Promise<Texture>((resolve) => {\n    const loader = new TextureLoader()\n    loader.load(\n      path,\n      (texture) => {\n        texture.encoding = sRGBEncoding\n        texture.minFilter = NearestFilter\n        texture.magFilter = NearestFilter\n        texture.flipY = flipY\n        resolve(texture)\n      },\n      undefined,\n      function (err) {\n        console.error('An error happened.', err.message)\n      }\n    )\n  })\n}\n\nexport function getCanvasOfImageTexture(texture: Texture) {\n  const image = texture.image as ImageBitmap\n  const canvas = document.createElement('canvas')\n  canvas.width = image.width\n  canvas.height = image.height\n  const context = canvas.getContext('2d')\n  if (!context) {\n    throw new Error('could not get canvas context2d')\n  }\n  context.drawImage(image, 0, 0)\n  return context\n}\n", "import {\n  Color,\n  DoubleSide,\n  RawShaderMaterial,\n  Texture,\n  Uniform,\n  Vector2,\n  Vector3,\n  Vector4\n} from 'three'\nimport { lerp } from 'three/src/math/MathUtils'\nimport { buildParameters } from '../../utils/jsUtils'\nimport { getTempTexture } from '../../utils/threeUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\ninterface Parameters {\n  uvST: Vector4\n  uvSTWorldOffset: Vector4\n  textureColor: Texture\n  textureNormals: Texture\n  textureEmissive: Texture\n  textureRoughnessMetalnessHeight: Texture\n  textureTopDownHeight: Texture\n  texturePointLights: Texture\n  clipspaceMode: boolean\n  sunDirection: Vector3\n  sunDirectionForWater: Vector3\n  sunShadowDirection: Vector3\n  colorLightAmbient: Color\n  colorDarkAmbient: Color\n  colorSun: Color\n  relativeTileSize: number\n  relativePixelSize: number\n  pixelsPerTile: number\n  textureFog: Texture\n  fogScroll: Vector2\n  waterHeight: number\n  useWater: boolean\n}\n\nconst __defaultParams: Parameters = {\n  uvST: new Vector4(1, 1, 0, 0),\n  uvSTWorldOffset: new Vector4(1, 1, 0, 0),\n  textureColor: getTempTexture(),\n  textureNormals: getTempTexture(),\n  textureEmissive: getTempTexture(),\n  textureRoughnessMetalnessHeight: getTempTexture(),\n  textureTopDownHeight: getTempTexture(),\n  texturePointLights: getTempTexture(),\n  clipspaceMode: false,\n  sunDirection: new Vector3(0, 1, 0),\n  sunDirectionForWater: new Vector3(0, 1, 0),\n  sunShadowDirection: new Vector3(0, 1, 0),\n  colorLightAmbient: new Color(0.2, 0.27, 0.7),\n  colorDarkAmbient: new Color(0.1, 0.15, 0.4),\n  colorSun: new Color(0.5, 0.45, 0.3),\n  relativeTileSize: 1 / 16, //one over the number of tiles in view\n  relativePixelSize: 1 / 512, //one over the number of pixels in view\n  pixelsPerTile: 32,\n  textureFog: getTempTexture(),\n  fogScroll: new Vector2(),\n  waterHeight: 0.5,\n  useWater: false\n}\n\n// const axis = new Vector3(0, 0, 1)\nconst fakeA = 0\nconst __sunDirectionForWaterFake = new Vector3(\n  0,\n  Math.cos(fakeA),\n  Math.sin(fakeA)\n)\nconst __tempVec3 = new Vector3()\nexport class FauxelMaterial extends RawShaderMaterial {\n  setSunAngle: (sunAngle: number) => void\n  constructor(options: Partial<Parameters> = {}) {\n    const params = buildParameters(__defaultParams, options)\n    const uUvST = new Uniform(params.uvST)\n    const uUvSTWorldOffset = new Uniform(params.uvSTWorldOffset)\n    const uTextureColor = new Uniform(params.textureColor)\n    const uTextureNormals = new Uniform(params.textureNormals)\n    const uTextureEmissive = new Uniform(params.textureEmissive)\n    const uTextureRoughnessMetalnessHeight = new Uniform(\n      params.textureRoughnessMetalnessHeight\n    )\n    const uTextureTopDownHeight = new Uniform(params.textureTopDownHeight)\n    const uTexturePointLights = new Uniform(params.texturePointLights)\n\n    const sunDirection = params.sunDirection\n    const uSunDirection = new Uniform(sunDirection)\n    const sunDirectionForWater = params.sunDirectionForWater\n    const uSunDirectionForWater = new Uniform(sunDirectionForWater)\n    const sunShadowDirection = params.sunShadowDirection\n    const uSunShadowDirection = new Uniform(sunShadowDirection)\n    const originalColorLightAmbient = params.colorLightAmbient.clone()\n    const nightColorLightAmbient = new Color(0.05, 0.1, 0.4)\n    const colorLightAmbient = params.colorLightAmbient\n    const uColorLightAmbient = new Uniform(colorLightAmbient)\n    const originalColorDarkAmbient = params.colorDarkAmbient.clone()\n    const nightColorDarkAmbient = new Color(0, 0.05, 0.2)\n    const colorDarkAmbient = params.colorDarkAmbient\n    const uColorDarkAmbient = new Uniform(colorDarkAmbient)\n    const colorSun = params.colorSun\n    const uColorSun = new Uniform(colorSun)\n    const uTextureFog = new Uniform(params.textureFog)\n    const uFogScroll = new Uniform(params.fogScroll)\n    const uWaterHeight = new Uniform(params.waterHeight)\n\n    const waterSunAngleY = 0.9\n    __sunDirectionForWaterFake.set(\n      0,\n      Math.cos(waterSunAngleY),\n      Math.sin(waterSunAngleY)\n    )\n    sunDirectionForWater.copy(__sunDirectionForWaterFake)\n    sunDirectionForWater.x += params.sunDirection.x * 0.4\n    __tempVec3.copy(sunDirectionForWater).normalize()\n    sunDirectionForWater.lerp(__tempVec3, 0.4)\n    sunDirectionForWater.multiplyScalar(\n      lerp(0.97, 1, 1 - Math.abs(sunDirection.x))\n    )\n    const uniforms = {\n      uUvST,\n      uUvSTWorldOffset,\n      uTextureColor,\n      uTextureNormals,\n      uTextureEmissive,\n      uTextureRoughnessMetalnessHeight,\n      uTextureTopDownHeight,\n      uTexturePointLights,\n      uSunDirection,\n      uSunDirectionForWater,\n      uSunShadowDirection,\n      uColorLightAmbient,\n      uColorDarkAmbient,\n      uColorSun,\n      uTextureFog,\n      uFogScroll,\n      uWaterHeight\n    }\n    const defines: { [key: string]: boolean | string | number } = {\n      CLIPSPACE_MODE: params.clipspaceMode,\n      RELATIVE_TILE_SIZE: params.relativeTileSize,\n      RELATIVE_PIXEL_SIZE: params.relativePixelSize,\n      RELATIVE_TILE_PIXEL_SIZE:\n        params.relativePixelSize / params.relativeTileSize,\n      USE_WATER: params.useWater\n    }\n\n    super({\n      uniforms,\n      defines,\n      vertexShader,\n      fragmentShader,\n      // alphaTest: 0.5,\n      // transparent: true,\n      depthWrite: true,\n      depthTest: true,\n      side: DoubleSide\n    })\n\n    this.setSunAngle = (sunAngle: number) => {\n      sunDirection.set(Math.cos(sunAngle), 0.75, Math.sin(sunAngle))\n      sunDirection.normalize()\n\n      sunShadowDirection.copy(sunDirection)\n      sunShadowDirection.x *= -1\n      sunShadowDirection.y = 0\n      sunShadowDirection.multiplyScalar(2)\n\n      const bDay = Math.max(0, Math.sin(sunAngle))\n      colorLightAmbient.lerpColors(\n        nightColorLightAmbient,\n        originalColorLightAmbient,\n        bDay\n      )\n      colorDarkAmbient.lerpColors(\n        nightColorDarkAmbient,\n        originalColorDarkAmbient,\n        bDay\n      )\n      colorSun.setRGB(Math.pow(bDay, 0.5), Math.pow(bDay, 1), Math.pow(bDay, 2))\n    }\n  }\n}\n", "import {\n  LinearEncoding,\n  Mesh,\n  NearestFilter,\n  OrthographicCamera,\n  PlaneBufferGeometry,\n  RepeatWrapping,\n  Scene,\n  Texture,\n  Vector4,\n  WebGLRenderer,\n  WebGLRenderTarget\n} from 'three'\nimport { SimplexNoiseMaterial } from '../materials/SimplexNoiseMaterial'\n\nexport default class NoiseTextureMaker {\n  texture: Texture\n  private _renderTarget: WebGLRenderTarget\n  private _scene: Scene\n  private _camera: OrthographicCamera\n  constructor(res = 256) {\n    const geo = new PlaneBufferGeometry(2, 2)\n    const uvST = new Vector4(1, 1, 0, 0)\n    const mesh = new Mesh(\n      geo,\n      new SimplexNoiseMaterial({\n        uvST\n      })\n    )\n    const scene = new Scene()\n    const camera = new OrthographicCamera(-1, 1, -1, 1, -1, 1)\n    const renderTarget = new WebGLRenderTarget(res, res, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      encoding: LinearEncoding,\n      wrapS: RepeatWrapping,\n      wrapT: RepeatWrapping,\n      generateMipmaps: false\n    })\n    scene.add(camera)\n    scene.add(mesh)\n    this._renderTarget = renderTarget\n    this.texture = renderTarget.texture\n    this._scene = scene\n    this._camera = camera\n  }\n  render(renderer: WebGLRenderer) {\n    renderer.setRenderTarget(this._renderTarget)\n    renderer.render(this._scene, this._camera)\n    renderer.setRenderTarget(null)\n  }\n}\n", "import { Color, DoubleSide, RawShaderMaterial, Uniform, Vector4 } from 'three'\nimport { buildParameters } from '~/utils/jsUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\ninterface Parameters {\n  mode: 'normals' | 'simple'\n  uvST: Vector4\n  color: Color\n}\n\nconst __defaultParams: Parameters = {\n  mode: 'normals',\n  uvST: new Vector4(0.2, 0.2, 0, 0),\n  color: new Color(1, 1, 1)\n}\n\nexport class SimplexNoiseMaterial extends RawShaderMaterial {\n  constructor(options: Partial<Parameters> = {}) {\n    const params = buildParameters(__defaultParams, options)\n    const uUvST = new Uniform(params.uvST)\n    const uColor = new Uniform(params.color)\n    const uniforms = {\n      uUvST,\n      uColor\n    }\n    const defines: { [key: string]: boolean | string | number } = {\n      MODE_NORMALS: params.mode === 'normals'\n    }\n\n    super({\n      uniforms,\n      defines,\n      vertexShader,\n      fragmentShader,\n      // alphaTest: 0.5,\n      // transparent: true,\n      depthWrite: true,\n      depthTest: true,\n      side: DoubleSide\n    })\n  }\n}\n", "import { Material, Mesh, Object3D, Vector4, WebGLRenderer } from 'three'\nimport { verticalScale } from '../../../constants'\nimport {\n  changeMeshMaterials,\n  getMeshMaterial,\n  MaterialPassType\n} from '../../../helpers/materials/materialLib'\nimport { getChamferedBoxGeometry } from '../../../utils/geometry'\nimport { memoize } from '../../../utils/memoizer'\nimport TileMaker from '../TileMaker'\n\nexport default class SpriteMaker extends TileMaker {\n  private _angleRegistry: number[] = []\n  constructor(\n    pixelsPerTile = 32,\n    pixelsPerCacheEdge = 2048,\n    passes: MaterialPassType[] = ['beauty']\n  ) {\n    const dummy = () => new Object3D()\n\n    const bodyMaker = memoize(() => {\n      const bodyGeo = getChamferedBoxGeometry(20, 14, 10, 3)\n      const obj = new Mesh(bodyGeo, getMeshMaterial('pants'))\n      obj.position.y = 17\n      const headGeo = getChamferedBoxGeometry(16, 16 * verticalScale, 16, 4)\n      const head = new Mesh(headGeo, getMeshMaterial('skin'))\n      head.position.y = 16\n      obj.add(head)\n      const legGeo = getChamferedBoxGeometry(6, 12 * verticalScale, 6, 2)\n      const leg = new Mesh(legGeo, getMeshMaterial('pants'))\n      leg.position.x = -6\n      leg.position.y = -12\n      obj.add(leg)\n      const leg2 = leg.clone()\n      leg2.position.x *= -1\n      obj.add(leg2)\n\n      const armGeo = getChamferedBoxGeometry(4, 20 * verticalScale, 4, 1.25)\n      const arm = new Mesh(armGeo, getMeshMaterial('pants'))\n      arm.position.x = -12\n      arm.rotation.z = Math.PI * -0.125\n      arm.position.y = -1\n      obj.add(arm)\n      const arm2 = arm.clone()\n      arm2.rotation.z *= -1\n      arm2.position.x *= -1\n      obj.add(arm2)\n\n      return obj\n    })\n\n    const body = () => bodyMaker()\n\n    const body2 = () => {\n      const obj = bodyMaker().clone(true)\n      obj.traverse((node) => {\n        if (\n          node instanceof Mesh &&\n          node.material instanceof Material &&\n          node.material.name === 'pants'\n        ) {\n          node.material = getMeshMaterial('pantsRed')\n        }\n      })\n      return obj\n    }\n\n    const hat = () => {\n      const obj = new Mesh(\n        getChamferedBoxGeometry(18, 16 * verticalScale, 16, 3),\n        getMeshMaterial('gold')\n      )\n      obj.position.z = -4\n      obj.position.y = 35\n      obj.scale.y *= verticalScale\n      return obj\n    }\n\n    const sword = () => {\n      const obj = new Mesh(\n        getChamferedBoxGeometry(2, 4, 16, 2),\n        getMeshMaterial('gold')\n      )\n      obj.position.x = -14\n      obj.position.z = 10\n      obj.position.y = 11\n      return obj\n    }\n\n    const shield = () => {\n      const obj = new Mesh(\n        getChamferedBoxGeometry(12, 12, 2, 2),\n        getMeshMaterial('gold')\n      )\n      obj.position.x = 12\n      obj.position.y = 16\n      obj.position.z = 6\n      obj.rotation.y = Math.PI * 0.125\n      return obj\n    }\n\n    const indexedMeshes = [dummy, body, body2, hat, sword, shield]\n\n    super(pixelsPerTile, pixelsPerCacheEdge, passes, indexedMeshes)\n\n    this._pivot.scale.multiplyScalar(0.5)\n  }\n\n  getTileId(tileDescription: Uint8Array) {\n    throw new Error('Needs angle. Use getTileIdAtAngle()')\n    return 0\n  }\n  getTileIdAtAngle(tileDescription: Uint8Array, angle: number) {\n    // const hash = Buffer.from(tileDescription).toString('utf-8')\n    const hash = `${tileDescription.toString()}@${angle}`\n    let index = this._tileHashRegistry.indexOf(hash)\n    if (index === -1) {\n      index = this._tileRegistry.length\n      if (index >= this._maxTiles) {\n        console.error(`no more room for tiles! (${index})`)\n      }\n      this._tileRegistry.push(tileDescription)\n      this._angleRegistry.push(angle)\n      this._tileHashRegistry.push(hash)\n      this._renderQueue.push(index)\n    }\n    return index\n  }\n  render(renderer: WebGLRenderer) {\n    if (this._renderQueue.length > 0) {\n      const oldViewport = new Vector4()\n      const oldScissor = new Vector4()\n      renderer.getViewport(oldViewport)\n      renderer.getScissor(oldScissor)\n      this._scene.updateMatrixWorld(true)\n      for (const pass of this._passes) {\n        renderer.setRenderTarget(this._renderTargets.get(pass)!)\n        const p = this._pixelsPerTile / renderer.getPixelRatio()\n        const depthPass = pass === 'customTopDownHeight'\n        for (const index of this._renderQueue) {\n          const iCol = index % this._tilesPerEdge\n          const iRow = ~~(index / this._tilesPerEdge)\n          const angle = this._angleRegistry[index]\n          if (this._pivot.rotation.y !== angle) {\n            this._pivot.rotation.y = angle\n            this._pivot.updateMatrixWorld(true)\n          }\n          const visualProps = this._tileRegistry[index]\n          const layer2 = !!(visualProps[0] & 1)\n          if (layer2 && depthPass) {\n            continue\n          }\n          for (let j = 0; j < this._indexedMeshes.length; j++) {\n            const jb = ~~(j / 8)\n            const j8 = j % 8\n            const shouldShow = !!(visualProps[jb] & (1 << j8))\n            if (this._indexedMeshesVisibility[j] && !shouldShow) {\n              this._indexedMeshes[j]().visible = false\n            } else if (!this._indexedMeshesVisibility[j] && shouldShow) {\n              this._indexedMeshes[j]().visible = true\n            }\n            this._indexedMeshesVisibility[j] = shouldShow\n          }\n          renderer.setViewport(iCol * p, iRow * p, p, p)\n          renderer.setScissor(iCol * p, iRow * p, p, p)\n          changeMeshMaterials(this._scene, pass, true)\n          renderer.render(\n            this._scene,\n            layer2\n              ? this._cameraTiltedTop\n              : depthPass\n              ? this._cameraTopDown\n              : this._cameraTiltedBottom\n          )\n        }\n      }\n      renderer.setViewport(oldViewport)\n      renderer.setScissor(oldScissor)\n      renderer.setRenderTarget(null)\n      this._renderQueue.length = 0\n    }\n  }\n}\n", "import { BufferGeometry } from 'three'\nimport NoiseHelper2D from '../../../helpers/utils/NoiseHelper2D'\nimport ThreshNoiseHelper2D from '../../../helpers/utils/ThreshNoiseHelper2D'\nimport { wrap } from '../../../utils/math'\n\nimport SpriteMaker from './SpriteMaker'\n\nconst masks32: number[] = []\nfor (let i = 0; i < 32; i++) {\n  masks32[i] = 1 << i\n}\n\ntype MetaSprite = 'body' | 'body2' | 'hat' | 'sword' | 'shield'\n\nconst masks8: number[] = []\nfor (let i = 0; i < 8; i++) {\n  masks8[i] = 1 << i\n}\n\nexport class SpriteController {\n  constructor(\n    public x: number,\n    public y: number,\n    public id: number,\n    public metaBytes: number,\n    public angle: number\n  ) {\n    //\n  }\n}\n\nlet __id = 0\nexport default class JITTileSampler {\n  private _sprites: SpriteController[] = []\n  offsetX = 0\n  offsetY = 0\n  makeSprite(x: number, y: number, angle: number) {\n    const id = __id\n    const sprite = new SpriteController(x, y, id, this.sampleMeta(id), angle)\n    __id++\n    this._sprites.push(sprite)\n    return sprite\n  }\n  get spriteMaker(): SpriteMaker {\n    return this._spriteMaker\n  }\n  set spriteMaker(value: SpriteMaker) {\n    throw new Error('Cannot change spriteMaker during runtime')\n  }\n  metaPropertyLookup: MetaSprite[]\n  visualPropertyLookup: string[]\n  metaNoiseGenerators: ThreshNoiseHelper2D[]\n  bytesPerTile: number\n  localMetaProps: number\n  visProps: Uint8Array\n  metaCache: Map<string, number> = new Map() //maybe change this caching mechanism for something more memory friendly. e.i. Map<number, <Map<number, number>> ?\n  metaPropertyMasks: number[]\n  dirtyMeta: Set<string> = new Set()\n  constructor(\n    private _spriteMaker: SpriteMaker,\n    private _pixelsPerTile: number,\n    private _viewWidth: number,\n    private _viewHeight: number\n  ) {\n    this.metaPropertyLookup = ['body', 'body2', 'hat', 'sword', 'shield']\n\n    this.visualPropertyLookup = [\n      'layer2',\n      'body',\n      'body2',\n      'hat',\n      'sword',\n      'shield',\n      '180',\n      '90',\n      '45'\n    ]\n    this.bytesPerTile = Math.ceil(this.visualPropertyLookup.length / 8)\n\n    const seed = 1\n    const bodyNoise = ThreshNoiseHelper2D.simple(0.1, 0, 0, 0, seed)\n    const body2Noise = ThreshNoiseHelper2D.simple(0.08, -100, -100, 0, seed)\n    const hatNoise = ThreshNoiseHelper2D.simple(0.06, -50, -50, 0.5, seed)\n    const goldNoise = ThreshNoiseHelper2D.simple(0.16, 50, -50, 0, seed)\n    const swordNoise = ThreshNoiseHelper2D.simple(0.26, 50, 50, 0, seed)\n    const shieldNoise = ThreshNoiseHelper2D.simple(0.36, 50, 150, 0, seed)\n    this.metaNoiseGenerators = [\n      bodyNoise,\n      body2Noise,\n      hatNoise,\n      goldNoise,\n      swordNoise,\n      shieldNoise\n    ]\n  }\n\n  sampleMeta(id: number) {\n    const key = id.toString()\n    if (this.metaCache.has(key)) {\n      return this.metaCache.get(key)!\n    }\n    this.localMetaProps = this.metaNoiseGenerators.reduce((accum, noise, j) => {\n      return (\n        accum +\n        (noise.getTreshold(wrap(id * 37, -100, 100), wrap(id * 124, -70, 70)) <<\n          j)\n      )\n    }, 0)\n    return this.validateLocalMeta(id)\n  }\n  flipMeta(id: number, meta: MetaSprite, validate = true) {\n    this.writeMeta(id, this.metaBitsFlip(this.sampleMeta(id), meta))\n    if (validate) {\n      this.validateLocalMeta(id)\n    }\n  }\n  metaBitsHas(val: number, maskName: MetaSprite) {\n    return val & masks32[this.metaPropertyLookup.indexOf(maskName)]\n  }\n\n  metaBitsFlip(val: number, maskName: MetaSprite) {\n    return val ^ masks32[this.metaPropertyLookup.indexOf(maskName)]\n  }\n\n  visualBitsEnable(val: Uint8Array, maskName: string) {\n    const i = this.visualPropertyLookup.indexOf(maskName)\n    const ib = ~~(i / 8)\n    const i8 = i % 8\n    val[ib] |= masks8[i8]\n  }\n  localMetaBitsFlip(maskName: MetaSprite) {\n    this.localMetaProps = this.metaBitsFlip(this.localMetaProps, maskName)\n  }\n  localMetaBitsHas(maskName: MetaSprite) {\n    return this.metaBitsHas(this.localMetaProps, maskName)\n  }\n  writeMeta(id: number, meta: number) {\n    const key = id.toString()\n    if (this.metaCache.has(key) && this.metaCache.get(key)) {\n      this.metaCache.set(key, meta)\n    }\n    this.dirtyMeta.add(key)\n    this.localMetaProps = meta\n  }\n  validateLocalMeta(id: number) {\n    const key = id.toString()\n\n    // this.localMetaProps = this.metaNoiseGenerators[2].getTreshold(x, y, 0.5) << 4\n\n    if (!this.localMetaBitsHas('body') && !this.localMetaBitsHas('body2')) {\n      this.localMetaBitsFlip('body')\n    }\n    if (this.localMetaBitsHas('body') && this.localMetaBitsHas('body2')) {\n      this.localMetaBitsFlip('body2')\n    }\n    this.metaCache.set(key, this.localMetaProps)\n    return this.localMetaProps\n  }\n  myVisualBitsEnable(maskName: string) {\n    this.visualBitsEnable(this.visProps, maskName)\n  }\n  sampleVis(id: number, angle: number) {\n    const metaProps = this.sampleMeta(id)\n    this.localMetaProps = metaProps\n\n    this.visProps = new Uint8Array(this.bytesPerTile)\n\n    this.myVisualBitsEnable(this.localMetaBitsHas('body') ? 'body' : 'body2')\n\n    if (this.localMetaBitsHas('hat')) {\n      this.myVisualBitsEnable('hat')\n    }\n    if (this.localMetaBitsHas('sword')) {\n      this.myVisualBitsEnable('sword')\n    }\n    if (this.localMetaBitsHas('shield')) {\n      this.myVisualBitsEnable('shield')\n    }\n    const idBottom = this._spriteMaker.getTileIdAtAngle(this.visProps, angle)\n    const visProps2 = this.visProps.slice()\n    visProps2[0] |= 1\n    const idTop = this._spriteMaker.getTileIdAtAngle(visProps2, angle)\n    // const indexBottomX = (idBottom * 8) % 256\n    // const indexBottomY = ~~(idBottom / 32) * 8\n    // const indexTopX = (idTop * 8) % 256\n    // const indexTopY = ~~(idTop / 32) * 8\n    return {\n      idBottom,\n      idTop\n    }\n  }\n  updateVis(bottomPointsGeo: BufferGeometry, topPointsGeo: BufferGeometry) {\n    if (this._sprites.length > 0) {\n      const ppt = this._pixelsPerTile\n      const xyBottomAttr = bottomPointsGeo.getAttribute('xy')\n      const xyBottomArr = xyBottomAttr.array as number[]\n      const idBottomAttr = bottomPointsGeo.getAttribute('id')\n      const idBottomArr = idBottomAttr.array as number[]\n      const xyTopAttr = topPointsGeo.getAttribute('xy')\n      const xyTopArr = xyTopAttr.array as number[]\n      const idTopAttr = topPointsGeo.getAttribute('id')\n      const idTopArr = idTopAttr.array as number[]\n      bottomPointsGeo.drawRange.count = 0\n      topPointsGeo.drawRange.count = 0\n      let j = 0\n      for (let i = 0; i < this._sprites.length; i++) {\n        const sprite = this._sprites[i]\n        const x = sprite.x - this.offsetX\n        const y = sprite.y - this.offsetY\n        if (x < 0 || x > this._viewWidth || y < 0 || y > this._viewHeight) {\n          continue\n        }\n        const xSnap = Math.round(wrap(x, 0, this._viewWidth) * ppt) / ppt\n        const ySnap = Math.round(wrap(y, 0, this._viewHeight) * ppt) / ppt\n        const id = sprite.metaBytes\n        const j2 = j * 2\n        xyBottomArr[j2] = xSnap\n        xyBottomArr[j2 + 1] = ySnap\n        xyTopArr[j2] = xSnap\n        xyTopArr[j2 + 1] = ySnap + 1\n        const sample = this.sampleVis(id, sprite.angle)\n        idBottomArr[j] = sample.idBottom\n        idTopArr[j] = sample.idTop\n        j++\n      }\n      bottomPointsGeo.drawRange.count = j\n      topPointsGeo.drawRange.count = j\n      if (j === 0) {\n        return false\n      }\n      xyBottomAttr.needsUpdate = true\n      idBottomAttr.needsUpdate = true\n      xyTopAttr.needsUpdate = true\n      idTopAttr.needsUpdate = true\n      return true\n    } else {\n      return false\n    }\n  }\n}\n", "import {\n  BufferAttribute,\n  BufferGeometry,\n  LinearEncoding,\n  NearestFilter,\n  OrthographicCamera,\n  Points,\n  RepeatWrapping,\n  Scene,\n  Uint16BufferAttribute,\n  Uint8BufferAttribute,\n  WebGLRenderer,\n  WebGLRenderTarget\n} from 'three'\nimport { MaterialPassType } from '../helpers/materials/materialLib'\nimport { TileCacheWriterPointMaterial } from '../materials/TileCacheWriterPointMaterial'\nimport { wrap } from '../utils/math'\n\nimport JITTileSampler from '../rendering/tileMaker/mapTileMaker/JITTileSampler'\nimport NamedBitsInBytes from '../helpers/utils/NamedBitsInBytes'\n\nexport default class MapCacheRenderer {\n  mapCache: Map<MaterialPassType, WebGLRenderTarget> = new Map()\n  mapCacheScene: Scene\n  mapCacheCamera: OrthographicCamera\n  tileBottomPointsGeo: BufferGeometry\n  tileTopPointsGeo: BufferGeometry\n  private _pointsTopMaterial: TileCacheWriterPointMaterial\n  private _pointsBottomMaterial: TileCacheWriterPointMaterial\n\n  constructor(\n    width: number,\n    height: number,\n    private _jitTileSampler: JITTileSampler,\n    pixelsPerTile = 32,\n    pixelsPerCacheEdge = 1024\n  ) {\n    const totalTiles = width * height\n    const viewWidth = width * pixelsPerTile\n    const viewHeight = height * pixelsPerTile\n    const xyBottomArr = new Uint8Array(totalTiles * 2)\n    const xyTopArr = new Uint8Array(totalTiles * 2)\n    const idBottomArr = new Uint16Array(totalTiles)\n    const idTopArr = new Uint16Array(totalTiles)\n\n    //nothingness will be the default visuals for queued tiles\n    const nothingnessVisProps = new NamedBitsInBytes(\n      new Uint8Array(\n        Math.ceil(\n          _jitTileSampler.tileMaker.visualPropertyLookupStrings.length / 8\n        )\n      ),\n      _jitTileSampler.tileMaker.visualPropertyLookupStrings\n    )\n    nothingnessVisProps.enableBit('nothingness')\n    _jitTileSampler.sampleVisIdsByVisProps(nothingnessVisProps)\n\n    for (let i = 0; i < totalTiles; i++) {\n      const x = (i % width) + _jitTileSampler.offsetX\n      const y = ~~(i / width) - _jitTileSampler.offsetY\n      const i2 = i * 2\n      const sample = _jitTileSampler.sampleVisIds(x, y)\n      xyBottomArr[i2] = wrap(x, 0, width)\n      xyBottomArr[i2 + 1] = wrap(y, 0, height)\n      xyTopArr[i2] = wrap(x, 0, width)\n      xyTopArr[i2 + 1] = wrap(y + 1, 0, height)\n      idBottomArr[i] = sample.idBottom\n      idTopArr[i] = sample.idTop\n    }\n    const tileBottomPointsGeo = new BufferGeometry()\n    const xyBottomAttr = new Uint8BufferAttribute(xyBottomArr, 2)\n    tileBottomPointsGeo.setAttribute('xy', xyBottomAttr)\n    const idBottomAttr = new Uint16BufferAttribute(idBottomArr, 1)\n    tileBottomPointsGeo.setAttribute('id', idBottomAttr)\n    const tileTopPointsGeo = new BufferGeometry()\n    const xyTopAttr = new Uint8BufferAttribute(xyTopArr, 2)\n    tileTopPointsGeo.setAttribute('xy', xyTopAttr)\n    const idTopAttr = new Uint16BufferAttribute(idTopArr, 1)\n    tileTopPointsGeo.setAttribute('id', idTopAttr)\n    const indexArr = new Uint16Array(totalTiles)\n    for (let i = 0; i < totalTiles; i++) {\n      indexArr[i] = i\n    }\n    tileBottomPointsGeo.setIndex(new BufferAttribute(indexArr, 1))\n    tileTopPointsGeo.setIndex(new BufferAttribute(indexArr, 1))\n    const pass = _jitTileSampler.tileMaker.passes[0]\n    const pointsBottomMaterial = new TileCacheWriterPointMaterial({\n      tileTex: _jitTileSampler.tileMaker.getTexture(pass),\n      viewWidth,\n      viewHeight,\n      pixelsPerTile,\n      pixelsPerCacheEdge\n    })\n    const pointsBottom = new Points(tileBottomPointsGeo, pointsBottomMaterial)\n    this._pointsBottomMaterial = pointsBottomMaterial\n    pointsBottom.frustumCulled = false\n    const pointsTopMaterial = new TileCacheWriterPointMaterial({\n      tileTex: _jitTileSampler.tileMaker.getTexture(pass),\n      viewWidth,\n      viewHeight,\n      pixelsPerTile,\n      pixelsPerCacheEdge\n    })\n    this._pointsTopMaterial = pointsTopMaterial\n    const pointsTop = new Points(tileTopPointsGeo, pointsTopMaterial)\n    pointsTop.frustumCulled = false\n    pointsTop.renderOrder = 1\n\n    for (const pass of _jitTileSampler.tileMaker.passes) {\n      const mapCache = new WebGLRenderTarget(viewWidth, viewHeight, {\n        magFilter: NearestFilter,\n        minFilter: NearestFilter,\n        encoding: LinearEncoding,\n        generateMipmaps: false,\n        wrapS: RepeatWrapping,\n        wrapT: RepeatWrapping\n      })\n      this.mapCache.set(pass, mapCache)\n    }\n\n    const mapCacheScene = new Scene()\n    mapCacheScene.add(pointsBottom)\n    mapCacheScene.add(pointsTop)\n    const mapCacheCamera = new OrthographicCamera(\n      -100,\n      100,\n      -100,\n      100,\n      100,\n      -100\n    )\n    mapCacheScene.add(mapCacheCamera)\n    this.mapCacheScene = mapCacheScene\n    this.mapCacheCamera = mapCacheCamera\n    this.tileBottomPointsGeo = tileBottomPointsGeo\n    this.tileTopPointsGeo = tileTopPointsGeo\n  }\n  render(renderer: WebGLRenderer) {\n    for (const pass of this._jitTileSampler.tileMaker.passes) {\n      renderer.setRenderTarget(this.mapCache.get(pass)!)\n      const passTileTex = this._jitTileSampler.tileMaker.getTexture(pass)\n      this._pointsBottomMaterial.tileTexture = passTileTex\n      this._pointsTopMaterial.tileTexture = passTileTex\n      renderer.render(this.mapCacheScene, this.mapCacheCamera)\n    }\n    renderer.setRenderTarget(null)\n  }\n}\n", "import {\n  Color,\n  RawShaderMaterial,\n  Texture,\n  Uniform,\n  Vector2,\n  Vector4\n} from 'three'\nimport { buildParameters } from '~/utils/jsUtils'\nimport { assertPowerOfTwo } from '~/utils/math'\nimport { getTempTexture } from '~/utils/threeUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\nexport interface TileCacheWriterPointMaterialParameters {\n  color: Color\n  tileTex: Texture\n  viewWidth: number\n  viewHeight: number\n  pixelsPerTile: number\n  pixelsPerCacheEdge: number\n  mapDepthCacheTexture?: Texture\n  mapDepthCacheUvST?: Vector4\n  alternateDepthTileTex?: Texture\n  depthSortByY?: boolean\n  z: number\n}\n\nconst __defaultParams: TileCacheWriterPointMaterialParameters = {\n  color: new Color(1, 0, 0),\n  tileTex: getTempTexture(),\n  viewWidth: 1024,\n  viewHeight: 1024,\n  pixelsPerTile: 32,\n  pixelsPerCacheEdge: 2048,\n  z: 0\n}\n\nexport class TileCacheWriterPointMaterial extends RawShaderMaterial {\n  public get tileTexture(): Texture {\n    return this._tileTexUniform.value\n  }\n  public set tileTexture(value: Texture) {\n    this._tileTexUniform.value = value\n  }\n  public get alternateDepthTileTexture(): Texture {\n    return this._alternateDepthTileTexUniform.value\n  }\n  public set alternateDepthTileTexture(value: Texture) {\n    this._alternateDepthTileTexUniform.value = value\n  }\n  private _tileTexUniform: Uniform\n  private _alternateDepthTileTexUniform: Uniform\n  constructor(options: Partial<TileCacheWriterPointMaterialParameters> = {}) {\n    const params = buildParameters(__defaultParams, options)\n    assertPowerOfTwo(params.pixelsPerTile)\n    assertPowerOfTwo(params.pixelsPerCacheEdge)\n    const uTileTex = new Uniform(params.tileTex)\n    const alternateDepthTileTexUniform = new Uniform(\n      params.alternateDepthTileTex || getTempTexture()\n    )\n    const uniforms: { [key: string]: Uniform } = {\n      uColor: new Uniform(params.color),\n      uTileTex,\n      uViewRes: new Uniform(new Vector2(params.viewWidth, params.viewHeight)),\n      z: new Uniform(params.z)\n    }\n\n    const defines: { [key: string]: boolean | string | number } = {\n      PIXELS_PER_TILE: params.pixelsPerTile.toFixed(1),\n      TILES_PER_CACHE_EDGE: (\n        params.pixelsPerCacheEdge / params.pixelsPerTile\n      ).toFixed(1)\n    }\n    if (params.mapDepthCacheTexture) {\n      uniforms.uMapDepthCacheTexture = new Uniform(params.mapDepthCacheTexture)\n      uniforms.uMapDepthCacheUvST = new Uniform(params.mapDepthCacheUvST)\n      defines.DISCARD_BY_MAP_DEPTH_CACHE = true\n      defines.TILE_VIEW_RATIO = `vec2(${(32 / params.viewWidth).toFixed(6)}, ${(\n        32 / params.viewHeight\n      ).toFixed(6)})`\n      if (params.alternateDepthTileTex) {\n        uniforms.uAlternateDepthTileTex = alternateDepthTileTexUniform\n        defines.ALTERNATE_DEPTH_TILE = true\n      }\n    }\n    if (params.depthSortByY) {\n      defines.DEPTH_SORT_BY_Y = true\n    }\n    super({\n      uniforms,\n      defines,\n      vertexShader,\n      fragmentShader,\n      // alphaTest: 0.5,\n      // transparent: true,\n      depthWrite: true,\n      depthTest: true\n    })\n    this._tileTexUniform = uTileTex\n    this._alternateDepthTileTexUniform = alternateDepthTileTexUniform\n  }\n}\n", "import {\n  BufferAttribute,\n  BufferGeometry,\n  Float32BufferAttribute,\n  LinearEncoding,\n  Mesh,\n  NearestFilter,\n  OrthographicCamera,\n  PlaneBufferGeometry,\n  Points,\n  RepeatWrapping,\n  Scene,\n  Uint16BufferAttribute,\n  Vector4,\n  WebGLRenderer,\n  WebGLRenderTarget\n} from 'three'\nimport { MaterialPassType } from '../helpers/materials/materialLib'\nimport {\n  TileCacheWriterPointMaterial,\n  TileCacheWriterPointMaterialParameters\n} from '../materials/TileCacheWriterPointMaterial'\n\nimport JITSpriteSampler from '../spriteMaker/JITSpriteSampler'\nimport MapCacheRenderer from '../mapCache/MapCacheRenderer'\nimport { getTempTexture } from '../utils/threeUtils'\nimport { BasicTextureMaterial } from '../materials/BasicTextureMaterial'\n\nexport default class MapWithSpritesCacheRenderer {\n  mapCache: Map<MaterialPassType, WebGLRenderTarget> = new Map()\n  mapCacheScene: Scene\n  mapCacheCamera: OrthographicCamera\n  mapCacheBackdropMaterial: BasicTextureMaterial\n  spriteBottomPointsGeo: BufferGeometry\n  spriteTopPointsGeo: BufferGeometry\n  private _pointsTopMaterial: TileCacheWriterPointMaterial\n  private _pointsBottomMaterial: TileCacheWriterPointMaterial\n  backdrop: Mesh<PlaneBufferGeometry, BasicTextureMaterial>\n  offsetX = 0\n  offsetY = 0\n  private _backdropUvST: Vector4\n  private _tilesInViewWidth: number\n  private _tilesInViewHeight: number\n\n  constructor(\n    private _mapCacheRenderer: MapCacheRenderer,\n    width: number,\n    height: number,\n    maxSprites: number,\n    private _jitSpriteSampler: JITSpriteSampler,\n    pixelsPerTile = 32,\n    pixelsPerCacheEdge = 1024\n  ) {\n    const viewWidth = width * pixelsPerTile\n    const viewHeight = height * pixelsPerTile\n    const xyBottomArr = new Float32Array(maxSprites * 2)\n    const xyTopArr = new Float32Array(maxSprites * 2)\n    const idBottomArr = new Uint16Array(maxSprites)\n    const idTopArr = new Uint16Array(maxSprites)\n\n    const tileBottomPointsGeo = new BufferGeometry()\n    const xyBottomAttr = new Float32BufferAttribute(xyBottomArr, 2)\n    tileBottomPointsGeo.setAttribute('xy', xyBottomAttr)\n    const idBottomAttr = new Uint16BufferAttribute(idBottomArr, 1)\n    tileBottomPointsGeo.setAttribute('id', idBottomAttr)\n    const tileTopPointsGeo = new BufferGeometry()\n    const xyTopAttr = new Float32BufferAttribute(xyTopArr, 2)\n    tileTopPointsGeo.setAttribute('xy', xyTopAttr)\n    const idTopAttr = new Uint16BufferAttribute(idTopArr, 1)\n    tileTopPointsGeo.setAttribute('id', idTopAttr)\n    const indexArr = new Uint16Array(maxSprites)\n    for (let i = 0; i < maxSprites; i++) {\n      indexArr[i] = i\n    }\n    tileBottomPointsGeo.setIndex(new BufferAttribute(indexArr, 1))\n    tileTopPointsGeo.setIndex(new BufferAttribute(indexArr, 1))\n    const spriteMaker = _jitSpriteSampler.spriteMaker\n    const pass = _jitSpriteSampler.spriteMaker.passes[0]\n\n    for (const pass of spriteMaker.passes) {\n      const mapCache = new WebGLRenderTarget(viewWidth, viewHeight, {\n        magFilter: NearestFilter,\n        minFilter: NearestFilter,\n        encoding: LinearEncoding,\n        generateMipmaps: false,\n        wrapS: RepeatWrapping,\n        wrapT: RepeatWrapping\n      })\n      this.mapCache.set(pass, mapCache)\n    }\n\n    const uvST = new Vector4(1, 1, 0, 0)\n    const matParams: Partial<TileCacheWriterPointMaterialParameters> = {\n      tileTex: spriteMaker.getTexture(pass),\n      viewWidth,\n      viewHeight,\n      pixelsPerTile,\n      pixelsPerCacheEdge,\n      mapDepthCacheTexture: this._mapCacheRenderer.mapCache.get(\n        'customRoughnessMetalnessHeight'\n      )!.texture,\n      mapDepthCacheUvST: uvST,\n      alternateDepthTileTex: spriteMaker.getTexture(\n        'customRoughnessMetalnessHeight'\n      ),\n      depthSortByY: true\n    }\n    const pointsBottomMaterial = new TileCacheWriterPointMaterial(matParams)\n    const pointsBottom = new Points(tileBottomPointsGeo, pointsBottomMaterial)\n    this._pointsBottomMaterial = pointsBottomMaterial\n    pointsBottom.frustumCulled = false\n    matParams.z = -0.1\n    const pointsTopMaterial = new TileCacheWriterPointMaterial(matParams)\n    this._pointsTopMaterial = pointsTopMaterial\n    const pointsTop = new Points(tileTopPointsGeo, pointsTopMaterial)\n    pointsTop.frustumCulled = false\n    pointsTop.renderOrder = 1\n\n    const mapCacheScene = new Scene()\n    mapCacheScene.add(pointsBottom)\n    mapCacheScene.add(pointsTop)\n    const mapCacheCamera = new OrthographicCamera(\n      -100,\n      100,\n      100,\n      -100,\n      100,\n      -100\n    )\n    mapCacheScene.add(mapCacheCamera)\n    const backdropMaterial = new BasicTextureMaterial({\n      texture: getTempTexture(),\n      uvST\n    })\n    backdropMaterial.depthTest = false\n    backdropMaterial.depthWrite = false\n\n    const backdrop = new Mesh(\n      new PlaneBufferGeometry(200, 200),\n      backdropMaterial\n    )\n    mapCacheScene.add(backdrop)\n    backdrop.position.z = -1\n    backdrop.renderOrder = -1\n    this.backdrop = backdrop\n    this.mapCacheScene = mapCacheScene\n    this.mapCacheCamera = mapCacheCamera\n    this.mapCacheBackdropMaterial = backdropMaterial\n    this.spriteBottomPointsGeo = tileBottomPointsGeo\n    this.spriteTopPointsGeo = tileTopPointsGeo\n    this._backdropUvST = uvST\n    this._tilesInViewWidth = width\n    this._tilesInViewHeight = height\n  }\n  render(renderer: WebGLRenderer) {\n    this._backdropUvST.z = this.offsetX / this._tilesInViewWidth\n    this._backdropUvST.w = this.offsetY / this._tilesInViewHeight\n    for (const pass of this._jitSpriteSampler.spriteMaker.passes) {\n      this.mapCacheBackdropMaterial.texture =\n        this._mapCacheRenderer.mapCache.get(pass)!.texture\n      renderer.setRenderTarget(this.mapCache.get(pass)!)\n      const passTileTex = this._jitSpriteSampler.spriteMaker.getTexture(pass)\n      const passDepthTileTex = this._jitSpriteSampler.spriteMaker.getTexture(\n        pass === 'customTopDownHeight'\n          ? 'customTopDownHeight'\n          : 'customRoughnessMetalnessHeight'\n      )\n      this._pointsBottomMaterial.tileTexture = passTileTex\n      this._pointsBottomMaterial.alternateDepthTileTexture = passDepthTileTex\n      this._pointsTopMaterial.tileTexture = passTileTex\n      this._pointsTopMaterial.alternateDepthTileTexture = passDepthTileTex\n      renderer.clearDepth()\n      renderer.render(this.mapCacheScene, this.mapCacheCamera)\n    }\n    renderer.setRenderTarget(null)\n  }\n}\n", "import {\n  BufferAttribute,\n  BufferGeometry,\n  Color,\n  Float32BufferAttribute,\n  LinearEncoding,\n  NearestFilter,\n  OrthographicCamera,\n  Points,\n  RepeatWrapping,\n  Scene,\n  WebGLRenderer,\n  WebGLRenderTarget\n} from 'three'\n\nimport {\n  PointLightPointMaterial,\n  PointLightPointMaterialParameters\n} from '../materials/PointLightPointMaterial'\nimport MapWithSpritesCacheRenderer from './MapWithSpritesCacheRenderer'\nimport { wrap } from '../utils/math'\nimport { COLOR_BLACK } from '../utils/colorLibrary'\n\nexport class LightController {\n  constructor(\n    public x: number,\n    public y: number,\n    public z: number,\n    public size: number,\n    public color: Color\n  ) {}\n}\n\nexport default class PointLightRenderer {\n  private _lights: LightController[] = []\n  private _lightPointsGeo: BufferGeometry\n  private _viewWidth: number\n  private _viewHeight: number\n  private _pixelsPerTile: number\n  makeLight(x: number, y: number, z: number, size: number, color: Color) {\n    const light = new LightController(x, y, z, size, color)\n    this._lights.push(light)\n    return light\n  }\n  private _renderTarget: WebGLRenderTarget\n  get texture() {\n    return this._renderTarget.texture\n  }\n  pointLightScene: Scene\n  pointLightCamera: OrthographicCamera\n  offsetX = 0\n  offsetY = 0\n\n  constructor(\n    private _mapCacheRenderer: MapWithSpritesCacheRenderer,\n    width: number,\n    height: number,\n    maxPointLights: number,\n    pixelsPerTile = 32\n  ) {\n    const pixelsWidth = width * pixelsPerTile\n    const pixelsHeight = height * pixelsPerTile\n    const renderTarget = new WebGLRenderTarget(pixelsWidth, pixelsHeight, {\n      minFilter: NearestFilter,\n      magFilter: NearestFilter,\n      encoding: LinearEncoding,\n      wrapS: RepeatWrapping,\n      wrapT: RepeatWrapping,\n      generateMipmaps: false\n    })\n\n    const lightPointsGeo = new BufferGeometry()\n    const xyzSizeArr = new Float32Array(maxPointLights * 4)\n    const xyzSizeAttr = new Float32BufferAttribute(xyzSizeArr, 4)\n    lightPointsGeo.setAttribute('xyzSize', xyzSizeAttr)\n    const colorArr = new Float32Array(maxPointLights * 3)\n    const colorAttr = new Float32BufferAttribute(colorArr, 3)\n    lightPointsGeo.setAttribute('color', colorAttr)\n    const indexArr = new Uint16Array(maxPointLights)\n    for (let i = 0; i < maxPointLights; i++) {\n      indexArr[i] = i\n    }\n    lightPointsGeo.setIndex(new BufferAttribute(indexArr, 1))\n\n    const matParams: Partial<PointLightPointMaterialParameters> = {\n      viewWidth: pixelsWidth,\n      viewHeight: pixelsHeight,\n      pixelsPerTile,\n      relativeTileSize: 1 / width,\n      relativePixelSize: 1 / width / pixelsPerTile,\n      mapCacheColorsTexture:\n        this._mapCacheRenderer.mapCache.get('customColor')!.texture,\n      mapCacheNormalsTexture:\n        this._mapCacheRenderer.mapCache.get('normals')!.texture,\n      mapCacheRoughnessMetalnessHeightTexture:\n        this._mapCacheRenderer.mapCache.get('customRoughnessMetalnessHeight')!\n          .texture,\n      mapCacheDepthTopDownTexture: this._mapCacheRenderer.mapCache.get(\n        'customTopDownHeight'\n      )!.texture\n    }\n    const pointsBottomMaterial = new PointLightPointMaterial(matParams)\n    const pointLightPoints = new Points(lightPointsGeo, pointsBottomMaterial)\n    pointLightPoints.frustumCulled = false\n\n    const pointLightScene = new Scene()\n    pointLightScene.add(pointLightPoints)\n    const pointLightCamera = new OrthographicCamera(\n      -100,\n      100,\n      100,\n      -100,\n      100,\n      -100\n    )\n    pointLightScene.add(pointLightCamera)\n\n    this._renderTarget = renderTarget\n    this.pointLightScene = pointLightScene\n    this.pointLightCamera = pointLightCamera\n    this._lightPointsGeo = lightPointsGeo\n    this._viewWidth = width\n    this._viewHeight = height\n    this._pixelsPerTile = pixelsPerTile\n  }\n  render(renderer: WebGLRenderer) {\n    if (this._lights.length > 0) {\n      const ppt = this._pixelsPerTile\n      const lightPointsGeo = this._lightPointsGeo\n      const xyzSizeAttr = lightPointsGeo.getAttribute('xyzSize')\n      const xyzSizeArr = xyzSizeAttr.array as number[]\n      const colorAttr = lightPointsGeo.getAttribute('color')\n      const colorArr = colorAttr.array as number[]\n      lightPointsGeo.drawRange.count = 0\n      let j = 0\n      for (let i = 0; i < this._lights.length; i++) {\n        const sprite = this._lights[i]\n        const x = sprite.x - this.offsetX\n        const y = sprite.y - this.offsetY\n        if (x < 0 || x > this._viewWidth || y < 0 || y > this._viewHeight) {\n          continue\n        }\n        const xSnap = Math.round(wrap(x, 0, this._viewWidth) * ppt) / ppt\n        const ySnap = Math.round(wrap(y, 0, this._viewHeight) * ppt) / ppt\n        const j3 = j * 3\n        const j4 = j * 4\n        xyzSizeArr[j4] = xSnap\n        xyzSizeArr[j4 + 1] = ySnap\n        xyzSizeArr[j4 + 2] = sprite.z\n        xyzSizeArr[j4 + 3] = sprite.size\n        const c = sprite.color\n        colorArr[j3] = c.r\n        colorArr[j3 + 1] = c.g\n        colorArr[j3 + 2] = c.b\n        j++\n      }\n      lightPointsGeo.drawRange.count = j\n      if (j === 0) {\n        return false\n      }\n      xyzSizeAttr.needsUpdate = true\n      colorAttr.needsUpdate = true\n      renderer.setRenderTarget(this._renderTarget)\n      renderer.setClearColor(COLOR_BLACK, 1)\n      renderer.clear(true, true, false)\n      renderer.render(this.pointLightScene, this.pointLightCamera)\n      renderer.setRenderTarget(null)\n      return true\n    } else {\n      return false\n    }\n  }\n}\n", "import {\n  AdditiveBlending,\n  Color,\n  RawShaderMaterial,\n  Texture,\n  Uniform,\n  Vector2\n} from 'three'\nimport { buildParameters } from '~/utils/jsUtils'\nimport { assertPowerOfTwo } from '~/utils/math'\nimport { getTempTexture } from '~/utils/threeUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\nexport interface PointLightPointMaterialParameters {\n  viewWidth: number\n  viewHeight: number\n  pixelsPerTile: number\n  relativeTileSize: number\n  relativePixelSize: number\n  pixelsPerCacheEdge: number\n  mapCacheColorsTexture: Texture\n  mapCacheNormalsTexture: Texture\n  mapCacheRoughnessMetalnessHeightTexture: Texture\n  mapCacheDepthTopDownTexture: Texture\n  z: number\n}\n\nconst __defaultParams: PointLightPointMaterialParameters = {\n  mapCacheColorsTexture: getTempTexture(),\n  mapCacheNormalsTexture: getTempTexture(),\n  mapCacheRoughnessMetalnessHeightTexture: getTempTexture(),\n  mapCacheDepthTopDownTexture: getTempTexture(),\n  viewWidth: 1024,\n  viewHeight: 1024,\n  pixelsPerTile: 32,\n  relativeTileSize: 1 / 16, //one over the number of tiles in view\n  relativePixelSize: 1 / 512, //one over the number of pixels in view\n  pixelsPerCacheEdge: 2048,\n  z: 0\n}\n\nexport class PointLightPointMaterial extends RawShaderMaterial {\n  constructor(options: Partial<PointLightPointMaterialParameters> = {}) {\n    const params = buildParameters(__defaultParams, options)\n    assertPowerOfTwo(params.pixelsPerTile)\n    assertPowerOfTwo(params.pixelsPerCacheEdge)\n    const uTextureColorsMapCache = new Uniform(params.mapCacheColorsTexture)\n    const uTextureNormalsMapCache = new Uniform(params.mapCacheNormalsTexture)\n    const uTextureRoughnessMetalnessHeightMapCache = new Uniform(\n      params.mapCacheRoughnessMetalnessHeightTexture\n    )\n    const uTextureDepthTopDownMapCache = new Uniform(\n      params.mapCacheDepthTopDownTexture\n    )\n\n    const uniforms: { [key: string]: Uniform } = {\n      uColor: new Uniform(new Color(1.0, 0.9, 0.8)),\n      uTextureColorsMapCache,\n      uTextureNormalsMapCache,\n      uTextureRoughnessMetalnessHeightMapCache,\n      uTextureDepthTopDownMapCache,\n      uViewRes: new Uniform(new Vector2(params.viewWidth, params.viewHeight)),\n      z: new Uniform(params.z)\n    }\n\n    const defines: { [key: string]: boolean | string | number } = {\n      PIXELS_PER_TILE: params.pixelsPerTile.toFixed(1),\n      RELATIVE_TILE_SIZE: params.relativeTileSize,\n      RELATIVE_PIXEL_SIZE: params.relativePixelSize,\n      RELATIVE_TILE_PIXEL_SIZE:\n        params.relativePixelSize / params.relativeTileSize\n    }\n\n    defines.PIXEL_VIEW_RATIO = `vec2(${(1 / params.viewWidth).toFixed(6)}, ${(\n      1 / params.viewHeight\n    ).toFixed(6)})`\n    super({\n      uniforms,\n      defines,\n      vertexShader,\n      fragmentShader,\n      blending: AdditiveBlending,\n      transparent: true,\n      depthWrite: false,\n      depthTest: false\n    })\n  }\n}\n", "import { Color } from 'three'\n\nexport const COLOR_BLACK: Readonly<Color> = new Color(0x000000)\nexport const COLOR_WHITE: Readonly<Color> = new Color(0xffffff)\nexport const COLOR_HIGHLIGHT_GREEN: Readonly<Color> = new Color(0x66ff66)\nexport const COLOR_HIGHLIGHT_RED: Readonly<Color> = new Color(0x22afff)\nexport const COLOR_BUFFED_TEXT: Readonly<Color> = new Color(0x66ff66)\nexport const COLOR_NERFED_TEXT: Readonly<Color> = new Color(0xff0000)\nexport const COLOR_DYNAMIC_COST_TEXT: Readonly<Color> = new Color(0xf4e842)\n", "import {\n  BufferGeometry,\n  PlaneGeometry,\n  SphereBufferGeometry,\n  Vector3\n} from 'three'\n\nimport { inferDirection } from './math'\n\nexport function getChamferedBoxGeometry(\n  width: number,\n  height: number,\n  depth: number,\n  chamfer = 0.005\n) {\n  const geo = new SphereBufferGeometry(0.02, 8, 5, Math.PI * 0.125)\n  const posArr = geo.attributes.position.array as number[]\n  const normArr = geo.attributes.normal.array as number[]\n  const tempVec = new Vector3()\n  const tempPos = new Vector3()\n  const halfWidth = width * 0.5 - chamfer\n  const halfHeight = height * 0.5 - chamfer\n  const halfDepth = depth * 0.5 - chamfer\n  for (let i3 = 0; i3 < normArr.length; i3 += 3) {\n    tempVec.fromArray(normArr, i3)\n    tempPos.fromArray(posArr, i3)\n    tempVec.round()\n    if (tempVec.y === 1) {\n      tempVec.set(0, 1, 0)\n    }\n    if (tempVec.y === -1) {\n      tempVec.set(0, -1, 0)\n    }\n    tempVec.toArray(normArr, i3)\n    tempVec.multiplyScalar(chamfer)\n    tempVec.x += halfWidth * inferDirection(tempPos.x)\n    tempVec.y += halfHeight * inferDirection(tempPos.y)\n    tempVec.z += halfDepth * inferDirection(tempPos.z)\n    tempVec.toArray(posArr, i3)\n  }\n  return geo\n}\n\nconst __cachedChamferedBoxGeometry = new Map<string, SphereBufferGeometry>()\nexport function getCachedChamferedBoxGeometry(\n  width: number,\n  height: number,\n  depth: number,\n  chamfer = 0.005\n) {\n  const key = `${width};${height};${depth};${chamfer};`\n  if (!__cachedChamferedBoxGeometry.has(key)) {\n    __cachedChamferedBoxGeometry.set(\n      key,\n      getChamferedBoxGeometry(width, height, depth, chamfer)\n    )\n  }\n  return __cachedChamferedBoxGeometry.get(key)!\n}\n\nlet __sharedRectangleGeometry: BufferGeometry | undefined\nexport function getSharedRectangleGeometry() {\n  if (!__sharedRectangleGeometry) {\n    __sharedRectangleGeometry = new PlaneGeometry(2, 2)\n  }\n  return __sharedRectangleGeometry!\n}\n", "import { Camera, Plane, Ray, Vector3 } from 'three'\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.min(max, Math.max(min, val))\n}\n\nexport function mod(val: number, freq: number) {\n  return ((val % freq) + freq) % freq\n}\n\nexport function wrap(val: number, min: number, max: number) {\n  const range = max - min\n  return ((((val - min) % range) + range) % range) + min\n}\n\nexport function absFloor(val: number) {\n  return Math.floor(Math.abs(val)) * (val < 0 ? -1 : 1)\n}\n\nconst tiny = 0.00001\nexport function closeEnough(val: number, val2: number) {\n  return Math.abs(val - val2) < tiny\n}\n\nexport const TWO_PI = 2 * Math.PI\n\nexport const RADIANS_TO_DEGREES = 180 / Math.PI\n\nexport const DEGREES_TO_RADIANS = Math.PI / 180\n\nexport function radiansToDegrees(radians: number) {\n  return radians * RADIANS_TO_DEGREES\n}\n\nexport function degreesToRadians(degrees: number) {\n  return degrees * DEGREES_TO_RADIANS\n}\n\nconst ray: Ray = new Ray()\nconst flatPlane: Plane = new Plane(new Vector3(0, -1, 0), 1)\nconst anyPlane: Plane = new Plane(new Vector3(0, -1, 0), 1)\nconst intersection: Vector3 = new Vector3()\n\n// const __cameraPosition = new Vector3()\n\nexport function get2DPositionOnPlane(\n  camera: Camera,\n  cameraWorldPos: Vector3,\n  x: number,\n  y: number,\n  plane: Plane\n) {\n  // __cameraPosition.set(0, 0, 0)\n  // camera.localToWorld(__cameraPosition)\n  ray.origin.copy(cameraWorldPos)\n  ray.direction.set(x, y, 0.5).unproject(camera).sub(cameraWorldPos).normalize()\n\n  ray.intersectPlane(plane, intersection)\n  return intersection\n}\nexport function get2DPositionAtDepth(\n  camera: Camera,\n  cameraWorldPos: Vector3,\n  x: number,\n  y: number,\n  atDepth = 0\n) {\n  flatPlane.constant = atDepth\n  return get2DPositionOnPlane(camera, cameraWorldPos, x, y, flatPlane)\n}\nexport function get2DPositionOnPlaneHelper(\n  camera: Camera,\n  cameraWorldPos: Vector3,\n  x: number,\n  y: number,\n  coPlanarPoint: Vector3,\n  normal: Vector3\n) {\n  anyPlane.setFromNormalAndCoplanarPoint(normal, coPlanarPoint)\n  return get2DPositionOnPlane(camera, cameraWorldPos, x, y, anyPlane)\n}\n\nexport function lerp(a: number, b: number, dt: number) {\n  const out = a + dt * (b - a)\n  return Math.abs(b - out) > 0.00001 ? out : b\n}\n\nexport function unlerp(min: number, max: number, value: number) {\n  return (value - min) / (max - min)\n}\n\nexport function unlerpClamped(min: number, max: number, value: number) {\n  return clamp(unlerp(min, max, value), 0, 1)\n}\n\nexport function degreesDifference(A: number, B: number) {\n  return ((((A - B) % 360) + 540) % 360) - 180\n}\n\nconst tau = Math.PI * 2\nconst tauAndHalf = Math.PI * 3\nexport function radiansDifference(a: number, b: number) {\n  return ((((a - b) % tau) + tauAndHalf) % tau) - Math.PI\n}\n\nexport function rand(min = 0, max = 1) {\n  return Math.random() * (max - min) + min\n}\n\nexport function rand2(scale = 1, offset = 0) {\n  return (Math.random() * 2 - 1) * scale + offset\n}\n\nexport function nextHighestPowerOfTwo(val: number) {\n  return Math.pow(Math.ceil(Math.sqrt(val)), 2)\n}\n\nexport function inferDirection(val: number, tolerance = 0.00001) {\n  if (val < -tolerance) {\n    return -1\n  } else if (val > tolerance) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\nexport function sqr(v: number) {\n  return v * v\n}\n\nexport function pixelLengthOnScreen(a: Vector3, b: Vector3, camera: Camera) {\n  a.project(camera)\n  b.project(camera)\n  return Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2))\n}\n\nconst phi = (Math.sqrt(5) + 1) * 0.5 - 1\nconst ga = phi * Math.PI * 2\nexport function pointOnSphereFibonacci(\n  index: number,\n  total: number\n): [number, number] {\n  //[long, lat];\n  return [ga * index, Math.asin(-1 + (2 * index) / total)]\n}\n\nexport function longLatToXYZ(\n  longLat: [number, number],\n  radius: number\n): [number, number, number] {\n  const long = longLat[0]\n  const lat = longLat[1]\n  return [\n    Math.cos(lat) * Math.cos(long) * radius,\n    Math.sin(lat) * radius,\n    Math.cos(lat) * Math.sin(long) * radius\n  ]\n}\n\nexport function powerOfTwo(x: number) {\n  return Math.log2(x) % 1 === 0\n}\n\nexport function assertPowerOfTwo(x: number) {\n  if (!powerOfTwo(x)) {\n    throw new Error(`${x} is not a power of two`)\n  }\n}\n", "import {\n  NearestFilter,\n  RepeatWrapping,\n  Vector2,\n  Vector4,\n  WebGLRenderer,\n  WebGLRenderTarget\n} from 'three'\nimport { wrap } from '~/utils/math'\n\nexport default class TextureCachingScroller {\n  cacheRenderTarget: WebGLRenderTarget\n  lastScrollOffset = new Vector2()\n  scrollOffset = new Vector2(0, 0)\n  cacheResolution = new Vector2(256, 256)\n  cacheDirty = true\n  uvST: Vector4\n\n  constructor(private _externalRender: (renderer: WebGLRenderer) => void) {\n    //\n    const uvST = new Vector4(1, 1, 0, 0)\n    this.uvST = uvST\n    const cacheRenderTarget = new WebGLRenderTarget(\n      this.cacheResolution.x,\n      this.cacheResolution.y,\n      {\n        magFilter: NearestFilter,\n        minFilter: NearestFilter,\n        wrapS: RepeatWrapping,\n        wrapT: RepeatWrapping\n      }\n    )\n    this.cacheRenderTarget = cacheRenderTarget\n  }\n  render(renderer: WebGLRenderer, dt: number) {\n    if (this.cacheDirty) {\n      this._renderCache(renderer, false)\n      renderer.setRenderTarget(null)\n      this.cacheDirty = false\n    } else if (!this.scrollOffset.equals(this.lastScrollOffset)) {\n      const rTarget = this.cacheRenderTarget\n      const scissor = rTarget.scissor\n      const viewport = rTarget.viewport\n      const res = this.cacheResolution\n      let xNew = Math.round(this.scrollOffset.x)\n      let xOld = Math.round(this.lastScrollOffset.x)\n      let yNew = Math.round(this.scrollOffset.y)\n      let yOld = Math.round(this.lastScrollOffset.y)\n      let xDelta = xNew - xOld\n      let yDelta = yNew - yOld\n\n      const xDir = xNew > xOld ? 1 : -1\n      if (xDelta !== 0) {\n        this.uvST.z = xNew / res.x\n        if (xNew < xOld) {\n          const xTemp = xNew\n          xNew = xOld\n          xOld = xTemp\n          xDelta *= -1\n        }\n      }\n      xNew = wrap(xNew, 0, res.x)\n      xOld = wrap(xOld, 0, res.x)\n      const yDir = yNew > yOld ? 1 : -1\n      if (yDelta !== 0) {\n        this.uvST.w = yNew / res.y\n        if (yNew < yOld) {\n          const yTemp = yNew\n          yNew = yOld\n          yOld = yTemp\n          yDelta *= -1\n        }\n      }\n      yNew = wrap(yNew, 0, res.y)\n      yOld = wrap(yOld, 0, res.y)\n\n      if (xDelta !== 0) {\n        const y = yDir === 1 ? yNew : yOld\n        scissor.set(xOld, y, xDelta, res.y)\n        viewport.set(xDir === 1 ? -res.x + xNew : xOld, y, res.x, res.y)\n        if (xNew > xOld) {\n          this._renderCache(renderer, undefined)\n\n          viewport.y = y - res.y\n          scissor.y = y - res.y\n\n          this._renderCache(renderer, undefined)\n        } else {\n          const leapA = xDir === 1 ? res.x : 0\n          const leapB = xDir === 1 ? res.x : -res.x\n\n          scissor.x -= leapA\n\n          this._renderCache(renderer)\n          viewport.y = y - res.y\n          scissor.y = y - res.y\n          this._renderCache(renderer)\n\n          scissor.x += leapB\n          viewport.x += leapB\n\n          viewport.y = y\n          scissor.y = y\n          this._renderCache(renderer)\n          viewport.y = y - res.y\n          scissor.y = y - res.y\n          this._renderCache(renderer)\n        }\n      }\n      if (yDelta !== 0) {\n        scissor.set(0, yOld, res.x, yDelta)\n        const x = xDir === 1 ? xNew : xOld\n        viewport.set(x, yDir === 1 ? -res.y + yNew : yOld, res.x, res.y)\n        if (yNew > yOld) {\n          this._renderCache(renderer)\n\n          viewport.x = x - res.x\n          scissor.x = x - res.x\n          this._renderCache(renderer)\n        } else {\n          const leapA = yDir === 1 ? res.y : 0\n          const leapB = yDir === 1 ? res.y : -res.y\n\n          scissor.y -= leapA\n\n          this._renderCache(renderer)\n          viewport.x = x - res.x\n          scissor.x = x - res.x\n          this._renderCache(renderer)\n\n          scissor.y += leapB\n          viewport.y += leapB\n\n          viewport.x = x\n          scissor.x = x\n          this._renderCache(renderer)\n          viewport.x = x - res.x\n          scissor.x = x - res.x\n          this._renderCache(renderer)\n        }\n      }\n      renderer.setRenderTarget(null)\n      this.lastScrollOffset.copy(this.scrollOffset)\n    }\n  }\n  private _renderCache(\n    renderer: WebGLRenderer,\n    scissorTest = true,\n    clearOnly = false\n  ) {\n    this.cacheRenderTarget.scissorTest = scissorTest\n    renderer.setRenderTarget(this.cacheRenderTarget)\n    renderer.clear(true, true)\n    // renderer.clear(true, true)\n    if (!clearOnly) {\n      this._externalRender(renderer)\n    }\n  }\n}\n", "import { RawShaderMaterial, Texture, Uniform, Vector2, Vector3 } from 'three'\nimport { pixelAspectRatioUniform } from '~/uniforms'\nimport { buildParameters } from '~/utils/jsUtils'\nimport { getTempTexture } from '~/utils/threeUtils'\n\nimport fragmentShader from './frag.glsl'\nimport vertexShader from './vert.glsl'\n\ninterface Parameters {\n  mapTex: Texture\n  tileTex: Texture\n  transform: Vector3\n  tilesPerEdge: number\n  useTwoLayers: boolean\n}\n\nconst __defaultParams: Parameters = {\n  mapTex: getTempTexture(),\n  tileTex: getTempTexture(),\n  transform: new Vector3(0, 0, 1 / 2048),\n  tilesPerEdge: 8,\n  useTwoLayers: false\n}\n\nexport class BasicFullScreenMaterial extends RawShaderMaterial {\n  constructor(options: Partial<Parameters>) {\n    const params = buildParameters(__defaultParams, options)\n    const defines: any = {\n      RESOLUTION: params.tilesPerEdge.toFixed(1)\n    }\n    if (params.useTwoLayers) {\n      defines.USE_TWO_LAYERS = true\n    }\n    super({\n      uniforms: {\n        uMapTex: new Uniform(params.mapTex),\n        uMapSize: new Uniform(\n          new Vector2(params.mapTex.image.width, params.mapTex.image.height)\n        ),\n        uTileTex: new Uniform(params.tileTex),\n        uTransform: new Uniform(params.transform),\n        uAspectRatio: pixelAspectRatioUniform\n      },\n      defines,\n      vertexShader,\n      fragmentShader,\n      // transparent: true,\n      depthWrite: false,\n      depthTest: false\n      // side: DoubleSide\n    })\n  }\n}\n", "import { Uniform, Vector2 } from 'three'\n\nimport device from './device'\n\nexport const timeUniform = new Uniform(0.0)\n\nexport const devicePixelRatioUniform = new Uniform(device.pixelRatio)\nexport const pixelSizeInClipSpaceUniform = new Uniform(\n  new Vector2(2 / device.width, 2 / device.height)\n)\nexport const pixelAspectRatioUniform = new Uniform(device.width / device.height)\ndevice.onChange(() => {\n  pixelAspectRatioUniform.value = device.width / device.height\n})\n", "import JITTileSampler from './rendering/tileMaker/mapTileMaker/JITTileSampler'\nimport MapTileMaker from './rendering/tileMaker/mapTileMaker/MapTileMaker'\nimport MapScrollingView from './helpers/utils/MapScrollingView'\nimport TextureCachingScroller from './rendering/TextureCachingScroller'\n\nimport { BasicFullScreenMaterial } from './materials/BasicFullScreenMaterial'\nimport { SimplexNoiseMaterial } from './materials/SimplexNoiseMaterial'\nimport { BasicTextureMaterial } from './materials/BasicTextureMaterial'\nimport FibonacciSphereGeometry from './geometries/FibonacciSphereGeometry'\nimport { getMeshMaterial } from './helpers/materials/materialLib'\nimport { LightController } from './mapCache/PointLightRenderer'\nimport { SpriteController } from './rendering/tileMaker/spriteMaker/JITSpriteSampler'\n\nexport default {\n  MapTileMaker,\n  JITTileSampler,\n  MapScrollingView,\n  TextureCachingScroller,\n  geometry: {\n    FibonacciSphereGeometry\n  },\n  LightController,\n  SpriteController,\n  getMeshMaterial,\n  materials: {\n    BasicFullScreenMaterial,\n    SimplexNoiseMaterial,\n    BasicTextureMaterial\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
